#line 1 "D:/DEV/DOXYGEN/generated_src/pyscanner.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "D:/DEV/DOXYGEN/generated_src/pyscanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define pyscannerYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer pyscannerYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define pyscannerYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer pyscannerYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define pyscannerYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer pyscannerYY_scan_buffer
#endif

#ifdef yy_scan_string
#define pyscannerYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string pyscannerYY_scan_string
#endif

#ifdef yy_scan_bytes
#define pyscannerYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes pyscannerYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define pyscannerYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer pyscannerYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define pyscannerYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer pyscannerYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define pyscannerYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state pyscannerYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define pyscannerYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer pyscannerYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define pyscannerYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state pyscannerYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define pyscannerYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state pyscannerYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define pyscannerYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack pyscannerYYensure_buffer_stack
#endif

#ifdef yylex
#define pyscannerYYlex_ALREADY_DEFINED
#else
#define yylex pyscannerYYlex
#endif

#ifdef yyrestart
#define pyscannerYYrestart_ALREADY_DEFINED
#else
#define yyrestart pyscannerYYrestart
#endif

#ifdef yylex_init
#define pyscannerYYlex_init_ALREADY_DEFINED
#else
#define yylex_init pyscannerYYlex_init
#endif

#ifdef yylex_init_extra
#define pyscannerYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra pyscannerYYlex_init_extra
#endif

#ifdef yylex_destroy
#define pyscannerYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy pyscannerYYlex_destroy
#endif

#ifdef yyget_debug
#define pyscannerYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug pyscannerYYget_debug
#endif

#ifdef yyset_debug
#define pyscannerYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug pyscannerYYset_debug
#endif

#ifdef yyget_extra
#define pyscannerYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra pyscannerYYget_extra
#endif

#ifdef yyset_extra
#define pyscannerYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra pyscannerYYset_extra
#endif

#ifdef yyget_in
#define pyscannerYYget_in_ALREADY_DEFINED
#else
#define yyget_in pyscannerYYget_in
#endif

#ifdef yyset_in
#define pyscannerYYset_in_ALREADY_DEFINED
#else
#define yyset_in pyscannerYYset_in
#endif

#ifdef yyget_out
#define pyscannerYYget_out_ALREADY_DEFINED
#else
#define yyget_out pyscannerYYget_out
#endif

#ifdef yyset_out
#define pyscannerYYset_out_ALREADY_DEFINED
#else
#define yyset_out pyscannerYYset_out
#endif

#ifdef yyget_leng
#define pyscannerYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng pyscannerYYget_leng
#endif

#ifdef yyget_text
#define pyscannerYYget_text_ALREADY_DEFINED
#else
#define yyget_text pyscannerYYget_text
#endif

#ifdef yyget_lineno
#define pyscannerYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno pyscannerYYget_lineno
#endif

#ifdef yyset_lineno
#define pyscannerYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno pyscannerYYset_lineno
#endif

#ifdef yyget_column
#define pyscannerYYget_column_ALREADY_DEFINED
#else
#define yyget_column pyscannerYYget_column
#endif

#ifdef yyset_column
#define pyscannerYYset_column_ALREADY_DEFINED
#else
#define yyset_column pyscannerYYset_column
#endif

#ifdef yywrap
#define pyscannerYYwrap_ALREADY_DEFINED
#else
#define yywrap pyscannerYYwrap
#endif

#ifdef yyalloc
#define pyscannerYYalloc_ALREADY_DEFINED
#else
#define yyalloc pyscannerYYalloc
#endif

#ifdef yyrealloc
#define pyscannerYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc pyscannerYYrealloc
#endif

#ifdef yyfree
#define pyscannerYYfree_ALREADY_DEFINED
#else
#define yyfree pyscannerYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscannerYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 211
#define YY_END_OF_BUFFER 212
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1267] =
    {   0,
    16535,16535,  153,  153,   33,   33,   40,   40,   48,   48,
      212,  210,  211,  208,  211,  209,  210,  211,   28,  210,
      211,   28,  210,  211,   22,  208,  211,   15,   28,  210,
      211,   28,  210,  211,   14,   28,  209,  210,  211,   26,
       28,  210,  211,   27,   28,  210,  211,   28,  210,  211,
       20,   28,  210,  211,16397,   20,   28,  210,  211,16397,
       20,   28,  210,  211,16397,   20,   28,  210,  211,16397,
       20,   28,  210,  211,16397,   20,   28,  210,  211,16397,
       20,   28,  210,  211,16397,   20,   28,  210,  211,16397,
       20,   28,  210,  211,16397,   21,   28,  210,  211,   20,

       28,  210,  211,16395,16396,16397,   20,   28,  210,  211,
    16395,16396,16397,   20,   28,  210,  211,16395,16396,16397,
       20,   28,  210,  211,16395,16396,16397,   20,   28,  210,
      211,16395,16396,16397,   20,   28,  210,  211,16395,16396,
    16397,   20,   28,  210,  211,16395,16396,16397,   20,   28,
      210,  211,16395,16396,16397,   20,   28,  210,  211,16395,
    16396,16397,   60,   61,  210,  211,   58,  208,  211,   57,
       61,  210,  211,   61,  210,  211,   56,   61,  209,  210,
      211,   61,  210,  211,   59,   61,  210,  211,   59,   61,
      210,  211,   59,   61,  210,  211,   59,   61,  210,  211,

       59,   61,  210,  211,   59,   61,  210,  211,   59,   60,
       61,  210,  211,  182,  185,  210,  211,  185,  210,  211,
      183,  208,  211,  185,  210,  211,  185,  209,  210,  211,
      185,  210,  211,  181,  185,  210,  211,  188,  190,  210,
      211,  189,  208,  211,  190,  210,  211,  188,  190,  209,
      210,  211,  188,  190,  210,  211,  186,  190,  210,  211,
      210,  211,   79,  210,  211,   80,  210,  211,  210,  211,
       77,  210,  211,   76,  210,  211,   88,  210,  211,   81,
      210,  211,   88,  210,  211,   88,  209,  210,  211,   85,
      210,  211,   82,   88,  210,  211,   81,   88,  210,  211,

       86,  210,  211,   84,   88,  210,  211,   83,   88,  210,
      211,   68,   72,  210,  211,   72,  210,  211,   71,  208,
      211,16446,   67,   72,  210,  211,   70,   72,  210,  211,
       66,   72,  209,  210,  211,   68,   72,  210,  211,   68,
       72,  210,  211,   68,   72,  210,  211,   65,   72,  210,
      211,   70,   72,  210,  211,  111,  210,  211,  110,  208,
      211,  109,  111,  210,  211,  108,  111,  209,  210,  211,
      102,  111,  210,  211,  105,  111,  210,  211,  107,  111,
      210,  211,  106,  111,  210,  211,  101,  111,  210,  211,
      104,  111,  210,  211,  100,  111,  210,  211,  103,  111,

      210,  211,   99,  210,  211,   98,  208,  211,   97,   99,
      210,  211,   96,   99,  209,  210,  211,   91,   99,  210,
      211,   94,   99,  210,  211,   95,   99,  210,  211,   90,
       99,  210,  211,   93,   99,  210,  211,   89,   99,  210,
      211,   92,   99,  210,  211,  122,  210,  211,  121,  208,
      211,  120,  122,  210,  211,  119,  122,  209,  210,  211,
      114,  122,  210,  211,  117,  122,  210,  211,  118,  122,
      210,  211,  113,  122,  210,  211,  116,  122,  210,  211,
      112,  122,  210,  211,  115,  122,  210,  211,  135,  210,
      211,  136,  210,  211,  140,  210,  211,  139,  209,  210,

      211,  136,  210,  211,  137,  210,  211,  138,  210,  211,
      210,  211,  145,  208,  211, 8343,  210,  211,  210,  211,
     8343,  210,  211,  209,  210,  211, 8343,  210,  211, 8343,
      210,  211, 8343,  210,  211,  150,  210,  211,  129,  132,
      210,  211,  132,  210,  211,  130,  208,  211,  128,  132,
      210,  211,  132,  210,  211,  127,  132,  209,  210,  211,
      129,  132,  210,  211,  129,  132,  210,  211,  129,  132,
      210,  211,  126,  132,  210,  211,  166,  210,  211,  153,
      166,  210,  211,  167,  208,  211,  158,  166,  210,  211,
      164,  166,  210,  211,  157,  166,  209,  210,  211,  161,

      166,  210,  211,  154,  166,  210,  211,  154,  166,  210,
      211,  152,  166,  210,  211,  165,  166,  210,  211,  165,
      166,  210,  211,  165,  166,  210,  211,  165,  166,  210,
      211,  165,  166,  210,  211,  162,  166,  210,  211,  165,
      166,  210,  211,  163,  166,  210,  211,  178,  210,  211,
      177,  208,  211,  178,  209,  210,  211,  175,  210,  211,
      176,  208,  211,  173,  175,  210,  211,  172,  175,  209,
      210,  211,  168,  175,  210,  211,  169,  175,  210,  211,
      174,  175,  210,  211,  174,  175,  210,  211,  174,  175,
      210,  211,  174,  175,  210,  211,  195,  196,  210,  211,

      196,  210,  211,  194,  196,  209,  210,  211,  196,  210,
      211,  201,  202,  210,  211,  200,  202,  210,  211,  202,
      209,  210,  211,  202,  210,  211,  205,  207,  210,  211,
      205,  206,  208,  211,  205,  207,  210,  211,  205,  207,
      209,  210,  211,  207,  210,  211,  142,  210,  211,  141,
      142,  209,  210,  211,  144,  210,  211,  143,  144,  210,
      211,  144,  209,  210,  211,   34,  210,  211,   33,   34,
      210,  211,   32,  208,  211,   34,  209,  210,  211,   29,
       34,  210,  211,   30,   34,  210,  211,   30,   34,  210,
      211,   45,  210,  211,   40,   45,  210,  211,   39,  208,

      211,   45,  209,  210,  211,   41,   45,  210,  211,   42,
       45,  210,  211,   35,   45,  210,  211,   43,   45,  210,
      211,   38,   45,  210,  211,16420,16421,   45,  210,  211,
       49,  210,  211,   48,   49,  210,  211,   47,  208,  211,
       49,  209,  210,  211,   46,   49,  210,  211,16397,   22,
       19,   18,   19,   17,   17,   20,16397,   20,16397,   20,
    16397,   20,16397,   20,16397,   20,16397,   20,16397,   21,
    16395,16396,16397,16395,16396,16397,16395,16396,16397,16395,
    16396,16397,16395,16396,16397,16395,16396,16397,   20,16395,
    16396,16397,   20,16395,16396,16397,   20,16395,16396,16397,

       20,16395,16396,16397,   20,16395,16396,16397,   20,16395,
    16396,16397,   20,16395,16396,16397,   60,   55,   59,   59,
       59,   59,   59,   60,  182,  184,  181,  188,  187,  188,
      186,  186,   79,   77,   78,   77,   76,   81,   87,   82,
       86,   83,   68,16446,   70,   70,   68,   65,   64,   69,
       70,  135,  136,  138,  145,  149,  148,  150,  129,  131,
      129,  126,  125,  153,  164,  154,  154,  154,  165,  165,
      158,  157,  165,  165,  174,  174,  195,  192,  192,  191,
      201,  198,  198,  197,  205,  205,  205,   33,   30,   30,
       40, 8229, 8228,   38,16420,16421,   44,   48,   46,16397,

       23,   19,   18,   19,   25,   24,   17,   17, 8205,   20,
    16397,   20,16397,   20,16397,   20,16397,   20,16397,16395,
    16396,16397,16395,16396,16397,16395,16396,16397,16395,16396,
    16397,16395,16396,16397,16395,16396,16397, 8204, 8205, 8204,
     8205, 8204, 8205,   20,16395,16396,16397,   20,16395,16396,
    16397,   20,16395,16396,16397,   20,16395,16396,16397,   20,
    16395,16396,16397,   52,   55,   54,   53,   59,   59,  179,
      180,   87,   63, 8254, 8254,   73,   70,   75,   75,   74,
       69,   70,  138,  146,  149,  148,  147,  123,  133,  131,
      134,  159,  160,  155,  154,  154,  165,  165,  170,  171,

      193,  199,  203,  204,   30,   30, 8228,   46,   23,   24,
       17,   17,   17,   20,16397,   20,16397,    3,   20,16397,
       20,16397,16395,16396,16397,16395,16396,16397,16395,16396,
    16397,16395,16396,16397,16395,16396,16397,   20,16395,16396,
    16397,   20,16395,16396,16397,    1,    3,   20,16395,16396,
    16397,   20,16395,16396,16397,   52,   53,   59,   73,   74,
      138,  146,  147,  124,  133,  134,  159,  160,  155,  154,
      165,  156,  165,  170,  171,   30,   30,   46,   17,   17,
       20,16397,   20,16397,    8,   20,16397,16395,16396,16397,
    16395,16396,16397,    1,16395,16396,16397,16395,16396,16397,

       20,16395,16396,16397,   20,16395,16396,16397,    7,    8,
       20,16395,16396,16397,16435,  155,   30,   17,    6,   20,
    16397,16395,16396,16397,16395,16396,16397,    7,16395,16396,
    16397,    5,    6,   20,16395,16396,16397,16435, 8243,16434,
       30,   31,   17,   10,    5,16395,16396,16397,    9,   10,
    16434, 8242,   31,   17,    9,   17,   17,    4, 8203,    2,
        4,   17,    2,   17,   16,   17
    } ;

static const flex_int16_t yy_accept[637] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    6,    7,    8,
        9,   10,   11,   12,   14,   16,   19,   22,   25,   28,
       32,   35,   40,   44,   48,   51,   56,   61,   66,   71,
       76,   81,   86,   91,   96,  100,  107,  114,  121,  128,
      135,  142,  149,  156,  163,  167,  170,  174,  177,  182,
      185,  189,  193,  197,  201,  205,  209,  214,  218,  221,

      224,  227,  231,  234,  238,  242,  245,  248,  253,  257,
      261,  263,  266,  269,  271,  274,  277,  280,  283,  286,
      290,  293,  297,  301,  304,  308,  312,  316,  319,  323,
      327,  331,  336,  340,  344,  348,  352,  356,  359,  362,
      366,  371,  375,  379,  383,  387,  391,  395,  399,  403,
      406,  409,  413,  418,  422,  426,  430,  434,  438,  442,
      446,  449,  452,  456,  461,  465,  469,  473,  477,  481,
      485,  489,  492,  495,  498,  502,  505,  508,  511,  513,
      516,  519,  521,  524,  527,  530,  533,  536,  539,  543,
      546,  549,  553,  556,  561,  565,  569,  573,  577,  580,

      584,  587,  591,  595,  600,  604,  608,  612,  616,  620,
      624,  628,  632,  636,  640,  644,  648,  651,  654,  658,
      661,  664,  668,  673,  677,  681,  685,  689,  693,  697,
      701,  704,  709,  712,  716,  720,  724,  727,  731,  735,
      739,  744,  747,  750,  755,  758,  762,  766,  769,  773,
      776,  780,  784,  788,  792,  795,  799,  802,  806,  810,
      814,  818,  822,  828,  831,  834,  838,  841,  845,  849,
      849,  850,  851,  851,  852,  854,  854,  854,  855,  856,
      856,  856,  856,  858,  858,  858,  858,  860,  862,  864,
      866,  868,  870,  871,  874,  877,  880,  883,  886,  889,

      889,  893,  893,  897,  901,  905,  909,  913,  917,  918,
      918,  919,  919,  919,  920,  920,  920,  921,  922,  923,
      925,  926,  926,  926,  927,  928,  929,  929,  930,  931,
      932,  933,  933,  934,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  944,  945,  945,  945,  945,  946,  947,
      947,  947,  947,  948,  949,  950,  952,  953,  954,  954,
      955,  955,  956,  956,  957,  958,  958,  958,  958,  958,
      959,  960,  960,  960,  960,  961,  961,  961,  961,  962,
      963,  964,  965,  965,  966,  966,  966,  967,  968,  969,
      969,  970,  971,  972,  973,  974,  975,  975,  975,  976,

      976,  976,  977,  978,  978,  979,  980,  981,  982,  982,
      983,  984,  985,  986,  987,  988,  989,  989,  989,  990,
      991,  992,  992,  993,  994,  997,  997,  998,  999,  999,
      999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1007, 1007,
     1008, 1009, 1009, 1009, 1009, 1010, 1012, 1014, 1016, 1018,
     1020, 1023, 1026, 1029, 1032, 1035, 1038, 1040, 1042, 1044,
     1048, 1052, 1056, 1060, 1064, 1065, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1073, 1074, 1075, 1076, 1076, 1077, 1079,
     1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1088, 1089,
     1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,

     1099, 1100, 1101, 1102, 1102, 1103, 1103, 1104, 1105, 1105,
     1106, 1107, 1108, 1108, 1109, 1110, 1111, 1111, 1112, 1113,
     1114, 1114, 1116, 1118, 1119, 1121, 1123, 1126, 1129, 1132,
     1135, 1138, 1138, 1138, 1138, 1142, 1146, 1148, 1152, 1156,
     1157, 1158, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1169, 1170, 1171, 1172, 1174, 1175,
     1176, 1177, 1178, 1179, 1180, 1181, 1183, 1185, 1186, 1188,
     1191, 1194, 1195, 1198, 1201, 1201, 1205, 1209, 1211, 1215,
     1216, 1216, 1216, 1217, 1218, 1219, 1219, 1220, 1222, 1225,
     1228, 1229, 1232, 1232, 1232, 1234, 1238, 1238, 1239, 1240,

     1241, 1243, 1244, 1244, 1245, 1245, 1246, 1249, 1249, 1249,
     1251, 1251, 1252, 1253, 1254, 1255, 1255, 1255, 1256, 1256,
     1256, 1257, 1257, 1257, 1257, 1257, 1258, 1259, 1259, 1260,
     1262, 1263, 1264, 1265, 1267, 1267
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   14,   15,    7,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,    7,    7,
       20,   21,    1,   22,   23,   23,   23,   24,   25,   26,
       27,   28,   27,   29,   28,   30,   28,   28,   28,   28,
       28,   31,   28,   32,   33,   28,   28,   34,   28,   28,
       35,   36,   37,    1,   38,    7,   39,   23,   40,   41,

       42,   43,   28,   44,   45,   29,   28,   46,   47,   48,
       49,   50,   28,   51,   52,   53,   54,   28,   28,   34,
       55,   28,   56,    7,   57,    7,    1,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58
    } ;

static const YY_CHAR yy_meta[59] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    6,    7,
        1,    1,    7,    1,    8,    9,    9,    9,    1,   10,
        1,    1,   11,   11,   11,   11,   12,   12,   12,   12,
       12,   12,   12,   12,    1,   13,    1,   12,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,    1,    1,   14
    } ;

static const flex_int16_t yy_base[757] =
    {   0,
        0,    1,    9,   67,  125,    0,  182,  186,  189,  196,
      222,    0,  280,    0,  337,  390,  442,  497,  552,  607,
      662,  717,  774,    0,  832,    0,  890,  944,  997, 1050,
     1104,    0,  193,  197, 1162,    0,  341,  345,  351,  358,
      364,  368,  200,  203,  204,  211, 1220,    0, 1278,    0,
     1336,    0, 2224, 3406, 3406, 3406, 3406, 2220, 2218, 2215,
        1, 2211, 3406, 3406, 2164,  345,  404,  405,  406,  418,
      433,  352,  429,    0,  339,  420,  461,  484,  499,  483,
      523,  460,  516,    0,    0, 3406, 2208, 2206, 2203, 3406,
        0,  205,  508, 2164, 2167,  515, 1394,    0, 3406, 3406,

     2203, 2199,    0, 2204,    0,    0, 3406,    0,  215, 2197,
      430, 3406, 3406, 2177, 2194,    0, 3406, 2193,    0, 3406,
     3406, 2183, 3406, 2191, 3406,    0,    0, 3406,  383, 2185,
     2170, 2164,  394,  533,  537,  372, 2163, 3406, 3406, 3406,
     3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406,
     3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406,
     3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406, 3406,
     3406,    0, 2166, 3406, 3406, 3406, 3406, 2152,  470, 3406,
     3406, 2161, 2159, 2156,  449,  544,  568,  480,    0, 3406,
     2157, 2157,    0, 1941,  462,  569,  573,  485, 3406, 1945,

     3406, 1941,    0, 1937, 3406,  616,  576, 3406,    0, 1905,
      522, 1888,  606, 3406,  622, 3406, 3406, 3406, 3406, 3406,
     3406, 1932, 1927, 3406, 3406,    0,  523,  630,  635,    0,
     1926, 3406,  567,    0, 3406, 1920,  577, 3406, 3406, 1918,
     1914,    0, 3406, 3406, 3406, 3406, 3406, 3406, 1915, 3406,
     3406, 3406,  349,  493, 3406, 1913, 3406, 3406, 3406, 3406,
     3406, 3406,  588,  580, 3406, 1906, 3406, 3406,  427, 1905,
      639, 1903, 1891,    0,    0,    0, 1880,  469,  598,  667,
      619, 1882,  672,    0, 1875, 1867,  688,  692,  693,  721,
      904,  898,  705,  747,  917,  918,  923,  958,  960,  749,

      972,  409,  981,  977, 1002, 1004, 1016, 1025,    0, 1869,
        0,    0, 1858,    0, 1857, 1848,  620, 1803, 1807, 1452,
        0, 1847, 1839, 3406, 1841,    0,  384, 3406,  395, 1835,
     1827,  702, 3406, 1828, 3406, 1827,    0, 1826,    0, 1810,
     1815,    0,    0,  512, 1809, 1510, 1805,    0,  652, 1798,
     1794, 1779,  671,  583, 3406,    0,    0, 1776,    0, 1759,
      594, 3406, 1767,    0, 1761, 1751, 1751, 1747,  683,  600,
        0, 1747, 1749, 1740,    0, 1730, 1732, 1722,  709,  645,
     3406, 1723, 1712,    0, 1705,  719,  886, 1044, 3406,    0,
        0, 1607, 1642, 1637, 1590,  734, 1631, 1620,    0, 1622,

     1615,  735,    0, 1611, 3406,  681, 3406,    0, 1601, 3406,
      707, 3406, 1597, 1586, 3406, 1591,  446, 1579,  535,  713,
     1567,  897, 3406, 1505, 1006,  753, 3406, 1504,  621, 1495,
      714, 1029, 1482,    0,    0, 3406, 1477, 1438,    0,  645,
      920,  524, 1445, 1044, 3406, 1407, 1423, 1066, 1447, 1564,
     1067, 1422, 1565, 1569, 1570, 1585, 3406,  722, 1395, 1586,
     1424, 1082, 1590, 1605, 1441,    0, 3406, 1436, 1423,  718,
     3406, 3406,    0, 3406, 3406, 1654,    0, 1415,    0, 3406,
     1398,    0, 1384, 1393,    0, 1092, 1093,    0, 1089, 1087,
     1063,    0, 1062, 1040, 1033, 1604, 3406,  526,  971,  979,

     1009,  992, 3406,  763, 3406,  768, 3406, 3406,  982,  907,
      961,  979,  970,  911, 3406, 3406,  929, 3406,  925, 1025,
     1083, 1708, 1709, 1480, 1482, 1713, 1714, 1729, 1628, 1730,
     1734,  892,  854,  848, 1750, 1755, 1629, 1630, 1769, 3406,
     3406,    0,  753, 3406, 3406,  743, 3406, 3406, 3406, 3406,
     3406, 3406, 3406, 1487, 3406, 3406,  711,    0, 3406, 3406,
      952, 1048, 1018,  942, 1413, 1756, 1778, 1782, 1783, 1784,
     1798, 1799, 1803, 1812,  688, 1824, 1825, 1829, 1838,  991,
        0, 1054, 1462, 1571, 1561, 1844, 1857, 1858, 1859, 1863,
     1879, 1880,  658, 1884, 1885, 1899, 1023, 1080, 3406, 1398,

     1481, 1726,  647, 1900, 1901, 1914, 1916,  627,  626, 1928,
     1419, 1421, 3406, 1483,  946,  613,  576, 1930,  505,  505,
     1599,  520,  447,  372,  360, 1582,  218,  213, 3406,  191,
     1602,  184, 1705, 1079, 3406, 1950, 1964, 1978, 1992, 2006,
     2020, 2034, 2048, 2062, 2076, 2090, 2104, 2118, 2132, 2146,
     2159, 2173, 2177, 2190, 2203, 2216, 2230, 2244, 2250, 2264,
     2278, 2292, 2298, 2312, 2318, 2332, 2345, 2359, 2373, 2379,
     2386, 2400, 2414, 2424, 2438, 2452, 2458, 2464, 2478, 2492,
     2506, 2520, 2534, 2547, 2560, 2573, 2586, 2599, 2613, 2627,
     2641, 2650, 2663, 2676, 2690, 2703, 2716, 2729, 2743, 2757,

     2771, 2785, 2791, 2805, 2819, 2825, 2839, 2845, 2859, 2872,
     2886, 2900, 2914, 2920, 2924, 2931, 2945, 2959, 2972, 2986,
     3000,  947, 3006, 3012, 3026, 3040, 3053, 3066, 3079, 3092,
     3105, 3118, 3132, 3146, 3160, 3164, 3173, 3186, 3199, 3212,
     3225, 3238, 3252, 3259, 3273, 3287, 3301, 3308, 3322, 3335,
     3348, 3357, 3361, 3374, 3378, 3391
    } ;

static const flex_int16_t yy_def[757] =
    {   0,
      636,  636,  635,  635,  635,    5,  637,  637,  638,  638,
      635,   11,  635,   13,  639,  639,  640,  640,  641,  641,
      642,  642,  635,   23,  635,   25,  643,  643,  644,  644,
      635,   31,  645,  645,  635,   35,  646,  646,  647,  647,
      648,  648,  649,  649,  650,  650,  635,   47,  635,   49,
      635,   51,  635,  635,  635,  635,  635,  651,  635,  635,
      652,  635,  635,  635,  653,  654,  654,  654,  654,  654,
      654,   68,   68,   68,  655,  656,  656,  656,  656,  656,
      656,   78,   78,   78,  657,  635,  635,  658,  635,  635,
      659,  659,  659,  659,  659,  659,  659,  660,  635,  635,

      635,  635,  661,  635,  662,  635,  635,  662,  662,  635,
      635,  635,  635,  635,  635,  663,  635,  635,  664,  635,
      635,  635,  635,  635,  635,  665,  666,  635,  667,  635,
      668,  635,  666,  666,  666,  635,  669,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  670,  635,  635,  635,  635,  635,  671,  635,  635,
      635,  635,  672,  635,  635,  635,  635,  635,  673,  635,
      674,  635,  675,  635,  673,  673,  673,  635,  635,  635,

      635,  635,  676,  635,  635,  635,  635,  635,  677,  677,
      677,  677,  677,  635,  677,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  678,  678,  678,  678,  679,
      635,  635,  680,  681,  635,  635,  682,  635,  635,  635,
      635,  683,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  684,  684,  635,  635,  635,  635,  635,  635,
      635,  635,  685,  635,  635,  635,  635,  635,  686,  687,
      688,  635,  635,  689,  690,  691,  635,  692,  692,  635,
      635,  693,  694,  695,  635,  635,  694,  694,  694,  694,
      694,  694,  696,  697,  697,  697,  697,  697,  697,  635,

      698,  699,  698,  698,  698,  698,  698,  698,  700,  635,
      701,  702,  635,  703,  635,  635,  703,  703,  703,  703,
      704,  635,  635,  635,  635,  705,  635,  635,  705,  635,
      635,  635,  635,  635,  635,  635,  706,  635,  707,  635,
      635,  708,  709,  710,  635,  635,  635,  711,  712,  635,
      635,  635,  709,  635,  635,  713,  714,  635,  715,  716,
      635,  635,  635,  717,  635,  635,  635,  635,  635,  635,
      718,  635,  719,  635,  720,  635,  635,  635,  718,  635,
      635,  635,  635,  721,  635,  635,  635,  635,  635,  722,
      723,  723,  635,  635,  723,  723,  635,  635,  724,  635,

      635,  724,  725,  635,  635,  635,  635,  726,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  727,  728,  728,
      635,  635,  635,  635,  729,  635,  635,  635,  635,  730,
      731,  732,  635,  733,  734,  635,  635,  735,  736,  737,
      737,  635,  738,  739,  635,  740,  740,  740,  740,  740,
      741,  741,  741,  741,  741,  741,  635,  635,  635,  742,
      742,  742,  742,  742,  635,  743,  635,  635,  744,  744,
      635,  635,  745,  635,  635,  635,  476,  635,  746,  635,
      635,  747,  748,  635,  717,  635,  635,  749,  635,  719,
      635,  720,  635,  635,  635,  635,  635,  722,  723,  723,

      635,  635,  635,  635,  635,  635,  635,  635,  727,  750,
      728,  635,  730,  751,  635,  635,  735,  635,  752,  737,
      739,  740,  740,  635,  740,  740,  741,  741,  741,  741,
      741,  635,  635,  635,  742,  742,  635,  742,  742,  635,
      635,  753,  744,  635,  635,  748,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  723,  723,  635,  635,
      750,  728,  751,  752,  737,  740,  740,  635,  740,  741,
      741,  635,  741,  741,  635,  742,  742,  635,  742,  754,
      755,  635,  635,  728,  737,  635,  635,  740,  741,  741,
      635,  741,  635,  635,  635,  742,  635,  754,  635,  756,

      728,  737,  635,  635,  635,  635,  741,  635,  635,  635,
      635,  756,  635,  635,  737,  635,  635,  635,  635,  635,
      737,  635,  635,  635,  635,  737,  635,  635,  635,  635,
      737,  635,  737,  737,    0,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,

      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635
    } ;

static const flex_int16_t yy_nxt[3465] =
    {   0,
      635,  327,   55,   55,  275,  328,  276,   56,   56,   57,
       58,   59,   57,   60,   61,   57,   62,   63,   64,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       65,   66,   66,   66,   66,   66,   66,   66,   66,   67,
       66,   68,   66,   57,   57,   57,   66,   69,   70,   71,
       66,   72,   66,   73,   66,   66,   66,   66,   66,   67,
       66,   66,   74,   66,   57,   57,   66,   57,   75,   59,
       57,   60,   61,   57,   62,   63,   64,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   65,   76,
       76,   76,   76,   76,   76,   76,   76,   77,   76,   78,

       76,   57,   57,   57,   76,   79,   80,   81,   76,   82,
       76,   83,   76,   76,   76,   76,   76,   77,   76,   76,
       84,   76,   57,   57,   76,   85,   85,   86,   85,   87,
       88,   85,   89,   85,   85,   85,   85,   85,   85,   90,
       85,   85,   85,   85,   85,   85,   85,   91,   91,   91,
       91,   91,   91,   91,   91,   92,   91,   93,   91,   85,
       85,   85,   91,   91,   94,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   92,   95,   91,   96,   91,
       85,   85,   97,   99,  100,  632,  101,  104,  100,  102,
      101,  106,  630,  102,  107,  218,  108,  109,  106,  218,

      219,  110,   55,  108,  219,   55,   55,  244,  246,  315,
      244,  247,  316,   55,  632,  246,  329,  103,  247,  627,
      330,  103,   54,  111,   55,   54,   54,   54,   54,   56,
      112,  113,   54,   54,   54,  114,   54,   54,   54,   54,
      115,   54,   54,   54,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,   54,   54,   54,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,   54,   54,  116,
      117,  118,   55,  117,  117,  119,  117,  120,   54,  121,
      122,  117,  123,  117,  117,  117,  117,  117,  124,  125,

      117,  117,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  117,  117,  117,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  117,  117,  126,  128,  129,
      293,  130,  131,   55,  132,  231,  280,   55,  232,  231,
      417,  128,  232,   55,  281,  235,  635,  282,  236,  635,
       55,  630,  235,  418,  284,  236,  239,  133,  240,  134,
      239,  241,  240,  354,  355,  241,  233,  295,  296,  297,
      233,  298,  283,  299,  344,  327,  237,  133,  345,  328,
      135,  136,  129,  237,  130,  137,  329,  132,  351,  242,

      330,  352,  291,  242,  128,  280,  280,  280,  285,  285,
      458,  286,  286,  281,  281,  281,  282,  282,  282,  280,
      133,  300,  134,  284,  284,  284,  629,  281,  429,  281,
      282,  332,  282,  635,  280,  287,  635,  284,  333,  302,
      133,  430,  281,  135,  139,  282,  140,  417,  334,  141,
      142,  143,  284,  367,  144,  287,  368,  288,  459,  283,
      418,  145,  300,  289,  635,  285,  377,  635,  286,  378,
      281,  361,  362,  282,  290,  292,  146,  438,  147,  283,
      302,  370,  362,  439,  300,  300,  380,  381,  285,  628,
      301,  286,  281,  281,  417,  282,  282,  148,  149,  139,

      300,  140,  302,  302,  141,  142,  143,  418,  281,  144,
      307,  282,  315,  344,  303,  316,  145,  345,  302,  315,
      635,  627,  316,  635,  300,  442,  393,  400,  305,  394,
      401,  146,  281,  147,  303,  282,  417,  351,  317,  420,
      352,  351,  302,  284,  352,  317,  301,  625,  367,  418,
      304,  368,  148,  149,  151,  556,  152,  624,  317,  153,
      154,  155,  308,  353,  306,  317,  301,  353,  406,  407,
      156,  556,  367,  377,  369,  368,  378,  377,  411,  412,
      378,  426,  427,  353,  354,  355,  157,  353,  158,  422,
      386,  388,  388,  388,  369,  361,  362,  423,  369,  379,

      424,  370,  362,  379,  389,  389,  438,  159,  160,  151,
      393,  152,  439,  394,  153,  154,  155,  623,  369,  379,
      442,  389,  429,  379,  315,  156,  393,  316,  281,  394,
      386,  387,  387,  388,  400,  430,  396,  401,  284,  400,
      280,  157,  401,  158,  389,  389,  380,  381,  281,  390,
      441,  282,  396,  438,  480,  622,  396,  348,  284,  439,
      402,  389,  159,  160,  162,  402,  163,  620,  280,  164,
      165,  166,  396,  280,  167,  351,  281,  619,  352,  282,
      402,  281,  504,  407,  282,  402,  284,  367,  616,  280,
      368,  284,  285,  280,  280,  286,  168,  281,  169,  608,

      282,  281,  281,  332,  282,  282,  293,  284,  506,  412,
      333,  284,  284,  377,  417,  429,  378,  170,  171,  162,
      334,  163,  280,  532,  164,  165,  166,  418,  430,  167,
      281,  447,  635,  282,  496,  496,  496,  593,  393,  400,
      284,  394,  401,  295,  296,  297,  446,  298,  300,  299,
      300,  168,  558,  169,  426,  427,  281,  359,  281,  282,
      543,  282,  511,  448,  504,  407,  302,  581,  302,  506,
      412,  533,  170,  171,   54,   54,   55,   54,   54,   54,
       54,   56,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,   54,   54,
       54,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,   54,
       54,  172,   54,  173,   55,   54,  174,   54,   54,  175,
      176,  176,   54,   54,  176,   54,   54,   54,   54,   54,
      177,   54,   54,   54,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,   54,   54,   54,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,   54,   54,  178,
       54,  179,  180,  532,  182,  183,  575,  184,  422,  280,

      386,  387,  387,  388,  534,  280,  423,  281,  417,  424,
      282,   54,  429,  281,  389,  497,  282,  284,  300,  300,
      185,  418,  186,  284,  300,  430,  281,  281,  438,  282,
      282,  497,  281,  438,  439,  282,  302,  302,  518,  439,
      185,  533,  302,  187,   54,  188,  180,  450,  182,  183,
      438,  184,  449,  417,  438,  498,  439,  498,  520,  300,
      439,  300,  417,  453,  454,   54,  418,  281,  452,  281,
      282,  513,  282,  300,  185,  418,  186,  302,  300,  302,
      512,  281,  300,  509,  282,  285,  281,  621,  286,  282,
      281,  302,  597,  282,  185,  560,  302,  187,  190,  191,

      302,  192,  193,  300,  194,  300,  456,  422,  455,  562,
      599,  281,  559,  281,  282,  423,  282,  300,  424,  429,
      558,  302,  557,  302,  597,  281,  300,  195,  282,  196,
      280,  460,  430,  438,  281,  302,  553,  282,  281,  439,
      461,  282,  599,  552,  302,  280,  462,  195,  284,  417,
      197,  198,  191,  281,  192,  193,  282,  194,  386,  388,
      388,  388,  418,  284,  463,  551,  550,  524,  300,  583,
      583,  583,  389,  389,  464,  281,  281,  565,  282,  282,
      195,  597,  196,  537,  280,  284,  302,  438,  489,  389,
      489,  281,  281,  439,  282,  282,  548,  486,  584,  599,

      195,  302,  284,  197,  199,  200,  201,  199,  202,  203,
      199,  204,  205,  199,  199,  199,  199,  199,  199,  206,
      207,  207,  199,  208,  199,  199,  209,  209,  209,  210,
      209,  209,  209,  209,  211,  212,  213,  209,  214,  199,
      199,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  211,  209,  209,  215,  209,  216,
      199,  209,  220,  220,  221,  220,  222,  220,  220,  223,
      224,  225,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  226,  226,  226,  226,  226,  226,
      226,  226,  227,  226,  228,  226,  224,  220,  225,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  227,  226,  226,  229,  226,  224,  225,  226,
      248,  249,  250,  248,  248,  248,  248,  251,  248,  248,
      248,  248,  248,  248,  252,  248,  248,  248,  248,  248,
      248,  248,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  248,  248,  248,  253,  253,  253,
      253,  253,  253,  253,  254,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  248,  248,  253,  255,  256,
      257,  255,  255,  255,  255,  258,  259,  260,  261,  255,
      262,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  255,  264,  255,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  255,  255,  263,  265,  266,  267,  265,
      265,  265,  265,  268,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      265,  265,  265,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  265,  265,  269,  309,  309,  547,  309,  359,  611,

      309,  545,  309,  309,  309,  309,  309,  309,  280,  320,
      320,  320,  309,  309,  309,  309,  281,  613,  544,  282,
      611,  438,  611,  300,  280,  300,  284,  439,  309,  309,
      309,  281,  281,  281,  282,  282,  282,  542,  613,  541,
      613,  302,  284,  302,  540,  534,  443,  518,  280,  309,
      309,  320,  309,  309,  522,  309,  281,  585,  309,  282,
      309,  309,  309,  309,  309,  309,  284,  320,  320,  320,
      309,  309,  309,  309,  523,  536,  527,  583,  583,  583,
      516,  524,  614,  568,  614,  515,  309,  309,  309,  281,
      555,  281,  282,  525,  282,  418,  513,  418,  582,  284,

      582,  284,  583,  583,  583,  428,  512,  309,  309,  320,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  476,  476,  476,  475,  475,
      475,  475,  476,  477,  477,  476,  477,  476,  476,  477,
      477,  477,  476,  476,  475,  475,  475,  477,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  280,  300,  476,  421,  438,
      300,  300,  417,  281,  281,  439,  282,  282,  281,  281,
      509,  282,  282,  284,  302,  418,  300,  300,  302,  302,
      438,  300,  416,  508,  281,  281,  439,  282,  282,  281,

      602,  507,  282,  528,  302,  302,  300,  438,  505,  302,
      438,  529,  526,  439,  281,  503,  439,  282,  530,  496,
      496,  496,  398,  601,  302,  631,  397,  502,  554,  572,
      537,  578,  555,  535,  531,  501,  538,  281,  281,  281,
      282,  282,  282,  500,  385,  554,  383,  302,  302,  302,
      633,  626,  499,  539,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  476,
      476,  476,  475,  475,  475,  475,  476,  477,  477,  476,
      477,  476,  476,  477,  477,  477,  476,  476,  475,  475,
      475,  477,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  280,
      280,  476,  495,  438,  280,  300,  494,  281,  281,  439,
      282,  282,  281,  281,  382,  282,  282,  284,  284,  376,
      300,  300,  284,  302,  438,  300,  374,  493,  281,  281,
      439,  282,  282,  281,  491,  634,  282,  566,  302,  302,
      489,  300,  488,  302,  366,  363,  300,  586,  487,  281,
      567,  570,  282,  569,  281,  281,  486,  282,  282,  302,
      300,  484,  615,  359,  302,  284,  573,  358,  281,  587,
      571,  282,  574,  568,  280,  300,  350,  281,  302,  576,
      282,  281,  281,  281,  282,  282,  282,  284,  347,  300,

      572,  284,  284,  302,  591,  481,  577,  281,  281,  478,
      282,  282,  281,  300,  474,  282,  341,  302,  302,  579,
      340,  281,  302,  589,  282,  594,  595,  338,  336,  336,
      578,  302,  331,  281,  281,  588,  282,  282,  281,  300,
      331,  282,  325,  302,  302,  586,  472,  281,  302,  590,
      282,  471,  470,  281,  469,  313,  282,  302,  587,  604,
      605,  310,  592,  284,  606,  468,  281,  281,  281,  282,
      282,  282,  281,  465,  277,  282,  284,  284,  302,  273,
      591,  300,  302,  443,  603,  594,  595,  437,  281,  281,
      596,  282,  282,  281,  281,  433,  282,  282,  302,  302,

      610,  604,  605,  302,  302,  272,  270,  428,  281,  281,
      281,  282,  282,  282,  421,  606,  416,  618,  302,  284,
      302,  414,  413,  281,  609,  281,  282,  409,  282,  610,
      404,  618,  607,  302,  398,  302,  397,  281,  395,  281,
      282,  617,  282,  392,  385,  383,  382,  302,  376,  302,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      271,  374,  372,  366,  365,  363,  359,  358,  349,  271,
      271,  350,  271,  274,  274,  349,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  278,  278,  347,
      278,  283,  341,  340,  338,  336,  283,  335,  283,  283,

      283,  283,  331,  283,  294,  325,  323,  322,  319,  318,
      313,  312,  310,  294,  294,  279,  294,  301,  277,  273,
      272,  270,  301,  635,  301,  301,  301,  301,  635,  301,
      309,  309,  635,  635,  635,  309,  309,  635,  309,  309,
      635,  635,  309,  309,  311,  311,  635,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  314,  635,
      314,  314,  635,  314,  321,  635,  635,  635,  321,  321,
      321,  321,  321,  321,  321,  321,  635,  321,  324,  324,
      635,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  326,  326,  635,  326,  635,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  337,  635,  337,  337,
      635,  337,  339,  339,  635,  339,  635,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  342,  635,  342,  342,
      635,  342,  343,  635,  635,  635,  635,  343,  343,  635,
      343,  343,  343,  343,  343,  343,  346,  635,  635,  346,
      635,  635,  635,  635,  635,  346,  346,  635,  346,  348,
      348,  635,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  356,  356,  635,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  357,  635,  357,
      357,  635,  357,  360,  360,  635,  360,  360,  635,  360,

      364,  364,  635,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  371,  635,  635,  635,  635,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  373,  635,
      635,  635,  635,  635,  373,  373,  635,  373,  375,  375,
      635,  375,  635,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  384,  384,  635,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  391,  635,  391,  391,
      635,  391,  399,  635,  399,  399,  635,  399,  403,  403,
      635,  635,  403,  403,  403,  403,  403,  403,  403,  403,
      635,  403,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  408,  408,  635,  635,
      408,  408,  408,  408,  408,  408,  408,  408,  635,  408,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  415,  415,  635,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  419,  635,
      635,  635,  635,  635,  419,  419,  635,  419,  419,  635,
      419,  425,  635,  635,  635,  635,  425,  635,  425,  635,
      425,  425,  635,  425,  431,  635,  635,  635,  635,  635,
      431,  431,  635,  431,  431,  635,  431,  271,  635,  635,
      635,  635,  635,  635,  635,  635,  271,  271,  635,  271,

      432,  635,  635,  635,  635,  432,  635,  432,  432,  432,
      432,  635,  432,  434,  434,  635,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  435,  435,  635,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  436,  436,  436,  436,  635,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  440,  635,  440,  440,  635,
      440,  440,  635,  440,  444,  635,  635,  635,  635,  635,
      635,  635,  635,  444,  444,  635,  444,  283,  635,  635,
      635,  635,  283,  635,  283,  283,  283,  283,  635,  283,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  635,

      445,  445,  445,  445,  294,  635,  635,  635,  635,  635,
      635,  635,  635,  294,  294,  635,  294,  451,  635,  635,
      635,  635,  451,  635,  451,  451,  451,  451,  635,  451,
      301,  635,  635,  635,  635,  301,  635,  301,  301,  301,
      301,  635,  301,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  635,  457,  457,  457,  457,  309,  309,  635,
      635,  635,  309,  309,  635,  309,  309,  635,  635,  309,
      309,  466,  466,  635,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  635,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  314,

      635,  314,  314,  635,  314,  321,  635,  635,  635,  321,
      321,  321,  321,  321,  321,  321,  321,  635,  321,  326,
      326,  635,  326,  635,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  337,  635,  337,  337,  635,  337,  473,
      473,  635,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  342,  635,  342,  342,  635,  342,  343,
      635,  635,  635,  635,  343,  343,  635,  343,  343,  343,
      343,  343,  343,  346,  635,  635,  346,  635,  635,  635,
      635,  635,  346,  346,  635,  346,  348,  348,  635,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  482,  482,  635,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  357,  635,
      357,  357,  635,  357,  483,  483,  635,  483,  360,  360,
      635,  360,  360,  635,  360,  485,  485,  635,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  371,
      635,  635,  635,  635,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  490,  635,  635,  635,  635,  635,  635,
      490,  635,  490,  490,  635,  490,  492,  492,  635,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      384,  384,  635,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  391,  635,  391,  391,  635,  391,
      399,  635,  399,  399,  635,  399,  403,  403,  635,  635,
      403,  403,  403,  403,  403,  403,  403,  403,  635,  403,
      408,  408,  635,  635,  408,  408,  408,  408,  408,  408,
      408,  408,  635,  408,  510,  635,  635,  635,  635,  635,
      635,  635,  635,  510,  510,  635,  510,  419,  635,  635,
      635,  635,  635,  419,  419,  635,  419,  419,  635,  419,
      425,  635,  635,  635,  635,  425,  635,  425,  635,  425,
      425,  635,  425,  514,  635,  635,  635,  635,  635,  635,

      635,  635,  514,  514,  635,  514,  431,  635,  635,  635,
      635,  635,  431,  431,  635,  431,  431,  635,  431,  432,
      635,  635,  635,  635,  432,  635,  432,  432,  432,  432,
      635,  432,  434,  434,  635,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  435,  435,  635,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  519,  519,  635,  519,  440,  635,
      440,  440,  635,  440,  440,  635,  440,  444,  635,  635,
      635,  635,  635,  635,  635,  635,  444,  444,  635,  444,

      521,  635,  635,  635,  635,  521,  635,  521,  521,  521,
      521,  635,  521,  283,  635,  635,  635,  635,  283,  635,
      283,  283,  283,  283,  635,  283,  451,  635,  635,  635,
      635,  451,  635,  451,  451,  451,  451,  635,  451,  301,
      635,  635,  635,  635,  301,  635,  301,  301,  301,  301,
      635,  301,  466,  466,  635,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  314,  314,  635,  314,
      314,  635,  314,  473,  473,  635,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  348,  348,  635,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  482,  482,  635,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  546,  546,  635,  546,  546,
      635,  546,  549,  549,  549,  549,  635,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  561,  635,  635,  635,
      635,  635,  561,  561,  635,  561,  561,  635,  561,  563,
      635,  635,  635,  635,  635,  563,  563,  635,  563,  563,
      635,  563,  564,  635,  564,  564,  635,  564,  564,  635,
      564,  580,  580,  635,  580,  598,  635,  635,  635,  635,
      635,  635,  598,  598,  598,  598,  635,  598,  600,  600,
      635,  600,  612,  635,  635,  635,  635,  635,  635,  612,

      612,  612,  612,  635,  612,   53,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635
    } ;

static const flex_int16_t yy_chk[3465] =
    {   0,
        0,  106,    1,    2,   61,  106,   61,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,  632,    7,    8,    8,    7,
        8,    9,  630,    8,    9,   33,    9,   10,   10,   34,

       33,   10,   43,   10,   34,   44,   45,   43,   45,   92,
       44,   45,   92,   46,  628,   46,  109,    7,   46,  627,
      109,    8,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   15,   15,
       75,   15,   15,   37,   15,   37,   66,   38,   37,   38,
      253,   15,   38,   39,   66,   39,   72,   66,   39,   72,
       40,  625,   40,  253,   66,   40,   41,   15,   41,   15,
       42,   41,   42,  136,  136,   42,   37,   75,   75,   75,
       38,   75,   72,   75,  129,  327,   39,   15,  129,  327,
       15,   16,   16,   40,   16,   16,  329,   16,  133,   41,

      329,  133,   72,   42,   16,   67,   68,   69,   67,   68,
      302,   67,   68,   67,   68,   69,   67,   68,   69,   70,
       16,   76,   16,   67,   68,   69,  624,   70,  269,   76,
       70,  111,   76,   73,   71,   68,   73,   70,  111,   76,
       16,  269,   71,   16,   17,   71,   17,  417,  111,   17,
       17,   17,   71,  185,   17,   68,  185,   69,  302,   73,
      417,   17,   77,   70,   82,   77,  195,   82,   77,  195,
       77,  179,  179,   77,   71,   73,   17,  278,   17,   73,
       77,  188,  188,  278,   80,   78,  198,  198,   78,  623,
       82,   78,   80,   78,  254,   80,   78,   17,   17,   18,

       79,   18,   80,   78,   18,   18,   18,  254,   79,   18,
       82,   79,   93,  344,   78,   93,   18,  344,   79,   96,
       83,  622,   96,   83,   81,  442,  211,  227,   80,  211,
      227,   18,   81,   18,   78,   81,  419,  134,   93,  254,
      134,  135,   81,  442,  135,   96,   83,  620,  186,  419,
       79,  186,   18,   18,   19,  498,   19,  619,   93,   19,
       19,   19,   83,  134,   81,   96,   83,  135,  233,  233,
       19,  498,  187,  196,  186,  187,  196,  197,  237,  237,
      197,  264,  264,  134,  354,  354,   19,  135,   19,  263,
      207,  207,  207,  207,  186,  361,  361,  263,  187,  196,

      263,  370,  370,  197,  207,  207,  279,   19,   19,   20,
      213,   20,  279,  213,   20,   20,   20,  617,  187,  196,
      281,  207,  429,  197,  317,   20,  215,  317,  281,  215,
      206,  206,  206,  206,  228,  429,  213,  228,  281,  229,
      271,   20,  229,   20,  206,  206,  380,  380,  271,  206,
      279,  271,  215,  440,  349,  616,  213,  349,  271,  440,
      228,  206,   20,   20,   21,  229,   21,  609,  280,   21,
       21,   21,  215,  283,   21,  353,  280,  608,  353,  280,
      228,  283,  406,  406,  283,  229,  280,  369,  603,  287,
      369,  283,  287,  288,  289,  287,   21,  287,   21,  593,

      287,  288,  289,  332,  288,  289,  293,  287,  411,  411,
      332,  288,  289,  379,  420,  431,  379,   21,   21,   22,
      332,   22,  290,  458,   22,   22,   22,  420,  431,   22,
      290,  289,  470,  290,  386,  386,  386,  575,  396,  402,
      290,  396,  402,  293,  293,  293,  288,  293,  294,  293,
      300,   22,  557,   22,  426,  426,  294,  546,  300,  294,
      470,  300,  420,  290,  504,  504,  294,  543,  300,  506,
      506,  458,   22,   22,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       27,   27,   27,  532,   27,   27,  534,   27,  422,  292,

      387,  387,  387,  387,  533,  291,  422,  292,  510,  422,
      292,   27,  514,  291,  387,  387,  291,  292,  295,  296,
       27,  510,   27,  291,  297,  514,  295,  296,  441,  295,
      296,  387,  297,  519,  441,  297,  295,  296,  517,  519,
       27,  532,  297,   27,   28,   28,   28,  292,   28,   28,
      564,   28,  291,  561,  615,  722,  564,  722,  441,  298,
      615,  299,  511,  296,  297,   28,  561,  298,  295,  299,
      298,  513,  299,  301,   28,  511,   28,  298,  304,  299,
      512,  301,  303,  509,  301,  303,  304,  615,  303,  304,
      303,  301,  580,  303,   28,  502,  304,   28,   29,   29,

      303,   29,   29,  305,   29,  306,  299,  425,  298,  511,
      580,  305,  501,  306,  305,  425,  306,  307,  425,  563,
      500,  305,  499,  306,  597,  307,  308,   29,  307,   29,
      432,  304,  563,  520,  308,  307,  495,  308,  432,  520,
      305,  432,  597,  494,  308,  444,  306,   29,  432,  562,
       29,   30,   30,  444,   30,   30,  444,   30,  388,  388,
      388,  388,  562,  444,  307,  493,  491,  448,  451,  582,
      582,  582,  388,  388,  308,  448,  451,  520,  448,  451,
       30,  598,   30,  462,  521,  448,  451,  634,  490,  388,
      489,  462,  521,  634,  462,  521,  487,  486,  562,  598,

       30,  462,  521,   30,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   97,   97,  484,   97,  483,  600,

       97,  481,   97,   97,   97,   97,   97,   97,  446,   97,
       97,   97,   97,   97,   97,   97,  446,  600,  478,  446,
      611,  565,  612,  452,  447,  461,  446,  565,   97,   97,
       97,  452,  447,  461,  452,  447,  461,  469,  611,  468,
      612,  452,  447,  461,  465,  459,  443,  438,  449,   97,
       97,   97,  320,  320,  446,  320,  449,  565,  320,  449,
      320,  320,  320,  320,  320,  320,  449,  320,  320,  320,
      320,  320,  320,  320,  447,  461,  452,  583,  583,  583,
      437,  524,  601,  525,  614,  433,  320,  320,  320,  524,
      583,  525,  524,  449,  525,  601,  430,  614,  554,  524,

      554,  525,  554,  554,  554,  428,  424,  320,  320,  320,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  450,  453,  346,  421,  585,
      454,  455,  584,  450,  453,  585,  450,  453,  454,  455,
      418,  454,  455,  450,  453,  584,  456,  460,  454,  455,
      626,  463,  416,  414,  456,  460,  626,  456,  460,  463,

      585,  413,  463,  453,  456,  460,  464,  621,  409,  463,
      631,  454,  450,  621,  464,  404,  631,  464,  455,  496,
      496,  496,  401,  584,  464,  626,  400,  398,  496,  529,
      537,  538,  496,  460,  456,  397,  463,  529,  537,  538,
      529,  537,  538,  395,  394,  496,  393,  529,  537,  538,
      631,  621,  392,  464,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  522,
      523,  476,  385,  633,  526,  527,  383,  522,  523,  633,
      522,  523,  526,  527,  382,  526,  527,  522,  523,  378,
      528,  530,  526,  527,  602,  531,  377,  376,  528,  530,
      602,  528,  530,  531,  374,  633,  531,  522,  528,  530,
      373,  535,  372,  531,  368,  367,  536,  566,  366,  535,
      523,  527,  535,  526,  536,  566,  365,  536,  566,  535,
      539,  363,  602,  360,  536,  566,  530,  358,  539,  567,
      528,  539,  531,  568,  569,  570,  352,  567,  539,  535,
      567,  568,  569,  570,  568,  569,  570,  567,  351,  571,

      572,  568,  569,  570,  573,  350,  536,  571,  572,  347,
      571,  572,  573,  574,  345,  573,  341,  571,  572,  539,
      340,  574,  573,  570,  574,  576,  577,  338,  336,  334,
      578,  574,  331,  576,  577,  569,  576,  577,  578,  579,
      330,  578,  325,  576,  577,  586,  323,  579,  578,  571,
      579,  322,  319,  586,  318,  316,  586,  579,  587,  588,
      589,  315,  574,  586,  590,  313,  587,  588,  589,  587,
      588,  589,  590,  310,  286,  590,  587,  588,  589,  285,
      591,  592,  590,  282,  586,  594,  595,  277,  591,  592,
      579,  591,  592,  594,  595,  273,  594,  595,  591,  592,

      596,  604,  605,  594,  595,  272,  270,  266,  596,  604,
      605,  596,  604,  605,  256,  606,  249,  607,  596,  604,
      605,  241,  240,  606,  594,  607,  606,  236,  607,  610,
      231,  618,  592,  606,  223,  607,  222,  610,  212,  618,
      610,  605,  618,  210,  204,  202,  200,  610,  194,  618,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      651,  192,  191,  184,  183,  182,  178,  173,  137,  651,
      651,  132,  651,  652,  652,  131,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  653,  653,  130,
      653,  654,  124,  122,  118,  115,  654,  114,  654,  654,

      654,  654,  110,  654,  655,  104,  102,  101,   95,   94,
       89,   88,   87,  655,  655,   65,  655,  656,   62,   60,
       59,   58,  656,   53,  656,  656,  656,  656,    0,  656,
      657,  657,    0,    0,    0,  657,  657,    0,  657,  657,
        0,    0,  657,  657,  658,  658,    0,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  659,    0,
      659,  659,    0,  659,  660,    0,    0,    0,  660,  660,
      660,  660,  660,  660,  660,  660,    0,  660,  661,  661,
        0,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  662,  662,    0,  662,    0,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  663,    0,  663,  663,
        0,  663,  664,  664,    0,  664,    0,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  665,    0,  665,  665,
        0,  665,  666,    0,    0,    0,    0,  666,  666,    0,
      666,  666,  666,  666,  666,  666,  667,    0,    0,  667,
        0,    0,    0,    0,    0,  667,  667,    0,  667,  668,
      668,    0,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  669,  669,    0,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  670,    0,  670,
      670,    0,  670,  671,  671,    0,  671,  671,    0,  671,

      672,  672,    0,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  673,    0,    0,    0,    0,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  674,    0,
        0,    0,    0,    0,  674,  674,    0,  674,  675,  675,
        0,  675,    0,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  676,  676,    0,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  677,    0,  677,  677,
        0,  677,  678,    0,  678,  678,    0,  678,  679,  679,
        0,    0,  679,  679,  679,  679,  679,  679,  679,  679,
        0,  679,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  681,  681,    0,    0,
      681,  681,  681,  681,  681,  681,  681,  681,    0,  681,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  683,  683,    0,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  684,    0,
        0,    0,    0,    0,  684,  684,    0,  684,  684,    0,
      684,  685,    0,    0,    0,    0,  685,    0,  685,    0,
      685,  685,    0,  685,  686,    0,    0,    0,    0,    0,
      686,  686,    0,  686,  686,    0,  686,  687,    0,    0,
        0,    0,    0,    0,    0,    0,  687,  687,    0,  687,

      688,    0,    0,    0,    0,  688,    0,  688,  688,  688,
      688,    0,  688,  689,  689,    0,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  690,  690,    0,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  691,  691,  691,  691,    0,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  692,    0,  692,  692,    0,
      692,  692,    0,  692,  693,    0,    0,    0,    0,    0,
        0,    0,    0,  693,  693,    0,  693,  694,    0,    0,
        0,    0,  694,    0,  694,  694,  694,  694,    0,  694,
      695,  695,  695,  695,  695,  695,  695,  695,  695,    0,

      695,  695,  695,  695,  696,    0,    0,    0,    0,    0,
        0,    0,    0,  696,  696,    0,  696,  697,    0,    0,
        0,    0,  697,    0,  697,  697,  697,  697,    0,  697,
      698,    0,    0,    0,    0,  698,    0,  698,  698,  698,
      698,    0,  698,  699,  699,  699,  699,  699,  699,  699,
      699,  699,    0,  699,  699,  699,  699,  700,  700,    0,
        0,    0,  700,  700,    0,  700,  700,    0,    0,  700,
      700,  701,  701,    0,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  702,  702,  702,  702,    0,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  703,

        0,  703,  703,    0,  703,  704,    0,    0,    0,  704,
      704,  704,  704,  704,  704,  704,  704,    0,  704,  705,
      705,    0,  705,    0,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  706,    0,  706,  706,    0,  706,  707,
      707,    0,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  708,    0,  708,  708,    0,  708,  709,
        0,    0,    0,    0,  709,  709,    0,  709,  709,  709,
      709,  709,  709,  710,    0,    0,  710,    0,    0,    0,
        0,    0,  710,  710,    0,  710,  711,  711,    0,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  713,  713,    0,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  714,    0,
      714,  714,    0,  714,  715,  715,    0,  715,  716,  716,
        0,  716,  716,    0,  716,  717,  717,    0,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  718,
        0,    0,    0,    0,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  719,    0,    0,    0,    0,    0,    0,
      719,    0,  719,  719,    0,  719,  720,  720,    0,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,

      721,  721,    0,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  723,    0,  723,  723,    0,  723,
      724,    0,  724,  724,    0,  724,  725,  725,    0,    0,
      725,  725,  725,  725,  725,  725,  725,  725,    0,  725,
      726,  726,    0,    0,  726,  726,  726,  726,  726,  726,
      726,  726,    0,  726,  727,    0,    0,    0,    0,    0,
        0,    0,    0,  727,  727,    0,  727,  728,    0,    0,
        0,    0,    0,  728,  728,    0,  728,  728,    0,  728,
      729,    0,    0,    0,    0,  729,    0,  729,    0,  729,
      729,    0,  729,  730,    0,    0,    0,    0,    0,    0,

        0,    0,  730,  730,    0,  730,  731,    0,    0,    0,
        0,    0,  731,  731,    0,  731,  731,    0,  731,  732,
        0,    0,    0,    0,  732,    0,  732,  732,  732,  732,
        0,  732,  733,  733,    0,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  734,  734,    0,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  736,  736,    0,  736,  737,    0,
      737,  737,    0,  737,  737,    0,  737,  738,    0,    0,
        0,    0,    0,    0,    0,    0,  738,  738,    0,  738,

      739,    0,    0,    0,    0,  739,    0,  739,  739,  739,
      739,    0,  739,  740,    0,    0,    0,    0,  740,    0,
      740,  740,  740,  740,    0,  740,  741,    0,    0,    0,
        0,  741,    0,  741,  741,  741,  741,    0,  741,  742,
        0,    0,    0,    0,  742,    0,  742,  742,  742,  742,
        0,  742,  743,  743,    0,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  744,  744,    0,  744,
      744,    0,  744,  745,  745,    0,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  746,  746,    0,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  747,  747,    0,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  748,  748,    0,  748,  748,
        0,  748,  749,  749,  749,  749,    0,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  750,    0,    0,    0,
        0,    0,  750,  750,    0,  750,  750,    0,  750,  751,
        0,    0,    0,    0,    0,  751,  751,    0,  751,  751,
        0,  751,  752,    0,  752,  752,    0,  752,  752,    0,
      752,  753,  753,    0,  753,  754,    0,    0,    0,    0,
        0,    0,  754,  754,  754,  754,    0,  754,  755,  755,
        0,  755,  756,    0,    0,    0,    0,    0,    0,  756,

      756,  756,  756,    0,  756,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2021 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */

#line 35 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"

/*
 *      includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "arguments.h"
#include "markdown.h"
#include "fileinfo.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0

#define unput_string(yytext,yyleng) do { for (int i=(int)yyleng-1;i>=0;i--) unput(yytext[i]); } while(0)

/* ----------------------------------------------------------------- */

struct pyscannerYY_state
{
  CommentScanner          commentScanner;
  OutlineParserInterface *thisParser = 0;
  const char *            inputString = 0;
  yy_size_t               inputPosition = 0;
  Protection              protection = Public;
  std::shared_ptr<Entry>  current_root;
  std::shared_ptr<Entry>  current;
  std::shared_ptr<Entry>  previous;
  std::shared_ptr<Entry>  bodyEntry;
  int                     yyLineNr = 1 ;
  QCString                fileName;
  MethodTypes             mtype = Method;
  bool                    stat = FALSE;
  Specifier               virt = Normal;
  int                     docBlockContext = 0;
  QCString                docBlock;
  bool                    docBlockInBody = FALSE;
  bool                    docBlockJavaStyle = FALSE;
  bool                    docBrief = FALSE;
  bool                    docBlockSpecial = FALSE;
  bool                    doubleQuote = FALSE;
  bool                    specialBlock = FALSE;
  int                     stringContext = 0;
  TextStream *            copyString = 0;
  int                     indent = 0;
  int                     curIndent = 0;
  int                     commentIndent = 0;
  bool                    importTuple = FALSE;
  StringUnorderedMap      packageNameCache;
  char                    atomStart = 0;
  char                    atomEnd = 0;
  int                     atomCount = 0;
  QCString                moduleScope;
  QCString                packageName;
  TextStream              defVal;
  int                     braceCount = 0;
  bool                    lexInit = FALSE;
  bool                    packageCommentAllowed = FALSE;
  bool                    start_init = FALSE;
  int                     search_count = 0;
  QCString                argType;
  bool                    funcParamsEnd = FALSE;
  std::vector<QCString>   decorators;
  QCString                programStr;
};

//-----------------------------------------------------------------------------
#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

static inline int computeIndent(const char *s);

static void initParser(yyscan_t yyscanner);
static void initEntry(yyscan_t yyscanner);
static void newEntry(yyscan_t yyscanner);
static void newVariable(yyscan_t yyscanner);
static void newFunction(yyscan_t yyscanner);
static QCString findPackageScopeFromPath(yyscan_t yyscanner,const QCString &path);
static void addFrom(yyscan_t yyscanner,bool all);
static void lineCount(yyscan_t yyscanner);
static void incLineNr(yyscan_t yyscanner);
static void startCommentBlock(yyscan_t yyscanner,bool brief);
static void handleCommentBlock(yyscan_t yyscanner,const QCString &doc,bool brief);
static void endOfDef(yyscan_t yyscanner,int correction=0);
static inline void addToString(yyscan_t yyscanner,const char *s);
static void initTriDoubleQuoteBlock(yyscan_t yyscanner);
static void initTriSingleQuoteBlock(yyscan_t yyscanner);
static void initSpecialBlock(yyscan_t yyscanner);
static void searchFoundDef(yyscan_t yyscanner);
static void searchFoundClass(yyscan_t yyscanner);
static QCString findPackageScope(yyscan_t yyscanner,const QCString &fileName);

static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size);

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 1929 "D:/DEV/DOXYGEN/generated_src/pyscanner.cpp"
#line 159 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
       /* start command character */
  /* Main start state */


  /* Mid-comment states */
  /* %x FuncDoubleComment */
  /* %x ClassDoubleComment */


  /* Function states */






  /* Class states */




  /* Variable states */



  /* String states */





  /* import */



#line 1966 "D:/DEV/DOXYGEN/generated_src/pyscanner.cpp"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TripleComment 3
#define SpecialComment 4
#define FunctionDec 5
#define FunctionParams 6
#define FunctionBody 7
#define FunctionAnnotation 8
#define FunctionTypeAnnotation 9
#define FunctionParamDefVal 10
#define ClassDec 11
#define ClassInheritance 12
#define ClassCaptureIndent 13
#define ClassBody 14
#define VariableDec 15
#define VariableEnd 16
#define VariableAtom 17
#define SingleQuoteString 18
#define DoubleQuoteString 19
#define TripleString 20
#define SingleQuoteStringIgnore 21
#define DoubleQuoteStringIgnore 22
#define FromMod 23
#define FromModItem 24
#define Import 25

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct pyscannerYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 255 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 2274 "D:/DEV/DOXYGEN/generated_src/pyscanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 636 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 635 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 261 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a function/method definition with indent
                          DBG_CTX((stderr,"Found def at %d\n",yyextra->yyLineNr));
                          yyextra->indent=computeIndent(yytext);
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 267 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of an async function/method definition with indent
                          DBG_CTX((stderr,"Found async def at %d\n",yyextra->yyLineNr));
                          yyextra->indent=computeIndent(yytext);
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 273 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a function/method definition
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 277 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a function/method definition
                          searchFoundDef(yyscanner);
                          BEGIN( FunctionDec );
                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 282 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a class definition with indent
                          DBG_CTX((stderr,"Found class at %d\n",yyextra->yyLineNr));
                          yyextra->indent=computeIndent(yytext);
                          searchFoundClass(yyscanner);
                          BEGIN( ClassDec ) ;
                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 288 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{  // start of a class definition
                          searchFoundClass(yyscanner);
                          BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 7:
#line 293 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 8:
YY_RULE_SETUP
#line 293 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of an from import
                          yyextra->packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 9:
#line 299 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 10:
YY_RULE_SETUP
#line 299 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of an import statement
                          yyextra->packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 303 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // property
                        yyextra->current->section   = Entry::VARIABLE_SEC;
                        yyextra->current->mtype     = Property;
                        yyextra->current->name      = QCString(yytext).stripWhiteSpace();
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN(VariableDec);
                      }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 313 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // variable
                        if (yyextra->search_count) REJECT;
                        yyextra->indent=computeIndent(yytext);
                        yyextra->current->section   = Entry::VARIABLE_SEC;
                        yyextra->current->name      = QCString(yytext).stripWhiteSpace();
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN(VariableDec);
                      }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 324 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // list of variables, we cannot place the default value
                                                               // so we will skip it later on in a general rule
                                                               // Also note ")" this is to catch also (a,b). the "("
                                                               // is caught in the rule: [(], the ")" will be handled in [)]
                        if (yyextra->search_count > 1) REJECT;
                        yyextra->indent=computeIndent(yytext);
                        yyextra->current->section   = Entry::VARIABLE_SEC;
                        yyextra->current->name      = QCString(yytext).stripWhiteSpace();
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->packageCommentAllowed = FALSE;
                        newVariable(yyscanner);
                      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 338 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 344 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        yyextra->packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 350 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->stat=TRUE;
                      }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 353 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // decorator
                        lineCount(yyscanner);
                      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 356 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // Unix type script comment
                        if (yyextra->yyLineNr != 1) REJECT;
                      }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 359 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // normal comment
                        yyextra->packageCommentAllowed = FALSE;
                      }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 362 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // some other identifier
                        yyextra->packageCommentAllowed = FALSE;
                      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 365 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->curIndent=computeIndent(yytext);
                      }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 369 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // new line
                        lineCount(yyscanner);
                      }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 373 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 378 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 383 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{  // start of a special comment
                        yyextra->curIndent=computeIndent(yytext);
                        yyextra->packageCommentAllowed = FALSE;
                        initSpecialBlock(yyscanner);
                        BEGIN(SpecialComment);
                      }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 389 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // we have to do something with (
                        yyextra->search_count += 1;
                      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 392 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // we have to do something with )
                        yyextra->search_count -= 1;
                      }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 395 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK


case 29:
YY_RULE_SETUP
#line 403 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // python3 style imports
                      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 405 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // from package import
                        yyextra->packageName=yytext;
                      }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 408 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        BEGIN(FromModItem);
                      }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 411 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        incLineNr(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 415 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                      }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 417 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        unput(*yytext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 424 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // import all
                  addFrom(yyscanner,TRUE);
                  BEGIN(Search);
                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 428 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 431 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 434 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                  if (!yyextra->importTuple)
                  {
                    BEGIN(Search);
                  }
                }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 441 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  incLineNr(yyscanner);
                  if (!yyextra->importTuple)
                  {
                    BEGIN(Search);
                  }
                }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 448 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 450 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  yyextra->importTuple=TRUE;
                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 453 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  yyextra->importTuple=FALSE;
                  BEGIN(Search);
                }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 457 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 459 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // line continuation
                  incLineNr(yyscanner);
                }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 462 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  unput(*yytext);
                  BEGIN(Search);
                }
	YY_BREAK


case 46:
YY_RULE_SETUP
#line 469 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->current->name=removeRedundantWhiteSpace(substitute(yytext,".","::"));
                        yyextra->current->fileName = yyextra->fileName;
                        //printf("Adding using declaration: found:%s:%d name=%s\n",qPrint(yyextra->fileName),yyextra->yyLineNr,qPrint(yyextra->current->name));
                        yyextra->current->section=Entry::USINGDECL_SEC;
                        yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
                        initEntry(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 478 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  incLineNr(yyscanner);
                  BEGIN(Search);
                }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 482 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 484 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                  unput(*yytext);
                  BEGIN(Search);
                }
	YY_BREAK


case 50:
YY_RULE_SETUP
#line 491 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n",&yytext[5],qPrint(yyextra->current_root->name.data(),yyextra->yyLineNr)));
                        yyextra->current->name=&yytext[5];
                        yyextra->current->section=Entry::VARIABLE_SEC;
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->current->type.resize(0);
                        if (yyextra->current->name.at(0)=='_') // mark as private
                        {
                          yyextra->current->protection=Private;
                        }
                        newEntry(yyscanner);
                      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 505 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        DBG_CTX((stderr,"Found class method variable %s in %s at %d\n",&yytext[4],qPrint(yyextra->current_root->name),yyextra->yyLineNr));
                        yyextra->current->name=&yytext[4];
                        yyextra->current->section=Entry::VARIABLE_SEC;
                        yyextra->current->fileName  = yyextra->fileName;
                        yyextra->current->startLine = yyextra->yyLineNr;
                        yyextra->current->bodyLine  = yyextra->yyLineNr;
                        yyextra->current->type.resize(0);
                        if (yyextra->current->name.at(0)=='_') // mark as private
                        {
                          yyextra->current->protection=Private;
                        }
                        newEntry(yyscanner);
                      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 519 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 524 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 529 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{  // start of a special comment
                        initSpecialBlock(yyscanner);
                        BEGIN(SpecialComment);
                      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 533 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // #
                      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 535 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 540 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->stringContext=YY_START;
                        yyextra->copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 545 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ incLineNr(yyscanner); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 546 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
// identifiers
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 547 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
// other uninteresting stuff
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 548 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
// anything else
	YY_BREAK


case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 552 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        DBG_CTX((stderr,"indent %d<=%d\n",computeIndent(&yytext[1]),yyextra->indent));
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          unput_string(yytext,yyleng);
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 63:
/* rule 63 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 2);
yyg->yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 567 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          unput_string(yytext,yyleng);
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 581 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        endOfDef(yyscanner);
                        yyterminate();
                      }
	YY_BREAK
case 64:
/* rule 64 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 585 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // skip empty line
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 588 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // something at indent >0
                        yyextra->current->program << yytext;
                        yyextra->curIndent = computeIndent(yytext);
                        if (yyextra->curIndent<=yyextra->indent)
                          // jumped out of the function
                        {
                          endOfDef(yyscanner,1);
                          BEGIN(Search);
                        }
                      }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 598 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->current->program << yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 605 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->current->program << yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 612 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // non-special stuff
                        yyextra->current->program << yytext;
                        yyextra->specialBlock = FALSE;
                      }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 616 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // normal comment
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 619 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // comment half way
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 622 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        incLineNr(yyscanner);
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 626 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // any character
                        yyextra->current->program << *yytext;
                        yyextra->specialBlock = FALSE;
                      }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 631 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        yyextra->current->program << yytext;
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 637 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        yyextra->current->program << yytext;
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 75:
/* rule 75 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 643 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{  // start of a special comment
                        initSpecialBlock(yyscanner);
                        BEGIN(SpecialComment);
                      }
	YY_BREAK


case 76:
YY_RULE_SETUP
#line 651 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                              //found function name
                              if (yyextra->current->type.isEmpty())
                              {
                                  yyextra->current->type = "def";
                              }
                              yyextra->current->name = yytext;
                              yyextra->current->name = yyextra->current->name.stripWhiteSpace();
                              newFunction(yyscanner);
                            }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 661 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // function without arguments
                              yyextra->specialBlock = TRUE; // expecting a docstring
                              yyextra->bodyEntry = yyextra->current;
                              yyextra->current->bodyLine  = yyextra->yyLineNr;
                              BEGIN(FunctionBody);
                            }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 668 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                              yyextra->defVal.str(std::string());
                              yyextra->braceCount = 0;
                              BEGIN(FunctionTypeAnnotation);
                            }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 673 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                              yyextra->funcParamsEnd = FALSE;
                              yyextra->current->bodyLine  = yyextra->yyLineNr;
                              BEGIN(FunctionParams);
                            }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 678 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // end of parameter list
                              if (yyextra->current->argList.empty())
                              {
                                yyextra->current->argList.setNoParameters(TRUE);
                              }
                              yyextra->current->args = argListToString(yyextra->current->argList);
                              yyextra->funcParamsEnd = TRUE;
                            }
	YY_BREAK


case 81:
YY_RULE_SETUP
#line 689 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 692 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->argType = yytext;
                        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 695 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // Name of parameter
                          lineCount(yyscanner);
                          Argument a;
                          a.name = QCString(yytext).stripWhiteSpace();
                          a.type = yyextra->argType;
                          yyextra->current->argList.push_back(a);
                          yyextra->argType = "";
                        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 703 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
                          yyextra->defVal.str(std::string());
                          yyextra->braceCount = 0;
                          BEGIN(FunctionParamDefVal);
                        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 710 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          unput(*yytext);
                          BEGIN(FunctionDec);
                        }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 714 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal.str(std::string());
                          yyextra->braceCount = 0;
                          BEGIN(FunctionAnnotation);
                        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 719 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // a comment
                        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 721 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 89:
#line 728 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 90:
#line 729 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 91:
YY_RULE_SETUP
#line 729 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          ++yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 92:
#line 734 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 93:
#line 735 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 94:
YY_RULE_SETUP
#line 735 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          --yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 739 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          if (yyextra->braceCount == 0)
                          {
                            yyextra->current->type = yyextra->defVal.str();
                            unput(*yytext);
                            BEGIN(FunctionDec);
                          }
                          else
                            yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 749 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionTypeAnnotation;
                          BEGIN(SingleQuoteString);
                        }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 755 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionTypeAnnotation;
                          BEGIN(DoubleQuoteString);
                        }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 761 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          incLineNr(yyscanner);
                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 765 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK


case 100:
#line 772 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 101:
#line 773 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 102:
YY_RULE_SETUP
#line 773 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          ++yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 103:
#line 778 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 104:
YY_RULE_SETUP
#line 778 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          --yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 105:
#line 783 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 106:
#line 784 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 107:
YY_RULE_SETUP
#line 784 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          if (yyextra->braceCount == 0)
                          {
                            if (!yyextra->current->argList.empty())
                              yyextra->current->argList.back().type += yyextra->defVal.str();
                            if (*yytext != ',')
                              unput(*yytext);
                            BEGIN(FunctionParams);
                          }
                          else
                          {
                            if (*yytext == ')')
                              --yyextra->braceCount;
                            yyextra->defVal << *yytext;
                          }
                        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 800 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionAnnotation;
                          BEGIN(SingleQuoteString);
                        }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 806 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionAnnotation;
                          BEGIN(DoubleQuoteString);
                        }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 812 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          incLineNr(yyscanner);
                        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 816 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK


case 112:
#line 823 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 113:
#line 824 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 114:
YY_RULE_SETUP
#line 824 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // internal opening brace, assumption is that we have correct code so braces do match
                          ++yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 115:
#line 829 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 116:
YY_RULE_SETUP
#line 829 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          --yyextra->braceCount;
                          yyextra->defVal << *yytext;
                        }
	YY_BREAK
case 117:
#line 834 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 118:
YY_RULE_SETUP
#line 834 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          if (yyextra->braceCount == 0)
                          {
                            if (!yyextra->current->argList.empty())
                              yyextra->current->argList.back().defval=QCString(yyextra->defVal.str()).stripWhiteSpace();
                            if (*yytext == ')')
                              unput(*yytext);
                            BEGIN(FunctionParams);
                          }
                          else
                          {
                            if (*yytext == ')')
                              --yyextra->braceCount;
                            yyextra->defVal << *yytext;
                          }
                        }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 851 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionParamDefVal;
                          BEGIN( SingleQuoteString );
                        }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 857 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->defVal << *yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionParamDefVal;
                          BEGIN( DoubleQuoteString );
                        }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 863 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                            yyextra->defVal << *yytext;
                            incLineNr(yyscanner);
                        }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 867 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                            yyextra->defVal << *yytext;
                        }
	YY_BREAK


case 123:
/* rule 123 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 874 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // new def at indent 0
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          int i;
                          for (i=(int)yyleng-1;i>=0;i--)
                          {
                            unput(yytext[i]);
                          }
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 892 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{  // start of a special comment at indent 0
                        if (computeIndent(&yytext[1])<=yyextra->indent)
                        {
                          int i;
                          for (i=(int)yyleng-1;i>=0;i--)
                          {
                            unput(yytext[i]);
                          }
                          endOfDef(yyscanner);
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
                        }
                        else
                        {
                          incLineNr(yyscanner);
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 125:
/* rule 125 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 910 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // skip empty line
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 913 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        endOfDef(yyscanner);
                        yyterminate();
                      }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 917 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // something at indent >0
                        yyextra->curIndent=computeIndent(yytext);
                        DBG_CTX((stderr,"yyextra->curIndent=%d yyextra->indent=%d\n",yyextra->curIndent,yyextra->indent));
                        if (yyextra->curIndent<=yyextra->indent)
                          // jumped out of the class/method
                        {
                          endOfDef(yyscanner,1);
                          yyextra->indent=yyextra->curIndent;
                          // make sure the next rule matches ^...
                          //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          //yyextra->hideClassDocs = FALSE;
                          BEGIN(Search);
                        }
                        else
                        {
                          yyextra->current->program << yytext;
                        }
                      }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 935 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a single quoted string
                        yyextra->current->program << *yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 942 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a double quoted string
                        yyextra->current->program << *yytext;
                        yyextra->stringContext=YY_START;
                        yyextra->specialBlock = FALSE;
                        yyextra->copyString=&yyextra->current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 949 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // non-special stuff
                        yyextra->current->program << yytext;
                        yyextra->specialBlock = FALSE;
                        //yyextra->hideClassDocs = FALSE;
                      }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 954 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->current->program << *yytext;
                        incLineNr(yyscanner);
                      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 958 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // normal comment
                        yyextra->current->program << yytext;
                      }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 961 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // any character
                        yyextra->specialBlock = FALSE;
                        yyextra->current->program << *yytext;
                      }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 965 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        //if (!yyextra->hideClassDocs)
                        yyextra->current->program << yytext;
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 972 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        //if (!yyextra->hideClassDocs)
                        yyextra->current->program << yytext;
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK

case 135:
YY_RULE_SETUP
#line 980 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          if (yyextra->current->type.isEmpty())
                          {
                              yyextra->current->type = "class";
                          }

                          yyextra->current->section = Entry::CLASS_SEC;
                          yyextra->current->name = yytext;

                          // prepend scope in case of nested classes
                          if (yyextra->current_root->section&Entry::SCOPE_MASK)
                          {
                            //printf("*** Prepending scope %s to class %s\n",qPrint(yyextra->current_root->name),qPrint(yyextra->current->name));
                            yyextra->current->name.prepend(yyextra->current_root->name+"::");
                          }

                          yyextra->current->name = yyextra->current->name.stripWhiteSpace();
                          yyextra->current->fileName = yyextra->fileName;
                          yyextra->docBlockContext   = YY_START;
                          yyextra->docBlockInBody    = FALSE;
                          yyextra->docBlockJavaStyle = FALSE;
                          yyextra->docBlock.resize(0);

                          BEGIN(ClassInheritance);
                        }
	YY_BREAK

case 136:
YY_RULE_SETUP
#line 1007 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1010 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // begin of the class definition
                         yyextra->specialBlock = TRUE; // expecting a docstring
                         yyextra->current->bodyLine  = yyextra->yyLineNr;
                         yyextra->current->program.str(std::string());
                         BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1017 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                         yyextra->current->extends.push_back(
                                              BaseInfo(substitute(yytext,".","::"),Public,Normal)
                                            );
                         //Has base class-do stuff
                       }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1023 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a single quoted string
                         yyextra->stringContext=YY_START;
                         BEGIN( SingleQuoteStringIgnore );
                       }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1027 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a double quoted string
                         yyextra->stringContext=YY_START;
                         BEGIN( DoubleQuoteStringIgnore );
                       }
	YY_BREAK


case 141:
YY_RULE_SETUP
#line 1034 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // end of a single quoted string
                         BEGIN(yyextra->stringContext);
                       }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1037 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ }
	YY_BREAK


case 143:
YY_RULE_SETUP
#line 1040 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // end of a double quoted string
                         BEGIN(yyextra->stringContext);
                       }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1043 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ }
	YY_BREAK


case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1047 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
                                 lineCount(yyscanner);
                                 yyextra->current->program << yytext;
                               }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1053 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                                 initTriDoubleQuoteBlock(yyscanner);
                                 yyextra->current->program << yytext;
                                 BEGIN(TripleComment);
                               }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1058 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                                 initTriSingleQuoteBlock(yyscanner);
                                 yyextra->current->program << yytext;
                                 BEGIN(TripleComment);
                               }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1063 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{  // start of a special comment
                                 initSpecialBlock(yyscanner);
                                 BEGIN(SpecialComment);
                               }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1067 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // ignore comment with just one #
                               }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1069 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                                 yyextra->current->program << yytext;
                                 //yyextra->current->startLine = yyextra->yyLineNr;
                                 yyextra->curIndent=computeIndent(yytext);
                                 yyextra->bodyEntry = yyextra->current;
                                 DBG_CTX((stderr,"setting indent %d\n",yyextra->curIndent));
                                 //printf("yyextra->current->program=[%s]\n",qPrint(yyextra->current->program));
                                 //yyextra->hideClassDocs = TRUE;
                                 BEGIN(ClassBody);
                               }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1080 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                                 // Just pushback an empty class, and
                                 // resume parsing the body.
                                 newEntry(yyscanner);
                                 yyextra->current->program << yytext;

                                 // printf("Failed to find indent - skipping!");
                                 BEGIN( Search );
                               }
	YY_BREAK


case 152:
YY_RULE_SETUP
#line 1093 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyextra->yyLineNr);
                        yyextra->start_init = TRUE;
                        yyextra->current->initializer.str(yytext);
                        yyextra->current->initializer << " ";
                      }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1099 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // spaces
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1102 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // integer value
                        if (yyextra->current-> type.isEmpty()) yyextra->current->type = "int";
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1106 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // floating point value
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "float";
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1110 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // boolean value
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "bool";
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1114 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // string
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
                        yyextra->current->initializer << yytext;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1121 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // string
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
                        yyextra->current->initializer << yytext;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1128 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
                        yyextra->current->initializer << yytext;
                        yyextra->doubleQuote=TRUE;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN(TripleString);
                      }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1137 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
                        yyextra->current->initializer << yytext;
                        yyextra->doubleQuote=FALSE;
                        yyextra->copyString=&yyextra->current->initializer;
                        yyextra->stringContext=VariableDec;
                        BEGIN(TripleString);
                      }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1145 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // tuple, only when direct after =
                        if (yyextra->current->mtype!=Property && yyextra->start_init)
                        {
                          yyextra->current->type = "tuple";
                        }
                        yyextra->current->initializer << *yytext;
                        yyextra->atomStart='(';
                        yyextra->atomEnd=')';
                        yyextra->atomCount=1;
                        BEGIN( VariableAtom );
                      }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1156 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // list
                        if (yyextra->start_init) yyextra->current->type = "list";
                        yyextra->current->initializer << *yytext;
                        yyextra->atomStart='[';
                        yyextra->atomEnd=']';
                        yyextra->atomCount=1;
                        BEGIN( VariableAtom );
                      }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1164 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // dictionary
                        if (yyextra->start_init) yyextra->current->type = "dictionary";
                        yyextra->current->initializer << *yytext;
                        yyextra->atomStart='{';
                        yyextra->atomEnd='}';
                        yyextra->atomCount=1;
                        BEGIN( VariableAtom );
                      }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1172 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // comment
                        BEGIN( VariableEnd );
                      }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1175 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        // do something based on the type of the IDENTIFIER
                        if (yyextra->current->type.isEmpty())
                        {
                          for (const auto &child : yyextra->current_root->children())
                          {
                            if (child->name == QCString(yytext))
                            {
                               yyextra->current->type = child->type;
                               break;
                            }
                          }
                        }
                        yyextra->start_init = FALSE;
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1191 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->start_init = FALSE;
                        yyextra->current->initializer << *yytext;
                      }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 1195 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        unput('\n');
                        BEGIN( VariableEnd );
                      }
	YY_BREAK


case 168:
YY_RULE_SETUP
#line 1202 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                        if (yyextra->atomStart==*yytext)
                        {
                          yyextra->atomCount++;
                        }
                      }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1209 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                        if (yyextra->atomEnd==*yytext)
                        {
                          yyextra->atomCount--;
                        }
                        if (yyextra->atomCount==0)
                        {
                          yyextra->start_init = FALSE;
                          BEGIN(VariableDec);
                        }
                      }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1221 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        yyextra->specialBlock = FALSE;
                        yyextra->current->program << yytext;
                        initTriDoubleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1228 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // start of a comment block
                        yyextra->specialBlock = FALSE;
                        yyextra->current->program << yytext;
                        initTriSingleQuoteBlock(yyscanner);
                        BEGIN(TripleComment);
                      }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1234 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->stringContext=YY_START;
                        yyextra->current->initializer << "'";
                        yyextra->copyString=&yyextra->current->initializer;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1240 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->stringContext=YY_START;
                        yyextra->current->initializer << "\"";
                        yyextra->copyString=&yyextra->current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1246 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->current->initializer << yytext;
                      }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1249 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                      }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1252 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        yyextra->current->initializer << *yytext;
                        incLineNr(yyscanner);
                      }
	YY_BREAK


case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 1260 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        incLineNr(yyscanner);
                        newVariable(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1265 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                        unput(*yytext);
                        newVariable(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1270 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ yyterminate();
                      }
	YY_BREAK


case 179:
#line 1276 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 180:
YY_RULE_SETUP
#line 1276 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          // printf("Expected module block %d special=%d\n",yyextra->expectModuleDocs,yyextra->specialBlock);
                          if (yyextra->doubleQuote==(yytext[0]=='"'))
                          {
                            if (yyextra->specialBlock) // expecting a docstring
                            {
                              QCString actualDoc=yyextra->docBlock;
                              if (!yyextra->docBlockSpecial) // legacy unformatted docstring
                              {
                                if (!actualDoc.isEmpty())
                                {
                                  stripIndentation(actualDoc,yyextra->commentIndent);
                                  actualDoc.prepend("\\verbatim\n");
                                  actualDoc.append("\\endverbatim ");
                                }
                              }
                              //printf("-------> yyextra->current=%p yyextra->bodyEntry=%p\n",yyextra->current,yyextra->bodyEntry);
                              handleCommentBlock(yyscanner, actualDoc, FALSE);
                            }
                            else if (yyextra->packageCommentAllowed) // expecting module docs
                            {
                              QCString actualDoc=yyextra->docBlock;
                              if (!yyextra->docBlockSpecial) // legacy unformatted docstring
                              {
                                if (!actualDoc.isEmpty())
                                {
                                  stripIndentation(actualDoc,yyextra->commentIndent);
                                  actualDoc.prepend("\\verbatim\n");
                                  actualDoc.append("\\endverbatim ");
                                }
                              }
                              if (yyextra->moduleScope.startsWith("__") &&  yyextra->moduleScope.endsWith("__"))
                              {
                                actualDoc.prepend("\\namespace \\"+yyextra->moduleScope+" ");
                              }
                              else
                              {
                                actualDoc.prepend("\\namespace "+yyextra->moduleScope+" ");
                              }
                              handleCommentBlock(yyscanner, actualDoc, FALSE);
                            }
                            if ((yyextra->docBlockContext==ClassBody /*&& !yyextra->hideClassDocs*/) ||
                                yyextra->docBlockContext==FunctionBody)
                            {
                              yyextra->current->program << yyextra->docBlock;
                              yyextra->current->program << yytext;
                            }
                            //if (yyextra->hideClassDocs)
                            //{
                            //  yyextra->current->startLine = yyextra->yyLineNr;
                            //}
                            //yyextra->hideClassDocs=FALSE;
                            BEGIN(yyextra->docBlockContext);
                          }
                          else
                          {
                            yyextra->docBlock += yytext;
                          }
                          yyextra->packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1338 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // leading whitespace
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1341 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 1344 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          incLineNr(yyscanner);
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1348 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // escaped char
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1351 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          yyextra->docBlock += yytext;
                        }
	YY_BREAK


case 186:
YY_RULE_SETUP
#line 1357 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // skip leading hashes
                        }
	YY_BREAK
case 187:
/* rule 187 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1359 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // continuation of the comment on the next line
                          yyextra->docBlock+='\n';
                          yyextra->docBrief = FALSE;
                          incLineNr(yyscanner);
                        }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1364 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // any other stuff
                          yyextra->docBlock+=yytext;
                        }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 1367 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // new line that ends the comment
                          handleCommentBlock(yyscanner, yyextra->docBlock, yyextra->docBrief);
                          incLineNr(yyscanner);
                          BEGIN(yyextra->docBlockContext);
                        }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1372 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // anything we missed
                          yyextra->docBlock+=*yytext;
                        }
	YY_BREAK


case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 1378 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // line continuation
                                 addToString(yyscanner,yytext);
                                 incLineNr(yyscanner);
                               }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1382 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // escaped char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1385 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // triple double quotes
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1388 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // end of the string
                                 addToString(yyscanner,yytext);
                                 BEGIN(yyextra->stringContext);
                               }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1392 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // normal chars
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1395 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // normal char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK


case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 1401 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // line continuation
                                 addToString(yyscanner,yytext);
                                 incLineNr(yyscanner);
                               }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1405 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // escaped char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1408 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // triple single quotes
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1411 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // end of the string
                                 addToString(yyscanner,yytext);
                                 BEGIN(yyextra->stringContext);
                               }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1415 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // normal chars
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1418 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{ // normal char
                                 addToString(yyscanner,yytext);
                               }
	YY_BREAK


case 203:
#line 1425 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
case 204:
YY_RULE_SETUP
#line 1425 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          *yyextra->copyString << yytext;
                          if (yyextra->doubleQuote==(yytext[0]=='"'))
                          {
                            BEGIN(yyextra->stringContext);
                          }
                        }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 1434 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          lineCount(yyscanner);
                          *yyextra->copyString << yytext;
                        }
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 1438 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          incLineNr(yyscanner);
                          *yyextra->copyString << yytext;
                        }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1442 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                          *yyextra->copyString << *yytext;
                        }
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
                                 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
                                 //       yytext, YY_START, yyextra->yyLineNr);

                               }
  */
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 1457 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                                 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
                                 //       YY_START, yyextra->yyLineNr);

                                 lineCount(yyscanner);
                               }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1464 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                                 //fprintf(stderr,"Quote: %d\n",YY_START);
                               }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1468 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
{
                                 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
                                 //       yytext, YY_START, yyextra->yyLineNr);

                               }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1475 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"
ECHO;
	YY_BREAK
#line 4387 "D:/DEV/DOXYGEN/generated_src/pyscanner.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionAnnotation):
			case YY_STATE_EOF(FunctionTypeAnnotation):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(SingleQuoteStringIgnore):
			case YY_STATE_EOF(DoubleQuoteStringIgnore):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 636 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 636 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 635);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1475 "D:/LIB/C_C++/doxygen-master/src/pyscanner.l"


//----------------------------------------------------------------------------

static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yy_size_t c=0;
  const char *p = yyextra->inputString + yyextra->inputPosition;
  while ( c < max_size && *p ) { *buf++ = *p++; c++; }
  yyextra->inputPosition+=c;
  return c;
}

static void initParser(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->protection = Public;
  yyextra->mtype = Method;
  yyextra->stat = FALSE;
  yyextra->virt = Normal;
  yyextra->previous = 0;
  yyextra->packageCommentAllowed = TRUE;
}

static void initEntry(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //yyextra->current->python = TRUE;
  yyextra->current->protection = yyextra->protection ;
  yyextra->current->mtype      = yyextra->mtype;
  yyextra->current->virt       = yyextra->virt;
  yyextra->current->stat       = yyextra->stat;
  yyextra->current->lang       = SrcLangExt_Python;
  yyextra->commentScanner.initGroupInfo(yyextra->current.get());
  yyextra->stat = FALSE;
}

static void newEntry(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->previous = yyextra->current;
  yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  initEntry(yyscanner);
}

static void newVariable(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->name.isEmpty() && yyextra->current->name.at(0)=='_') // mark as private
  {
    yyextra->current->protection=Private;
  }
  if (yyextra->current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    yyextra->current->stat = TRUE;
  }
  newEntry(yyscanner);
}

static void newFunction(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->name.left(2)=="__" && yyextra->current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    yyextra->current->protection=Public;
  }
  else if (yyextra->current->name.at(0)=='_')
  {
    yyextra->current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  int tabSize=Config_getInt(TAB_SIZE);
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(yyscan_t yyscanner,const QCString &path)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  auto it = yyextra->packageNameCache.find(path.str());
  if (it!=yyextra->packageNameCache.end())
  {
    return QCString(it->second);
  }
  FileInfo pf(path.str()+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(yyscanner,path.left(i));
      if (!scope.isEmpty())
      {
        scope+="::";
      }
      scope+=path.mid(i+1);
      yyextra->packageNameCache.insert(std::make_pair(path.str(),scope.str()));
      return scope;
    }
  }
  return "";
}

static QCString findPackageScope(yyscan_t yyscanner,const QCString &fileName)
{
  if (fileName.isEmpty()) return fileName;
  FileInfo fi(fileName.str());
  return findPackageScopeFromPath(yyscanner,fi.dirPath(true).c_str());
}

static void addFrom(yyscan_t yyscanner,bool all)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString item=all ? yyextra->packageName : yyextra->packageName+"."+yytext;
  yyextra->current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
  yyextra->current->fileName = yyextra->fileName;
  //printf("Adding using declaration: found:%s:%d name=%s\n",qPrint(yyextra->fileName),yyextra->yyLineNr,qPrint(yyextra->current->name));
  yyextra->current->section=all ? Entry::USINGDIR_SEC : Entry::USINGDECL_SEC;
  yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  initEntry(yyscanner);
}
//-----------------------------------------------------------------------------

static void lineCount(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  DBG_CTX((stderr,"yyextra->yyLineNr=%d\n",yyextra->yyLineNr));
  for (const char *p = yytext; *p; ++p)
  {
    yyextra->yyLineNr += (*p == '\n') ;
  }
}

static void incLineNr(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  DBG_CTX((stderr,"yyextra->yyLineNr=%d\n",yyextra->yyLineNr));
  yyextra->yyLineNr++;
}

//-----------------------------------------------------------------
static void startCommentBlock(yyscan_t yyscanner,bool brief)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (brief)
  {
    yyextra->current->briefFile = yyextra->fileName;
    yyextra->current->briefLine = yyextra->yyLineNr;
  }
  else
  {
    yyextra->current->docFile = yyextra->fileName;
    yyextra->current->docLine = yyextra->yyLineNr;
  }
}

static void handleCommentBlock(yyscan_t yyscanner,const QCString &doc,bool brief)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("handleCommentBlock(doc=[%s] brief=%d yyextra->docBlockInBody=%d yyextra->docBlockJavaStyle=%d\n",
  //    qPrint(doc),brief,yyextra->docBlockInBody,yyextra->docBlockJavaStyle);

  // TODO: Fix me
  yyextra->docBlockInBody=FALSE;

  if (!yyextra->current->doc.isEmpty())
  {
    yyextra->current->doc=yyextra->current->doc.stripWhiteSpace()+"\n\n";
  }
  if (yyextra->docBlockInBody && yyextra->previous && !yyextra->previous->doc.isEmpty())
  {
    yyextra->previous->doc=yyextra->previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry = false;
  int lineNr = brief ? yyextra->current->briefLine : yyextra->current->docLine;
  Markdown markdown(yyextra->fileName,lineNr);
  QCString processedDoc = Config_getBool(MARKDOWN_SUPPORT) ? markdown.process(doc,lineNr) : doc;
  while (yyextra->commentScanner.parseCommentBlock(
        yyextra->thisParser,
        (yyextra->docBlockInBody && yyextra->previous) ? yyextra->previous.get() : yyextra->current.get(),
        processedDoc, // text
        yyextra->fileName,   // file
        lineNr,
        yyextra->docBlockInBody ? FALSE : brief,
        yyextra->docBlockJavaStyle, // javadoc style // or FALSE,
        yyextra->docBlockInBody,
        yyextra->protection,
        position,
        needsEntry,
        Config_getBool(MARKDOWN_SUPPORT))
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry(yyscanner);
    }
  }
  if (needsEntry)
  {
    newEntry(yyscanner);
  }

}

static void endOfDef(yyscan_t yyscanner,int correction)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("endOfDef at=%d\n",yyextra->yyLineNr);
  if (yyextra->bodyEntry)
  {
    yyextra->bodyEntry->endBodyLine  = yyextra->yyLineNr-correction;
    yyextra->bodyEntry = 0;
  }
  newEntry(yyscanner);
  //yyextra->insideConstructor = FALSE;
}

static inline void addToString(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->copyString) (*yyextra->copyString) << s;
}

static void initTriDoubleQuoteBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBlockSpecial   = yytext[strlen(yytext) - 1]=='!' || !Config_getBool(PYTHON_DOCSTRING);
  yyextra->docBlock.resize(0);
  yyextra->commentIndent = yyextra->curIndent;
  yyextra->doubleQuote = TRUE;
  startCommentBlock(yyscanner,FALSE);
}

static void initTriSingleQuoteBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBlockSpecial   = yytext[strlen(yytext) - 1]=='!' || !Config_getBool(PYTHON_DOCSTRING);
  yyextra->docBlock.resize(0);
  yyextra->commentIndent = yyextra->curIndent;
  yyextra->doubleQuote = FALSE;
  startCommentBlock(yyscanner,FALSE);
}

static void initSpecialBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBrief = TRUE;
  yyextra->docBlock.resize(0);
  yyextra->commentIndent = yyextra->curIndent;
  startCommentBlock(yyscanner,FALSE);
}

static void searchFoundDef(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->fileName  = yyextra->fileName;
  yyextra->current->startLine = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;
  yyextra->current->section = Entry::FUNCTION_SEC;
  yyextra->current->lang = SrcLangExt_Python;
  yyextra->current->virt = Normal;
  yyextra->current->stat = yyextra->stat;
  yyextra->current->mtype = yyextra->mtype = Method;
  yyextra->current->type.resize(0);
  yyextra->current->name.resize(0);
  yyextra->current->args.resize(0);
  yyextra->current->argList.clear();
  yyextra->packageCommentAllowed = FALSE;
  yyextra->stat=FALSE;
  //printf("searchFoundDef at=%d\n",yyextra->yyLineNr);
}

static void searchFoundClass(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->section = Entry::CLASS_SEC;
  yyextra->current->argList.clear();
  yyextra->current->type += "class" ;
  yyextra->current->fileName  = yyextra->fileName;
  yyextra->current->startLine  = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;
  yyextra->packageCommentAllowed = FALSE;
}

//----------------------------------------------------------------------------

static void parseCompounds(yyscan_t yyscanner,std::shared_ptr<Entry> rt)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("parseCompounds(%s)\n",qPrint(rt->name));
  for (size_t i=0; i<rt->children().size(); ++i)
  {
    std::shared_ptr<Entry> ce = rt->children()[i];
    if (!ce->program.empty())
    {
      //fprintf(stderr,"parseCompounds: -- %s (line %d) ---------\n%s\n---------------\n",
      //  qPrint(ce->name), ce->bodyLine, qPrint(ce->program));
      // init scanner state
      yyextra->programStr = ce->program.str();
      yyextra->inputString = yyextra->programStr.data();
      yyextra->inputPosition = 0;
      pyscannerYYrestart( 0, yyscanner );
      if (ce->section&Entry::COMPOUND_MASK)
      {
        yyextra->specialBlock = false;
        yyextra->current_root = ce;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        yyextra->current_root = rt;
        //printf("Searching for member variables in %s parent=%s\n",
        //    qPrint(ce->name),qPrint(ce->parent->name));
        BEGIN( SearchMemVars );
      }
      yyextra->fileName = ce->fileName;
      yyextra->yyLineNr   = ce->bodyLine ;
      yyextra->current = std::make_shared<Entry>();
      initEntry(yyscanner);

      QCString name = ce->name;
      yyextra->commentScanner.enterCompound(yyextra->fileName,yyextra->yyLineNr,name);

      pyscannerYYlex(yyscanner) ;
      yyextra->lexInit=TRUE;

      yyextra->programStr.resize(0);
      ce->program.str(std::string());

      yyextra->commentScanner.leaveCompound(yyextra->fileName,yyextra->yyLineNr,name);

    }
    parseCompounds(yyscanner,ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(yyscan_t yyscanner, const QCString &fileName,const char *fileBuf,const std::shared_ptr<Entry> &rt)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  initParser(yyscanner);

  if (fileBuf==0 || fileBuf[0]=='\0') return;

  yyextra->inputString = fileBuf;
  yyextra->inputPosition = 0;

  yyextra->protection    = Public;
  yyextra->mtype         = Method;
  yyextra->stat         = FALSE;
  yyextra->virt          = Normal;
  yyextra->current_root  = rt;
  yyextra->specialBlock = FALSE;

  yyextra->yyLineNr= 1 ;
  yyextra->fileName = fileName;
  //setContext();
  msg("Parsing file %s...\n",qPrint(yyextra->fileName));

  FileInfo fi(fileName.str());
  yyextra->moduleScope = findPackageScope(yyscanner,fileName);
  QCString baseName=fi.baseName();
  if (baseName!="__init__") // package initializer file is not a package itself
  {
    if (!yyextra->moduleScope.isEmpty())
    {
      yyextra->moduleScope+="::";
    }
    yyextra->moduleScope+=baseName;
  }

  // add namespaces for each scope
  QCString scope = yyextra->moduleScope;
  int startPos = 0;
  int pos;
  do
  {
    pos = scope.find("::",startPos);
    startPos=pos+2;
    if (pos==-1) pos=(int)scope.length();
    yyextra->current            = std::make_shared<Entry>();
    initEntry(yyscanner);
    yyextra->current->name      = scope.left(pos);
    yyextra->current->section   = Entry::NAMESPACE_SEC;
    yyextra->current->type      = "namespace";
    yyextra->current->fileName  = yyextra->fileName;
    yyextra->current->startLine = yyextra->yyLineNr;
    yyextra->current->bodyLine  = yyextra->yyLineNr;
    yyextra->current_root       = yyextra->current;
    rt->moveToSubEntryAndRefresh(yyextra->current);
  } while (pos<(int)scope.length());

  initParser(yyscanner);

  yyextra->commentScanner.enterFile(yyextra->fileName,yyextra->yyLineNr);

  yyextra->current->reset();
  initEntry(yyscanner);
  pyscannerYYrestart(0,yyscanner);
  BEGIN( Search );
  pyscannerYYlex(yyscanner);
  yyextra->lexInit=TRUE;

  yyextra->commentScanner.leaveFile(yyextra->fileName,yyextra->yyLineNr);

  yyextra->programStr.resize(0);
  yyextra->current_root->program.str(std::string());

  parseCompounds(yyscanner, yyextra->current_root);
}

//----------------------------------------------------------------------------

static void parsePrototype(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("**** parsePrototype(%s) begin\n",qPrint(text));
  if (text.isEmpty())
  {
    warn(yyextra->fileName,yyextra->yyLineNr,"Empty prototype found!");
    return;
  }

  yyextra->specialBlock = FALSE;
  yyextra->packageCommentAllowed = FALSE;

  const char *orgInputString;
  yy_size_t orgInputPosition;
  YY_BUFFER_STATE orgState;

  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  yy_switch_to_buffer(yy_create_buffer(0, YY_BUF_SIZE, yyscanner), yyscanner);
  orgInputString = yyextra->inputString;
  orgInputPosition = yyextra->inputPosition;

  // set new string
  yyextra->inputString = text.data();
  yyextra->inputPosition = 0;
  pyscannerYYrestart( 0, yyscanner );

  BEGIN( FunctionDec );

  pyscannerYYlex(yyscanner);
  yyextra->lexInit=TRUE;

  yyextra->current->name = yyextra->current->name.stripWhiteSpace();
  if (yyextra->current->section == Entry::MEMBERDOC_SEC && yyextra->current->args.isEmpty())
    yyextra->current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
  yy_switch_to_buffer(orgState, yyscanner);

  yyextra->inputString = orgInputString;
  yyextra->inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

//----------------------------------------------------------------------------

struct PythonOutlineParser::Private
{
  yyscan_t yyscanner;
  pyscannerYY_state state;
};

PythonOutlineParser::PythonOutlineParser() : p(std::make_unique<PythonOutlineParser::Private>())
{
  pyscannerYYlex_init_extra(&p->state,&p->yyscanner);
#ifdef FLEX_DEBUG
  pyscannerYYset_debug(1,p->yyscanner);
#endif
}

PythonOutlineParser::~PythonOutlineParser()
{
  pyscannerYYlex_destroy(p->yyscanner);
}


void PythonOutlineParser::parseInput(const QCString &fileName,
                                     const char *fileBuf,
                                     const std::shared_ptr<Entry> &root,
                                     ClangTUParser * /*clangParser*/)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->thisParser = this;
  printlex(yy_flex_debug, TRUE, __FILE__, qPrint(fileName));
  ::parseMain(p->yyscanner, fileName,fileBuf,root);
  printlex(yy_flex_debug, FALSE, __FILE__, qPrint(fileName));

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonOutlineParser::needsPreprocessing(const QCString &) const
{
  return FALSE;
}

void PythonOutlineParser::parsePrototype(const QCString &text)
{
  ::parsePrototype(p->yyscanner,text);
}

//----------------------------------------------------------------------------

#if USE_STATE2STRING
#include "pyscanner.l.h"
#endif

