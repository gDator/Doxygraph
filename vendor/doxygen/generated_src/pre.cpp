#line 1 "D:/DEV/DOXYGEN/generated_src/pre.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "D:/DEV/DOXYGEN/generated_src/pre.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define preYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer preYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define preYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer preYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define preYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer preYY_scan_buffer
#endif

#ifdef yy_scan_string
#define preYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string preYY_scan_string
#endif

#ifdef yy_scan_bytes
#define preYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes preYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define preYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer preYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define preYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer preYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define preYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state preYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define preYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer preYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define preYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state preYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define preYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state preYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define preYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack preYYensure_buffer_stack
#endif

#ifdef yylex
#define preYYlex_ALREADY_DEFINED
#else
#define yylex preYYlex
#endif

#ifdef yyrestart
#define preYYrestart_ALREADY_DEFINED
#else
#define yyrestart preYYrestart
#endif

#ifdef yylex_init
#define preYYlex_init_ALREADY_DEFINED
#else
#define yylex_init preYYlex_init
#endif

#ifdef yylex_init_extra
#define preYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra preYYlex_init_extra
#endif

#ifdef yylex_destroy
#define preYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy preYYlex_destroy
#endif

#ifdef yyget_debug
#define preYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug preYYget_debug
#endif

#ifdef yyset_debug
#define preYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug preYYset_debug
#endif

#ifdef yyget_extra
#define preYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra preYYget_extra
#endif

#ifdef yyset_extra
#define preYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra preYYset_extra
#endif

#ifdef yyget_in
#define preYYget_in_ALREADY_DEFINED
#else
#define yyget_in preYYget_in
#endif

#ifdef yyset_in
#define preYYset_in_ALREADY_DEFINED
#else
#define yyset_in preYYset_in
#endif

#ifdef yyget_out
#define preYYget_out_ALREADY_DEFINED
#else
#define yyget_out preYYget_out
#endif

#ifdef yyset_out
#define preYYset_out_ALREADY_DEFINED
#else
#define yyset_out preYYset_out
#endif

#ifdef yyget_leng
#define preYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng preYYget_leng
#endif

#ifdef yyget_text
#define preYYget_text_ALREADY_DEFINED
#else
#define yyget_text preYYget_text
#endif

#ifdef yyget_lineno
#define preYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno preYYget_lineno
#endif

#ifdef yyset_lineno
#define preYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno preYYset_lineno
#endif

#ifdef yyget_column
#define preYYget_column_ALREADY_DEFINED
#else
#define yyget_column preYYget_column
#endif

#ifdef yyset_column
#define preYYset_column_ALREADY_DEFINED
#else
#define yyset_column preYYset_column
#endif

#ifdef yywrap
#define preYYwrap_ALREADY_DEFINED
#else
#define yywrap preYYwrap
#endif

#ifdef yyalloc
#define preYYalloc_ALREADY_DEFINED
#else
#define yyalloc preYYalloc
#endif

#ifdef yyrealloc
#define preYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc preYYrealloc
#endif

#ifdef yyfree
#define preYYfree_ALREADY_DEFINED
#else
#define yyfree preYYfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 232
#define YY_END_OF_BUFFER 233
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1777] =
    {   0,
      144,  144,  215,  215,  233,  231,  232,    1,  231,  232,
      230,  232,    3,  231,  232,  231,  232,  231,  232,    2,
      231,  232,   13,  231,  232,    1,   13,  231,  232,   13,
      231,  232,   13,  230,  232,    3,   13,  231,  232,    5,
      231,  232,   13,  231,  232,   13,  231,  232,   13,  231,
      232,   13,  231,  232,   13,  231,  232,   13,  231,  232,
        2,   13,  231,  232,   84,  231,  232,    1,   84,  231,
      232,   79,  230,  232,    3,   84,  231,  232,   84,  231,
      232,   84,  231,  232,   81,   84,  231,  232,   81,   84,
      231,  232,   81,   84,  231,  232,   81,   84,  231,  232,

       81,   84,  231,  232,   81,   84,  231,  232,   81,   84,
      231,  232,    2,   84,  231,  232,  119,  231,  232,    1,
      119,  231,  232,  117,  230,  232,    3,  119,  231,  232,
      119,  231,  232,  119,  231,  232,  118,  119,  231,  232,
      118,  119,  231,  232,  118,  119,  231,  232,    2,  119,
      231,  232,  120,  123,  231,  232,    1,  120,  123,  231,
      232,  128,  230,  232,    3,  120,  123,  231,  232,  122,
      123,  231,  232,  123,  231,  232,  123,  231,  232,  120,
      123,  231,  232,    2,  120,  123,  231,  232,  129,  132,
      231,  232,    1,  129,  132,  231,  232,    3,  129,  132,

      231,  232,  131,  132,  231,  232,  129,  132,  231,  232,
      129,  132,  231,  232,  132,  231,  232,    2,  129,  132,
      231,  232,   45,  231,  232,    1,   45,  231,  232,   46,
      230,  232,    3,   45,  231,  232,   26,   45,  231,  232,
       27,   45,  231,  232,   45,  231,  232,   45,  231,  232,
       45,  231,  232,   42,   45,  231,  232,16425,   42,   45,
      231,  232,16425,   42,   45,  231,  232,16425,   45,  231,
      232,   42,   45,  231,  232,16425,   42,   45,  231,  232,
    16425,   19,   45,  231,  232,   21,   45,  231,  232,    2,
       45,  231,  232,   45,  231,  232,   28,  231,  232,    1,

       28,  231,  232,   31,  231,  232,   28,  231,  232,   28,
      231,  232,  231,  232,    2,   28,  231,  232,   29,  231,
      232,    1,   29,  231,  232,   29,  231,  232,   29,  231,
      232,    2,   29,  231,  232,   35,  231,  232,    1,   35,
      231,  232,   37,  231,  232,   35,  231,  232,   35,  231,
      232,  231,  232,    2,   35,  231,  232,   32,  231,  232,
        1,   32,  231,  232,   34,  231,  232,   32,  231,  232,
       32,  231,  232,  231,  232,    2,   32,  231,  232,   39,
       40,  231,  232,    1,   39,   40,  231,  232,   39,  230,
      232,    3,   39,   40,  231,  232,   40,  231,  232,   39,

       40,  231,  232,   39,   40,  231,  232,    2,   39,   40,
      231,  232,  231,  232,    1,  231,  232,    3,  231,  232,
      231,  232,  231,  232,    2,  231,  232,  134,  231,  232,
      138,  231,  232,    1,  138,  231,  232,  136,  230,  232,
        3,  138,  231,  232,  138,  231,  232,  138,  231,  232,
      138,  231,  232,    2,  138,  231,  232, 8334,  231,  232,
    16523,16525,16526,  144,  231,  232,  146,  231,  232,  147,
      231,  232,  145,  231,  232,  231,  232,  149,  231,  232,
      231,  232,  226,  231,  232,    1,  226,  231,  232,  215,
      226,  231,  232,  214,  230,  232,    3,  226,  231,  232,

      218,  226,  231,  232,  226,  231,  232,  219,  226,  231,
      232,  226,  231,  232,  226,  231,  232,  217,  226,  231,
      232,  211,  226,  231,  232,  226,  231,  232,    2,  226,
      231,  232,  112,  231,  232,    1,  112,  231,  232,  111,
      230,  232,    3,  112,  231,  232,  112,  231,  232,  112,
      231,  232,    2,  112,  231,  232,  110,  112,  231,  232,
        1,  110,  112,  231,  232,  110,  112,  231,  232,  110,
      111,  230,  232,    3,  110,  112,  231,  232,  109,  112,
      231,  232,  110,  112,  231,  232,  110,  112,  231,  232,
        2,  110,  112,  231,  232,  186,  188,  231,  232,    1,

      188,  231,  232,  187,  230,  232,    3,  186,  188,  231,
      232,  188,  231,  232,  188,  231,  232,  186,  188,  231,
      232,  188,  231,  232,  188,  231,  232,  188,  231,  232,
        2,  186,  188,  231,  232,  186,  188,  231,  232,  188,
      231,  232,  188,  231,  232,  188,  231,  232,   56,   59,
      231,  232,    1,   56,   59,  231,  232,   58,  230,  232,
        3,   56,   59,  231,  232,   59,  231,  232,   56,   59,
      231,  232,   56,   59,  231,  232,    2,   56,   59,  231,
      232,  189,  212,  231,  232,    1,  189,  212,  231,  232,
      192,  230,  232,    3,  189,  212,  231,  232,  212,  231,

      232,  189,  212,  231,  232,  189,  212,  231,  232,  211,
      212,  231,  232,  212,  231,  232,    2,  189,  212,  231,
      232,  188,  231,  232,  188,  231,  232,  188,  231,  232,
      186,  188,  231,  232,  188,  231,  232,  188,  231,  232,
      188,  231,  232,  200,  204,  205,  231,  232,    1,  200,
      205,  231,  232,  201,  230,  232,    3,  200,  204,  205,
      231,  232,  204,  205,  231,  232,  200,  204,  205,  231,
      232,  205,  231,  232,    2,  200,  204,  205,  231,  232,
      185,  231,  232,    1,  185,  231,  232,  184,  230,  232,
        3,  185,  231,  232,  185,  231,  232,  185,  231,  232,

      182,  185,  231,  232,  183,  185,  231,  232,    2,  185,
      231,  232,  197,  199,  231,  232,    1,  199,  231,  232,
      198,  230,  232,    3,  197,  199,  231,  232,  199,  231,
      232,  197,  199,  231,  232,  197,  199,  231,  232,    2,
      197,  199,  231,  232,  208,  209,  231,  232,    1,  209,
      231,  232,    3,  208,  209,  231,  232,  208,  209,  231,
      232,  208,  209,  231,  232,    2,  208,  209,  231,  232,
      101,  231,  232,    1,  101,  231,  232,  102,  230,  232,
        3,  101,  231,  232,  101,  231,  232,  101,  231,  232,
      100,  101,  231,  232,   99,  101,  231,  232,  101,  231,

      232,   99,  101,  231,  232,   99,  101,  231,  232,   99,
      101,  231,  232,   99,  101,  231,  232,   99,  101,  231,
      232,   99,  101,  231,  232,   99,  101,  231,  232,   99,
      101,  231,  232,   99,  101,  231,  232,    2,  101,  231,
      232,  108,  231,  232,    1,  108,  231,  232,  106,  230,
      232,    3,  108,  231,  232,  108,  231,  232,  108,  231,
      232,  104,  108,  231,  232,  108,  231,  232,    2,  108,
      231,  232,  107,  108,  231,  232,  105,  108,  231,  232,
      225,  231,  232,    1,  225,  231,  232,    3,  225,  231,
      232,  222,  225,  231,  232,  225,  231,  232,  225,  231,

      232,  225,  231,  232,    2,  225,  231,  232,  224,  225,
      231,  232,  225,  231,  232,   85,  231,  232,   83,  231,
      232,    1,   83,  231,  232,    3,   83,  231,  232,   83,
      231,  232,   83,  231,  232,   83,  231,  232,    2,   83,
      231,  232,   55,  231,  232,    1,   55,  231,  232,   53,
      230,  232,    3,   55,  231,  232,   51,   55,  231,  232,
       52,   55,  231,  232,   47,   55,  231,  232,   48,   55,
      231,  232,   55,  231,  232,   55,  231,  232,   54,   55,
      231,  232,    2,   55,  231,  232,   65,  231,  232,    1,
       65,  231,  232,    3,   65,  231,  232,   60,   65,  231,

      232,   61,   65,  231,  232,   65,  231,  232,   65,  231,
      232,   65,  231,  232,    2,   65,  231,  232,  168,  231,
      232,    1,  168,  231,  232,  167,  168,  231,  232,    3,
      168,  231,  232,  168,  231,  232,  168,  231,  232,    2,
      168,  231,  232,  171,  172,  231,  232,    1,  171,  172,
      231,  232,  170,  230,  232,    3,  171,  172,  231,  232,
      171,  231,  232,  171,  231,  232,  171,  172,  231,  232,
      171,  231,  232,    2,  171,  172,  231,  232,   12,  231,
      232,    1,   12,  231,  232,   11,  230,  232,    3,   12,
      231,  232,   12,  231,  232,   12,  231,  232,   12,  231,

      232,   12,  231,  232,    2,   12,  231,  232,  228,  229,
       13,   13,    5,   13,   13,   13,    6,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,  127,  228,  125,
      229,  118,  118,  118,  118,  120,  120,  129,  126,  129,
      228,  124,  129,  229,  129,  130,   25, 8233,   42,16425,
       42,16425,   44,   43,   44,   42,16425,   42,16425,   20,
       28,   28,  228,   28,  229,   28,   30,   29,   29,  228,
       29,  229,   29,   35,   35,  228,   35,  229,   35,   36,
       32,   32,  228,   32,  229,   32,   33,   39,   38,   39,
      228,   39,  229,   39,  135,  228,  229,  133,  134,  136,

      228,  229,  137, 8334, 8333, 8331, 8334,16523,16525,16526,
      144,  147,  146,  147,  145,  149,  149,  143,  215,  216,
      210,  150,  228,  151,  229,  211,  213,  110,  110,  109,
      186,  152,  154,  228,  153,  229,  186,  186,   56,   57,
       56,  229,   56,  189,  191,  189,  229,  189,  190,  189,
      181,  181,  228,  186,  200,  204,  200,  204,  202,  204,
      228,  203,  204,  229,  200,  204,  197,  194,  196,  228,
      195,  197,  229,  197,  208,  206,  208,  228,  207,  208,
      229,  208,   99,   86,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  104,  103,  105,  221,  228,  220,  229,

      223,   85,   82,   50,  228,   62,  228,   62,  229,   64,
       63,   64,  167,  172,  228,  229,  172,   10,    9,    8,
      228,  228,  229,    4,   81,   81,   81,   81,   81,   73,
       81,   81,   81,   81,   81,   81,  127,  127,  228,  127,
      228,  125,  125,  229,  118,  118,  118,  113,  118,  118,
      121,    4,  120,  126,  129,  126,  129,  228,  126,  126,
      129,  228,  124,  129,  124,  129,  229,  124,    4,  129,
       24,   24,   18,   42,16425,   28,  228,   28,  228,   28,
      229,    4,   28,   29,  228,   29,  228,   29,  229,    4,
       29,   35,  228,   35,  228,   35,  229,    4,   35,   32,

      228,   32,  228,   32,  229,    4,   32,   38,   39,  228,
       39,  228,   39,  229,    4,   39,  228,  228,  229,    4,
        4,  135,  228,  228,  229,    4,  148,  216,  150,  228,
      150,  228,  151,  229,  153,  229,    4,  186,  186,  157,
      156,   56,  229,    4,   56,  189,  229,    4,  189,  178,
      186,  180,  179,  204,  228,  204,  228,  204,  229,    4,
      200,  204,    4,  204,  193,  197,  229,    4,  197,  208,
      228,  208,  228,  208,  229,    4,  208,   99,   99,   99,
       99,   99,   99,   94,   99,   99,  221,  228,  220,  229,
       49,   50,  228,  174,  228,  174,  228,  173,  229,    4,

      172,  227,16398,16398,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,  127,  227,  118,  114,  118,
      118,  118,  121,  126,  129,  227,   23,   22,   23,   42,
    16425,   28,  227,   29,  227,   35,  227,   32,  227,   38,
       39,  227,  227,  227,  140,  149,  153,  155,  186,  157,
      156,  186,  180,  179,  204,  227,  208,  227,   93,   99,
       99,   99,   99,   99,   91,   99,   99,   97,   49,16398,
       16, 8206,   81,   81,   74,   77,   75,   75,   81,   81,
       81,   81,   81,   81,   81,   81,  115,  118,  116,  118,
      118,   22,   42,16425,   38,  159,   99,   99,   99,   99,

       99,   99,   89,   89, 8206,   16,   81,   81,   78,   70,
       69,   81,   81,   81,   81,   76,   42,16425,   38,  158,
      166,  169,  165,   99,   96,   98,   99,   90,   90,   99,
      161,   15,   16,   68,   72,   71,16450,   67,   38,  164,
      162,   95,   99,   92,  160,   16, 8258,   38,   88,   87,
       16, 8258,   17,   38,  177,  176,   16,   17,   17,   38,
      175,  163,   16,    7,   80,   38,   16,   38,   16,   38,
       16,   38,   38,   38,   38,   38
    } ;

static const flex_int16_t yy_accept[1450] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    6,    8,   11,   13,   16,   18,   20,
       23,   26,   30,   33,   36,   40,   43,   46,   49,   52,

       55,   58,   61,   65,   68,   72,   75,   79,   82,   85,
       89,   93,   97,  101,  105,  109,  113,  117,  120,  124,
      127,  131,  134,  137,  141,  145,  149,  153,  157,  162,
      165,  170,  174,  177,  180,  184,  189,  193,  198,  203,
      207,  211,  215,  218,  223,  226,  230,  233,  237,  241,
      245,  248,  251,  254,  259,  264,  269,  272,  277,  282,
      286,  290,  294,  297,  300,  304,  307,  310,  313,  315,
      319,  322,  326,  329,  332,  336,  339,  343,  346,  349,
      352,  354,  358,  361,  365,  368,  371,  374,  376,  380,
      384,  389,  392,  397,  400,  404,  408,  413,  415,  418,

      421,  423,  425,  428,  431,  434,  438,  441,  445,  448,
      451,  454,  458,  464,  467,  470,  473,  476,  478,  481,
      483,  486,  490,  494,  497,  501,  505,  508,  512,  515,
      518,  522,  526,  529,  533,  536,  540,  543,  547,  550,
      553,  557,  561,  566,  570,  574,  579,  583,  587,  591,
      596,  600,  604,  607,  612,  615,  618,  622,  625,  628,
      631,  636,  640,  643,  646,  649,  653,  658,  661,  666,
      669,  673,  677,  682,  686,  691,  694,  699,  702,  706,
      710,  714,  717,  722,  725,  728,  731,  735,  738,  741,
      744,  749,  754,  757,  763,  767,  772,  775,  781,  784,

      788,  791,  795,  798,  801,  805,  809,  813,  817,  821,
      824,  829,  832,  836,  840,  845,  849,  853,  858,  862,
      866,  871,  874,  878,  881,  885,  888,  891,  895,  899,
      902,  906,  910,  914,  918,  922,  926,  930,  934,  938,
      942,  945,  949,  952,  956,  959,  962,  966,  969,  973,
      977,  981,  984,  988,  992,  996,  999, 1002, 1005, 1009,
     1013, 1016, 1019, 1022, 1026, 1030, 1033, 1036, 1039, 1043,
     1046, 1050, 1053, 1057, 1061, 1065, 1069, 1073, 1076, 1079,
     1083, 1087, 1090, 1094, 1098, 1102, 1106, 1109, 1112, 1115,
     1119, 1122, 1126, 1130, 1134, 1137, 1140, 1144, 1148, 1153,

     1156, 1161, 1164, 1167, 1171, 1174, 1179, 1182, 1186, 1189,
     1193, 1196, 1199, 1202, 1205, 1209, 1210, 1211, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1217, 1218, 1218, 1218, 1218,
     1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
     1230, 1232, 1233, 1234, 1235, 1236, 1237, 1237, 1237, 1238,
     1239, 1242, 1245, 1246, 1247, 1247, 1247, 1248, 1248, 1249,
     1251, 1253, 1253, 1254, 1255, 1256, 1258, 1260, 1261, 1262,
     1264, 1266, 1267, 1268, 1269, 1271, 1273, 1274, 1275, 1277,
     1279, 1280, 1281, 1282, 1284, 1286, 1287, 1288, 1289, 1289,
     1290, 1292, 1294, 1295, 1295, 1296, 1297, 1298, 1298, 1298,

     1299, 1300, 1300, 1301, 1302, 1303, 1303, 1304, 1304, 1305,
     1306, 1307, 1311, 1311, 1312, 1313, 1314, 1315, 1316, 1316,
     1317, 1317, 1318, 1319, 1320, 1320, 1321, 1322, 1324, 1326,
     1327, 1328, 1328, 1329, 1330, 1331, 1332, 1333, 1335, 1337,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1340, 1341, 1343, 1344, 1345, 1345, 1346, 1348, 1349,
     1350, 1351, 1352, 1354, 1354, 1354, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1357, 1358, 1359, 1362, 1365, 1367, 1367,
     1367, 1368, 1369, 1371, 1374, 1375, 1376, 1379, 1382, 1383,

     1384, 1385, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1399, 1401, 1402, 1403, 1404,
     1404, 1404, 1404, 1406, 1408, 1410, 1411, 1412, 1413, 1414,
     1415, 1416, 1417, 1418, 1418, 1418, 1418, 1418, 1419, 1420,
     1421, 1422, 1423, 1424, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
     1435, 1436, 1437, 1438, 1440, 1442, 1443, 1445, 1446, 1447,
     1448, 1449, 1450, 1451, 1451, 1452, 1452, 1452, 1454, 1456,
     1459, 1460, 1463, 1465, 1468, 1469, 1471, 1472, 1472, 1473,
     1473, 1473, 1473, 1474, 1476, 1478, 1480, 1482, 1484, 1486,

     1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506,
     1508, 1508, 1509, 1511, 1513, 1515, 1517, 1518, 1519, 1520,
     1521, 1523, 1524, 1525, 1526, 1527, 1527, 1527, 1528, 1528,
     1529, 1531, 1533, 1535, 1537, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540,
     1540, 1541, 1542, 1544, 1546, 1548, 1550, 1550, 1551, 1551,
     1552, 1552, 1553, 1554, 1556, 1558, 1560, 1563, 1565, 1565,
     1565, 1565, 1566, 1568, 1570, 1572, 1574, 1576, 1578, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1589, 1591,

     1591, 1592, 1592, 1592, 1594, 1596, 1598, 1600, 1602, 1602,
     1602, 1602, 1603, 1603, 1603, 1603, 1604, 1604, 1605, 1605,
     1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
     1616, 1618, 1619, 1621, 1622, 1623, 1623, 1624, 1624, 1627,
     1628, 1630, 1630, 1630, 1630, 1632, 1634, 1636, 1638, 1640,
     1640, 1641, 1643, 1644, 1645, 1646, 1647, 1648, 1648, 1648,
     1648, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1650, 1650, 1651, 1652, 1652, 1652,
     1653, 1653, 1654, 1655, 1657, 1657, 1657, 1659, 1660, 1661,

     1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1669, 1670,
     1670, 1670, 1670, 1670, 1670, 1671, 1671, 1672, 1672, 1673,
     1673, 1674, 1675, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
     1684, 1685, 1686, 1687, 1688, 1688, 1689, 1691, 1692, 1692,
     1692, 1693, 1693, 1693, 1693, 1695, 1695, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1698, 1699, 1700, 1701, 1702,
     1703, 1704, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,

     1705, 1705, 1705, 1706, 1706, 1707, 1707, 1707, 1708, 1709,
     1709, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
     1717, 1717, 1717, 1719, 1719, 1720, 1720, 1720, 1720, 1721,
     1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1722,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1730,
     1731, 1731, 1731, 1732, 1732, 1732, 1732, 1732, 1733, 1733,
     1734, 1734, 1734, 1735, 1735, 1736, 1737, 1738, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1740, 1740, 1741, 1741,

     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
     1743, 1744, 1744, 1745, 1746, 1746, 1746, 1746, 1746, 1747,
     1747, 1747, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1750, 1751, 1751, 1751,
     1751, 1751, 1752, 1752, 1752, 1753, 1753, 1753, 1753, 1753,
     1754, 1754, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,

     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1757, 1757, 1757, 1757, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1759, 1760, 1760, 1761, 1761, 1762, 1762,
     1762, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1763, 1764, 1764, 1764, 1765, 1766, 1766, 1766,
     1766, 1766, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1767, 1768, 1768, 1768, 1768, 1768, 1768, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1770, 1770, 1770, 1770,
     1770, 1770, 1771, 1771, 1771, 1771, 1771, 1772, 1772, 1772,
     1772, 1772, 1772, 1773, 1773, 1773, 1773, 1773, 1773, 1773,

     1773, 1774, 1774, 1774, 1774, 1774, 1775, 1775, 1775, 1775,
     1775, 1776, 1776, 1776, 1776, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,

     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
     1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,    1,   16,   17,   18,   19,   20,   21,   20,
       20,   20,   20,   20,   20,   22,   23,   24,    1,   25,
       26,   27,   28,   29,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   31,   30,   30,   30,   30,
       30,   32,   30,   30,   33,   30,   30,   30,   30,   30,
       34,   35,   36,    1,   37,   38,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   48,   61,
       62,   48,   63,   11,   64,   65,    1,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    1,    1,
        9,   10,   11,   12,   13,    1,    9,   14,   15,   16,
       16,   16,   16,    1,   17,    1,    1,    1,   18,   19,
       19,   19,   19,    1,   20,    1,   19,   21,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,    1,   21,    1
    } ;

static const flex_int16_t yy_base[1642] =
    {   0,
        0,    4,    8,   74,  140,    0,  206,    0,  271,  275,
      291,  304,  370,    0,    0, 5429,  435,  439,  443,  471,
      475,  479,  511,  515,  519,  547,  551,  555,  621,    0,
      686,  690,  727,    0,  789,    0,  855,    0,  696,  920,
      985, 1050,  925,  930, 1116,    0, 1181, 1246,  950,  990,
      969,  979, 1042, 1186, 1193, 1213, 1312,    0, 1378,    0,
     1431,    0, 1235, 1492, 1496, 1500, 1537,    0, 1536, 1599,
     1664, 1729, 1604, 1624, 1795, 1861,    0,    0, 1926, 1991,
     1644, 1680, 5436, 7242, 7242, 7242, 7242,    1, 5406, 7242,
     7242, 7242, 2057, 7242, 7242, 7242,    0,    2, 5397,   17,

        0, 5369, 7242, 7242, 7242, 7242, 7242,    3, 5371,    0,
     5347, 5353,    1,    8, 5338, 5341, 7242, 7242, 7242, 7242,
     7242,   10, 5364,    0,    5, 5347, 7242,    0,    0, 7242,
        0, 7242, 5355,   11, 5361,    0,    0,    0,    0, 7242,
       16, 5360,    0,    0, 7242, 7242, 7242, 7242, 7242, 5352,
       26, 5358, 5378,  309,  312,  342,   10,  523,  330, 7242,
     7242, 7242, 5317,    0,    0, 7242,   27, 5352,    0,    0,
        0,    0,   46, 5350,    0,    0,    0, 7242,   49, 5349,
        0,    0,    0,    0, 7242,   52, 5348,    0,    0,    0,
        0,    0,    0, 5368,   54, 5345,    0,   17,  274,  277,

      321,  293,  278,   30, 5368, 5367, 7242, 5366,  323,  303,
      284, 5365,  453,  283, 5365, 5361, 5340, 5324,  347, 5336,
     7242, 7242,  321, 7242, 7242, 7242, 5331, 7242,  339, 5310,
     7242,    0,  287, 7242, 7242, 7242, 7242, 7242,  341, 5309,
     7242, 7242, 7242,  356, 7242, 7242, 7242,  348, 5307, 7242,
        0, 7242, 7242,    0, 5315,  434, 5305, 2095, 7242,  435,
        0,  529,  928, 5294, 5266,    0,    0, 7242,    0, 5311,
      436, 5301,    0, 5275, 5270, 7242, 5262, 5277,  450,  333,
        0,  507, 5253, 5257,  453,  416,  696,  961, 5225, 5185,
      487,    0, 7242,  506,  467,  552,  557,  529, 7242, 7242,

     7242, 7242,  477, 5220, 7242, 7242, 7242,    0, 7242, 7242,
        0, 5228,  478, 5214,    0,    0, 7242,    0,  485, 5204,
        0, 7242, 7242, 7242, 7242,  549, 5199, 7242,    0,  568,
     5174, 5161, 5153, 5162, 5161, 5134, 5129, 5128, 5126, 7242,
     7242, 7242, 7242, 7242,  550, 5143,    0, 5158, 7242, 7242,
        0, 7242, 7242, 7242, 7242,  572, 5130,    0, 7242, 7242,
      574,    0, 7242, 7242, 7242,  580, 5129,  592, 7242, 7242,
     7242, 7242, 7242, 7242, 5120, 7242, 7242,  586, 5126, 7242,
     7242, 7242, 7242, 7242, 7242, 7242,  587, 5125,  599, 7242,
     7242, 7242,    0, 7242,  592, 5124, 7242,    0,    0, 7242,

        0, 7242,  593, 5122,  667,    0, 7242, 7242, 7242, 7242,
      526,  595, 5121,   27, 7242,  446,  347,  714, 7242, 2156,
     7242, 1060,    0, 5094, 5094, 7242, 2220,  606,  690,    0,
     5107, 5081,  650, 5062,  959, 5029, 5037, 5026, 5020,  698,
      557,    0,  659, 4999, 1021,    0, 5024,  595, 1277,    0,
      730,  716, 1440, 7242, 5008,  726, 7242,  750, 7242,  933,
     1055, 4997, 7242, 7242, 5001, 1026, 1221, 7242,    0,  927,
      711, 1520, 7242,    0,  935,  713, 1692,    0,  945,  723,
     1747, 7242,    0,  953,  951, 1763, 7242,    0, 4995, 4992,
      997,  996, 1822, 1001, 7242, 1060, 1201, 2252,  964, 7242,

     1061, 4974, 7242, 1034, 1090, 2276, 7242, 4953, 1068, 7242,
     7242, 1200, 4948, 1003, 4947, 4944, 4942, 4935, 4918, 1018,
     4913, 1019, 7242,  740, 4922, 4925, 7242, 1071, 1092,    0,
     7242, 4922, 7242,  953, 7242,    0, 7242, 1095, 1093, 1888,
     2263, 4870, 4868, 4868, 4860, 4867, 4844, 4838, 4798, 4792,
     4782, 1073, 1054, 1191, 1228, 4785, 4749, 1220, 4774, 4744,
        0, 7242, 1183, 1923, 4772, 4758, 7242, 1263, 2319, 7242,
     1006, 7242, 1178, 4739, 1224, 1242, 1492, 4750, 4721, 1235,
     4745, 4707, 1253,    0,    0, 1221, 1258, 2353,  547, 4714,
        0, 1097, 1256, 1280, 1945,    0, 1261, 1286, 1961,    0,

     7242, 4761, 4709, 4687, 4688, 4686, 4668, 4651, 4701, 4642,
     4643,    0, 7242,    0, 1272, 1289, 7242,    0, 7242, 4686,
     4676,  729, 1291, 1441, 1497, 7242, 7242, 4660,    0,    0,
     1443, 1503, 1988,  577, 4610, 4609, 1208, 7242, 7242, 7242,
     7242, 4640, 7242, 7242, 4604, 1447, 1093, 1510, 4643, 1604,
     4607, 4608, 4610, 4610, 4605, 7242, 4608, 4608, 4593, 4595,
     4598, 4599,    0,    0, 4622,    0,    0, 4596, 4595, 4590,
     7242, 4593, 4593, 4622, 7242, 4621, 1530,    0,  267, 1514,
        0, 1537, 1518, 1598,    0,    0, 7242, 4617, 4596, 1540,
     1609, 4594, 7242, 1651,    0, 4586,    0,    0,    0, 4585,

        0,    0,    0, 4584,    0,    0,    0, 4583,    0,    0,
     4593, 4592,    0, 4579,    0,    0, 1536, 1618, 1593, 1603,
     7242, 4593, 1510, 4592, 4591, 1657, 1622, 7242, 4576, 4572,
     7242, 4551, 7242, 4543,    0, 4508, 4500, 4489, 1610, 4454,
     4457, 4455, 4453, 4433, 4427, 4414, 1523, 1580, 4413, 4399,
     4402, 4373, 4377, 4384, 4351, 4352, 4336, 4340, 1685, 1637,
     4348, 4295,    0,    0, 4324, 4322, 4314, 7242, 4311, 1686,
     1700, 4316, 4287,    0, 4332,    0, 1648,    0, 4297, 4297,
     1184, 7242,    0,    0,    0, 4329,    0,    0, 4324, 1710,
      315, 1507, 1639, 1621, 7242,  492, 4303, 4282, 7242, 4276,

     7242, 4273, 1700, 4251, 7242, 4245, 7242,    0, 4201, 4197,
     4204, 7242, 4180, 1504, 3695, 1723, 3692, 1788, 1726, 3654,
     3642, 1719, 2380, 3641, 3638, 3630, 3614, 3606, 3608, 3610,
        0, 1749, 1795, 1765, 1781, 3636, 7242, 1806, 1646, 7242,
     7242, 1825, 1851, 3630, 1878,    0,    0,    0,    0, 3630,
     3625,    0, 1825, 3622, 7242, 7242, 3602, 1655, 1633, 3573,
     7242, 3566, 3553, 3552, 3535, 3536, 3538, 3521, 3521, 3523,
     3518, 3515, 1812, 3508, 3494, 3480, 3490, 3474, 3469, 3476,
     3458, 3463, 3442,  960, 1702, 3456, 3424, 1981, 3419, 1533,
     1718, 3440, 3407,    0, 3415, 3419,    0, 7242,    4, 1503,

     1803, 1683, 1711, 7242, 1742, 1905, 7242, 3444, 7242, 1872,
     3398, 3403, 3398, 3420, 2221, 1914, 1980, 2224, 7242, 1909,
     3386, 3380, 7242, 7242, 1810, 3373, 2446, 1837, 3368, 3348,
     3359, 3356, 3387, 7242, 1864, 2005, 1940, 1963, 3372, 3367,
     7242, 3361, 1986, 3355, 2233, 3355, 3350, 3308, 3304, 3300,
     2030, 3294, 3316, 3274, 3260, 3270, 3254, 3249, 3256, 3238,
     2257, 2035, 3232, 2041, 3227, 3221, 3226, 3202, 3206, 3200,
     3208, 3189, 3193, 3187, 3172, 3166, 3156, 3158, 3164, 3158,
     3134, 3143, 3130, 2047, 1918, 3172, 3167, 1835, 2050, 1901,
     2122, 7242, 3160, 3147, 3141, 3106, 3139, 3084, 1902, 2294,

     2463, 1840, 1919, 2489, 2492, 2495, 2241, 3088, 3123, 1900,
     3076, 7242, 2126, 7242, 2130, 2022, 3072, 3106, 3101, 3054,
     2270, 3080, 2336, 3080, 3075, 2312, 3073, 3018, 2144, 3012,
     3007, 3011, 2988, 2991, 2986, 2993, 2975, 2957, 2149, 7242,
     2227, 2963, 2958, 2953, 2943, 2941, 2938, 2933, 2919, 2926,
     1871, 2918, 2931, 1924, 2920, 2916, 2904, 2908, 2915, 2897,
     2900, 2323, 2938, 7242, 7242, 2006, 2347, 7242, 2934, 2931,
     2357, 2929, 2928, 2866, 2500, 2503, 2013, 7242, 2517, 2525,
     2529, 2473, 2907, 2350, 2131, 7242, 2125, 7242, 2269, 2512,
     2532, 2896, 2535,    0, 2897, 2892, 2834, 2893, 2842, 2838,

     2836, 2830, 2832, 2832, 2820, 2811, 2814, 2793, 2485, 2807,
     2812, 2798, 2804, 2790, 2777, 2776, 2789, 2773, 7242, 2793,
     2783, 2782, 2770, 2755, 2758, 2740, 2734, 2746, 2718, 7242,
     2236, 2556, 7242, 2766, 2721, 2565, 2569, 2572, 2581, 2594,
     2278,    0, 2710, 2597, 2747, 2604, 2752, 2747, 2741, 2674,
     2609, 2688, 2691, 2673, 2678, 2658, 2643, 2639, 2648, 2632,
     2631,    0, 2618, 2620, 2591, 2585, 2579, 2563, 2562, 2561,
     2534, 2530, 2519, 2517, 2499, 2273, 7242,    0, 2616, 2619,
     2622, 2634, 2644, 2334,    0, 2503, 2647, 2510, 2658, 2650,
     2495, 2494, 2438,    0, 2423, 2433, 2429, 2427, 2417, 7242,

     2307, 2252, 2311, 2290, 2279, 2281, 2280, 2279, 2254, 2261,
     7242, 2669, 2672, 2684, 2687, 2695, 2345, 2540, 2257, 2699,
     2283, 2711, 2717, 7242, 2285, 2261, 2211, 7242, 2185, 2184,
     7242, 2091, 2085, 2092, 2004, 1974, 1968, 1965, 1941, 2722,
     2725, 2737, 2740, 2748, 2543, 1984, 7242, 2752, 1968, 2763,
     1972, 1937, 1889, 1858, 1845, 1817, 1822, 1729, 1719, 2770,
     2778, 2774, 2786, 2792, 2801, 1731, 2814, 1730, 1709, 1633,
     1628, 1585, 2820, 2826, 2804, 2842, 2848, 2855, 1602, 2858,
     1566, 1462, 1405, 2870, 2873, 2876, 2888, 2898, 2903, 1297,
     2910, 1261, 1223, 1137, 2916, 2921, 2924, 1090, 2939,    4,

       65, 2944,  317, 2951,  344,  495, 2962,  676, 2965,  705,
      919, 2977,  969, 2982, 7242, 2988, 2993, 2999, 3004, 3010,
     3015, 3021, 3026, 3032, 3037, 3043, 3048, 3054, 3059, 3065,
     3070, 3076, 3081, 3087, 3092, 3098, 3103, 3109, 3114, 3120,
     3125, 3131, 3136, 3142, 3147, 3153, 3158, 3164, 3169, 3175,
     3180, 3186, 3191, 3197, 3202, 3208, 3213, 3219, 3224, 3230,
     3235, 3241, 3246, 3252, 3257, 3263, 3268, 3274, 3279, 3285,
     3290, 3296, 3301, 3307, 3312, 3318, 3323, 3329, 3334, 3340,
     3345, 3351, 3356, 3362, 3367, 3373, 3378, 3384, 3389, 3395,
     3400, 3406, 3411, 3417, 3422, 3428, 3433, 3439, 3444, 3450,

     3455, 3461, 3466, 3472, 3477, 3483, 3488, 3494, 3499, 3505,
     3510, 3516, 3521, 3527, 3532, 3538, 3543, 3549, 3554, 3560,
     3565, 3571, 3576, 3582, 3587, 3593, 3598, 3604, 3609, 3615,
     3620, 3626, 3631, 3637, 3642, 3648, 3653, 3659, 3664,  992,
     3671, 3676, 3683, 3688, 3695, 3700, 3707, 7242, 3714, 3735,
     3756, 3777, 3798, 3819, 3840, 3861, 3882, 3903, 3924, 3945,
     3966, 3987, 4008, 4029, 4050, 4071, 4092, 4113, 4134, 4155,
     4176, 4197, 4218, 1432, 2005, 2251, 4239, 4260, 4281, 4302,
     4323, 4342, 4361, 4382, 4403, 4424, 4445, 4466, 4487, 4508,
     4529, 4550, 4571, 4590, 4609, 4628, 4646, 1944, 2352, 4665,

     4686, 4705, 4726, 4747, 4768, 4789, 4810, 4831, 2357, 2358,
     2546, 4852, 2548, 4873, 4894, 4913, 4932, 2562, 2571, 4953,
     4974, 2575, 4995, 5016, 5037, 5058, 5079, 5100, 5121, 5140,
     5159, 5180, 5201, 5222, 5243, 5264, 5285, 5306, 5325, 5344,
     5363, 5381, 2587, 5400, 5421, 5440, 5461, 5482, 5503, 5524,
     5545, 5566, 2615, 2626, 2640, 2648, 5587, 5608, 5627, 5646,
     5667, 5688, 5707, 2650, 5726, 5747, 2662, 5768, 5789, 5810,
     5831, 5852, 5873, 5894, 5915, 5934, 5953, 5974, 5995, 6016,
     6037, 6058, 6079, 6100, 6121, 6140, 6161, 6182, 6203, 6224,
     6245, 2796, 6266, 6287, 6308, 6329, 6350, 6369, 2690, 6388,

     6407, 6426, 6447, 6468, 6489, 6510, 6531, 6552, 6573, 6594,
     6615, 6636, 6655, 6674, 6695, 6716, 6737, 2715, 6758, 6779,
     6800, 6821, 6842, 6863, 6884, 6905, 6926, 6947, 6968, 6989,
     7010, 7031, 7052, 7073, 7094, 7115, 7136, 7157, 7178, 7199,
     7220
    } ;

static const flex_int16_t yy_def[1642] =
    {   0,
     1449, 1449, 1449, 1448, 1448,    5, 1448,    7, 1450, 1450,
     1451, 1451, 1448,   13,   13,   13, 1452, 1452, 1453, 1453,
     1454, 1454, 1455, 1455, 1456, 1456, 1457, 1457, 1448,   29,
     1458, 1458,   29,   33, 1448,   35, 1448,   37, 1459, 1460,
     1461, 1461, 1462, 1462, 1448,   45, 1461, 1461, 1463, 1463,
     1464, 1464, 1465, 1465, 1466, 1466, 1448,   57, 1448,   59,
       59,   61, 1467, 1467, 1467, 1467,   33,   67, 1468, 1468,
     1469, 1469, 1470, 1470, 1471, 1471,   76,   76, 1472, 1472,
     1473, 1473, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1474,

     1474, 1474, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1476, 1476, 1476, 1448, 1477, 1477, 1448,
     1477, 1448, 1478, 1448, 1477, 1477, 1479, 1479, 1479, 1448,
     1479, 1479, 1480, 1479, 1448, 1448, 1448, 1448, 1448, 1481,
     1448, 1448, 1448, 1482, 1482, 1482, 1483, 1482, 1482, 1448,
     1448, 1448, 1448, 1484, 1484, 1448, 1484, 1484, 1485, 1484,
     1486, 1486, 1486, 1486, 1486, 1487, 1487, 1448, 1487, 1487,
     1488, 1487, 1489, 1489, 1448, 1489, 1489, 1490, 1489, 1491,
     1491, 1491, 1491, 1492, 1491, 1491, 1491, 1493, 1493, 1493,

     1493, 1493, 1493, 1494, 1495, 1495, 1448, 1495, 1495, 1495,
     1448, 1495, 1496, 1448, 1448, 1448, 1448, 1448, 1497, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1498, 1448, 1448, 1448,
     1448, 1499, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1500, 1448, 1448, 1448, 1448, 1448, 1448,
     1501, 1448, 1448, 1501, 1448, 1448, 1501, 1448, 1448, 1448,
     1501, 1501, 1448, 1448, 1448, 1502, 1502, 1448, 1502, 1448,
     1502, 1502, 1502, 1503, 1503, 1448, 1503, 1448, 1503, 1503,
     1499, 1503, 1503, 1448, 1448, 1448, 1501, 1448, 1448, 1448,
     1504, 1505, 1448, 1504, 1506, 1504, 1448, 1504, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1507, 1448, 1448,
     1507, 1448, 1507, 1507, 1507, 1508, 1448, 1508, 1508, 1508,
     1508, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1509, 1448,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1510, 1448, 1448, 1448,
     1511, 1448, 1448, 1448, 1448, 1448, 1448, 1512, 1448, 1448,
     1448, 1513, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1514, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1515, 1448,
     1448, 1448, 1516, 1448, 1448, 1448, 1448, 1517, 1517, 1448,

     1517, 1448, 1448, 1517, 1448, 1517, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1518, 1518, 1518, 1448, 1448, 1518, 1518, 1518, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1520,
     1521, 1522, 1522, 1522, 1522, 1523, 1524, 1525, 1523, 1526,
     1527, 1528, 1526, 1448, 1448, 1529, 1448, 1448, 1448, 1530,
     1530, 1531, 1448, 1448, 1448, 1530, 1530, 1448, 1532, 1532,
     1532, 1532, 1448, 1533, 1533, 1533, 1533, 1534, 1534, 1534,
     1534, 1448, 1535, 1535, 1535, 1535, 1448, 1536, 1537, 1537,
     1536, 1536, 1536, 1538, 1448, 1538, 1538, 1538, 1448, 1448,

     1539, 1540, 1448, 1540, 1540, 1540, 1448, 1448, 1448, 1448,
     1448, 1541, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1542, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1543,
     1448, 1448, 1448, 1544, 1448, 1545, 1448, 1448, 1448, 1545,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1545, 1448, 1448, 1448, 1448, 1448, 1448,
     1546, 1448, 1546, 1546, 1547, 1547, 1448, 1547, 1547, 1448,
     1547, 1448, 1448, 1448, 1448, 1545, 1448, 1448, 1448, 1448,
     1448, 1448, 1548, 1549, 1550, 1550, 1550, 1548, 1448, 1448,
     1551, 1448, 1448, 1551, 1551, 1552, 1552, 1552, 1552, 1553,

     1448, 1448, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1554, 1448, 1555, 1448, 1448, 1448, 1556, 1448, 1448,
     1557, 1558, 1448, 1448, 1448, 1448, 1448, 1448, 1559, 1560,
     1448, 1448, 1560, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1561, 1448, 1562, 1563,
     1564, 1564, 1564, 1564, 1564, 1448, 1564, 1564, 1564, 1564,
     1564, 1564, 1565, 1565, 1565, 1566, 1566, 1567, 1567, 1567,
     1448, 1567, 1567, 1568, 1448, 1448, 1448, 1569, 1570, 1570,
     1571, 1570, 1572, 1572, 1573, 1574, 1448, 1448, 1448, 1448,
     1448, 1575, 1448, 1576, 1577, 1577, 1577, 1577, 1578, 1578,

     1578, 1578, 1579, 1579, 1579, 1579, 1580, 1580, 1580, 1580,
     1581, 1581, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583,
     1448, 1584, 1584, 1584, 1584, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1585, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1585, 1448,
     1448, 1448, 1586, 1586, 1587, 1587, 1448, 1448, 1448, 1585,
     1448, 1448, 1448, 1588, 1588, 1588, 1589, 1588, 1448, 1448,
     1448, 1448, 1590, 1590, 1591, 1591, 1591, 1591, 1592, 1592,
     1592, 1592, 1592, 1592, 1448, 1592, 1592, 1448, 1448, 1593,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1594, 1448, 1448,
     1448, 1448, 1448, 1595, 1596, 1448, 1597, 1448, 1598, 1599,
     1599, 1599, 1448, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1600, 1601, 1601, 1601, 1601, 1602, 1448, 1448, 1603, 1448,
     1448, 1448, 1448, 1604, 1576, 1577, 1578, 1579, 1580, 1605,
     1605, 1582, 1583, 1584, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1585, 1448, 1448, 1448, 1448, 1448, 1585,
     1448, 1448, 1448, 1588, 1448, 1448, 1591, 1448, 1592, 1592,

     1592, 1592, 1592, 1448, 1592, 1592, 1448, 1606, 1448, 1448,
     1448, 1448, 1448, 1596, 1607, 1448, 1448, 1448, 1448, 1598,
     1599, 1599, 1448, 1448, 1448, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1448, 1448, 1601, 1601, 1601, 1448, 1448,
     1448, 1448, 1448, 1608, 1576, 1609, 1609, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1592, 1592, 1592, 1592, 1592, 1592,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1607, 1607,

     1607, 1448, 1607, 1448, 1448, 1448, 1598, 1599, 1599, 1448,
     1448, 1448, 1448, 1448, 1599, 1599, 1599, 1599, 1448, 1448,
     1448, 1610, 1576, 1611, 1611, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1612, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1592, 1448, 1448, 1592, 1448, 1448, 1448, 1592,
     1448, 1448, 1448, 1448, 1607, 1607, 1448, 1448, 1448, 1448,
     1448, 1598, 1448, 1448, 1448, 1448, 1613, 1448, 1448, 1448,
     1448, 1614, 1448, 1615, 1616, 1616, 1617, 1448, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1612, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1592, 1448, 1448, 1448, 1448, 1607, 1607, 1448, 1448, 1448,
     1598, 1618, 1448, 1448, 1619, 1448, 1615, 1620, 1620, 1617,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1621, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1622, 1607, 1607,
     1448, 1448, 1448, 1598, 1618, 1448, 1448, 1623, 1448, 1448,
     1624, 1624, 1448, 1625, 1448, 1448, 1448, 1448, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1607, 1607, 1448, 1448, 1448, 1448, 1626, 1448, 1448,
     1627, 1448, 1448, 1448, 1628, 1628, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1607,
     1607, 1448, 1448, 1448, 1626, 1626, 1448, 1448, 1629, 1448,
     1630, 1630, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1607,
     1607, 1448, 1448, 1448, 1448, 1631, 1448, 1632, 1632, 1448,
     1448, 1448, 1607, 1607, 1448, 1448, 1448, 1448, 1633, 1448,
     1634, 1634, 1448, 1607, 1607, 1448, 1448, 1448, 1448, 1635,
     1448, 1636, 1636, 1448, 1607, 1607, 1448, 1637, 1448, 1638,

     1638, 1448, 1639, 1448, 1640, 1640, 1448, 1641, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448,    0, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448
    } ;

static const flex_int16_t yy_nxt[7309] =
    {   0,
     1448,   85, 1448,   86,   87,   85, 1448,   86,   87,   85,
     1306,   86,   87,  464,  465,  416,  416,  416,   88,  417,
      417,  417,   88,  495,  440,  440,   88,   89,  441,  441,
      451,   89,  499,  639,  452,   89,  427,  427,  427,  427,
      416,  470,  500,  495,  417,  471,  427,  427,  427,  427,
      433,  435,  434,  427,  443,  985,  444,  425,  436,  437,
      475,  640,  426,  479,  476,   90,  484,  480,  491,   90,
      485, 1306,  492,   90,   91,   92,   93,   94,   95,   91,
       91,   96,   91,   97,   91,   91,   91,   91,   91,   91,
       91,   91,   98,   91,   91,   91,   91,   91,   91,   91,

       91,   99,   91,  100,  100,  100,  100,   91,   91,   91,
      100,   91,  101,  101,  102,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,   91,   91,   91,  103,
      104,  105,  104,  106,  107,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  108,  104,
      104,  104,  104,  104,  104,  104,  104,  109,  104,  110,
      110,  110,  110,  104,  104,  104,  110,  104,  110,  110,
      111,  112,  113,  110,  110,  110,  114,  110,  110,  110,
      110,  110,  110,  115,  110,  110,  110,  110,  116,  110,

      110,  110,  104,  104,  104,  117,  118,  119,  118,  120,
      121,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  122,  118,  118,  118,  118,  118,
      118,  118,  118,  123,  118,  124,  124,  124,  124,  118,
      118,  118,  124,  118,  124,  124,  124,  124,  125,  124,
      124,  124,  126,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  118,  118,
      118,  127,  129,  681,  130,  131,  129,  132,  130,  131,
      495,  132,  133,  495,  495,  514,  133,  507,  508,  134,
      531,  532,  138,  134,   86,  139,  515,  140,  135,  495,

      495,  681,  135,  495,  495,  138,  503,   86,  139,  141,
      140,  458,  458,  458,  458,  458,  458, 1448,  142,  495,
      498,  459,  141,  524,  459,  143,  503,  495,  525,  693,
      506,  142,  458,  458,  458,  496,  136,  504,  143,  497,
      136,  505,  459,  461,  458,  458,  458,  495,  462,  520,
     1311,  467,  643,  528,  459,  440,  144,  529,  534,  441,
      569,  461,  440,  535,  521,  643,  441,  566,  901,  144,
      145,  146,  145,  147,  148,  145,  149,  145,  145,  145,
      145,  150,  145,  145,  145,  145,  145,  145,  151,  145,
      145,  145,  145,  145,  145,  145,  145,  152,  153,  154,

      155,  156,  155,  145,  157,  145,  154,  145,  154,  154,
      154,  154,  158,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  159,  154,
      154,  154,  160,  161,  145,  162,  165,  552,   86,   87,
      165,  166,   86,   87,  172,  166,   86,   87,  538,  166,
      416,  641,  539,  167,  563,  509,  510,  167,  574,  575,
      642,  173,  168,  553,  416,  511,  168,  573,  568,  169,
      174,  417,  172,  169,   86,   87,  177,  166,   86,   87,
      177,  586,   86,   87,  566,  587,  178,  513,  584,  173,
      178,  416,  593,  179, 1448,  417,  594,  179,  174,  597,

      170, 1311,  180,  598,  170,  585,  180,  584,  175,  181,
      570,  571,  184,  181,   86,   87,  184,  185,   86,   87,
      191,  185,  192,  193,  585,  458,  458,  458,  637,  186,
      584,  554,  194,  186,  906,  459,  175,  195,  187,  638,
      182,  566,  187,  555,  182,  188,  196,  585,  191,  188,
      192,  193,  199,  584,   86,  200,  199,   84,   86,  200,
      194,   84,  667,  416,  416,  195,  556,  417,  417,  201,
      585,  601,  602,  201,  196,  667,  189,   84,  202,  588,
      189,   84,  202,  466,  197,  589,  615,  779,  416,  738,
      616,  589,  417,  557,  416,  619,  620,  590,  417,  544,

      623,  624,  627,  628,  417,  625,  416,  631,  648,  416,
      417,  632,  197,  417,  677,  677,  203,  809,  649,  738,
      203,   84,   85,   84,   86,   87,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   88,
       84,   84,   84,   84,   84,   84,   84,   84,   89,   84,
      204,  204,  204,  204,   84,   84,   84,  204,   84,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,   84,   84,   84,   90,  206,  693,  207,
      208,  206,  648,  207,  208,  634,  653,  236,  576,  237,

      238,  634,  649,  664,  209,  668,  654,  635,  209,  636,
      577, 1315,  665,  210,  239,  669,  697,  210,  701,  644,
      211,  684,  685,  240,  211,  644,  644,  644,  705,  697,
      644,  701,  644,  578,  684,  680,  681,  689,  644,  644,
      644,  705,  524,  650,  682,  690,  690,  525,  803,  803,
      685,  212,  691,  691,  691,  212,  213,  213,  213,  213,
      579,  241,  459,  213,  681,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,   84,
       85,  214,   86,   87,   84,   84,   84,   84,   84,   84,

       84,  215,  216,   84,  217,   84,  218,   88,   84,   84,
       84,   84,   84,   84,   84,   84,   89,   84,  219,  219,
      219,  219,   84,  220,   84,  219,   84,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,   84,   84,   84,   90,  221,  222,  223,  224,  225,
      221,  226,  227,  221,  221,  221,  228,  221,  221,  221,
      221,  221,  221,  229,  221,  221,  221,  221,  221,  221,
      221,  221,  230,  231,  232,  232,  232,  232,  221,  233,
      221,  232,  221,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  221,  221,  221,
      234,  243,  244,  245,  246, 1315,  267,  247,  268,  269,
      558,  267,  695,  268,  269,  458,  458,  458,  248,  270,
      699,  696,  555,  271,  270,  459,  537,  249,  271,  700,
      703,  292,  272,  293,  294,  534,  709,  272,  707,  704,
      535,  656,  884,  580,  656,  556,  499,  708,  295,  709,
      300,  656,  301,  302,  555,  577,  500,  296,  297,  572,
      300,  693,  301,  302,  297,  250,  252,  303,  253,  254,
      273,  292,  557,  293,  294,  273,  304,  303,  578,  255,

      657,  715,  713,  256,  459,  514,  304,  495,  295,  570,
      658,  714,  257,  258,  715,  298,  515,  296,  297,  258,
      520,  520,  259,  671,  297,  579,  671,  495,  458,  458,
      458,  305,  306,  671,  307,  521,  521,  503,  459,  722,
      566,  305,  306,  309,  307,  310,  311,  260,  723,  259,
      261,  252,  262,  253,  254,  298,  312,  458,  458,  458,
      313,  462,  672,  499,  263,  717,  495,  459,  256,  314,
      509,  510,  673,  500,  718,  552,  731,  257,  258,  427,
      427,  427,  427,  694,  258,  732,  495,  264,  726,  427,
      427,  427,  427,  503,  757,  724,  427,  733,  643,  781,

      641,  553,  693,  758,  782,  815,  816,  315,  724,  642,
      733,  734,  260,  537,  265,  261,  274,  275,  274,  276,
      277,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      278,  274,  274,  274,  279,  274,  274,  274,  274,  274,
      274,  274,  274,  280,  274,  281,  281,  281,  281,  274,
      282,  274,  281,  274,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  274,  274,
      274,  283,  252,  641,  253,  254,  781,  309,  763,  310,
      311,  782,  642,  759,  317,  284,  293,  318,  768,  285,

      312,  763,  509,  510,  313,  555,  719,  495,  257,  286,
      637,  319,  511,  314,  317,  286,  293,  318,  259,  719,
      320,  638,  760,  458,  458,  458,  774,  495,  556, 1301,
      558,  319,  768,  459,  513,  775,  353,  771,   86,  354,
      320,  355,  555,  259,  770,  259,  261,  252,  287,  253,
      254,  315,  461,  356,  584,  557,  577,  556,  321,  768,
      288,  641,  357,  776,  285,  556,  785, 1301,  765,  358,
      642,  585,  578,  257,  286,  786,  776,  641,  321,  578,
      286,  765,  678,  289,  557,  783,  798,  769,  644,  678,
      678,  787,  557,  678,  643,  644,  641,  566,  783,  579,

      359,  678,  678,  678,  787,  804,  579,  799,  259,  693,
      290,  261,  322,  323,  322,  324,  325,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      326,  322,  322,  322,  322,  322,  322,  322,  322,  327,
      328,  329,  329,  329,  329,  322,  330,  322,  329,  322,
      331,  332,  333,  334,  329,  335,  329,  329,  329,  329,
      329,  329,  329,  336,  337,  329,  329,  329,  329,  338,
      329,  329,  339,  329,  322,  322,  322,  340,  341,  342,
      341,  343,  344,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  345,  341,  341,  341,

      341,  341,  341,  341,  341,  346,  341,  347,  347,  347,
      347,  341,  348,  341,  347,  341,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      341,  341,  341,  349,  350,  686,  641,  428,  805,  646,
      428,  686,  686,  686, 1294,  642,  686,  806,  686,  647,
      351,  351,  351,  351,  686,  686,  686,  351, 1293,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  353,  580,   86,  354,  353,  355,   86,

      354,  353,  643,   86,  354, 1448,  577,  360,  807, 1448,
      356,  360,  648,  503,  361,  643,  815,  816,  361,  357,
      681,  807,  649,  357,  685,  698,  358,  357,  854,  578,
      358,  698,  698,  698,  358,  890,  698,  364,  698,  106,
      365,  837,  495,  681,  698,  698,  698,  577,  681,  838,
      838,  841,  685,  902,  366,  839,  579,  359,  986,  842,
      842,  359,  495,  367,  870,  359,  362,  362,  362,  362,
      368,  681, 1293,  362,  871,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  495,

      364,  369,  106,  365,  685,  383,  648,   86,  384,  495,
      385,  843,  843,  843,  693,  386,  649,  366,  861,  495,
      872,  459,  387,  904,  495,  383,  367,   86,  384,  495,
      385,  388,  685,  368,  511,  386,  853,  873,  389,  885,
      819, 1448,  387,  862,  495,  408,  768,  409,  410,  584,
      411,  388,  681,  458,  458,  458,  513,  905,  389,  855,
      855,  855,  412,  459,  369,  371,  585,  372,  373,  390,
      374,  413,  861,  950,  556,  375,  376,  377,  414, 1283,
      681,  408,  378,  409,  410, 1448,  411,  884,  890,  390,
      951,  379,  380,  845,  951,  903,  948,  702,  412,  555,

      577,  557,  891,  702,  702,  702,  949,  413,  702,  415,
      702,  909, 1448, 1448,  414, 1282,  702,  702,  702,  910,
      910,  923,  556,  578,  923,  916,  917,  918,  648,  381,
      371,  923,  372,  373,  988,  374, 1282,  578,  649,  556,
      375,  376,  377,  693, 1448,  415,  919,  378,  899,  557,
      579,  934,  706,  989,  934,  578,  379,  380,  644,  706,
      706,  934,  900,  706,  579,  706,  557, 1448,  710,  768,
     1448,  706,  706,  706,  710,  710,  710, 1448, 1272,  710,
      920,  710,  579, 1448,  990,  919, 1448,  710,  710,  710,
      918,  918,  918, 1448,  381,  391,  392,  935,   86,  394,

     1448,  391,  391,  391,  391, 1448,  391, 1448,  937,  391,
      391,  919, 1010,  395,  964,  964,  964,  675,  391,  391,
      391,  391,  396,  391,  938,  940,  940,  716,  391,  391,
      391,  495,  391,  716,  716,  644,  941, 1448,  716, 1013,
      716,  936, 1077, 1078,  942,  942,  716,  716,  716, 1014,
      919,  495,  987,  943,  943,  943, 1011,  391,  391,  391,
      397,  391,  392,  459,   86,  394,  935,  391,  391,  391,
      391,  768,  391, 1119, 1119,  391,  391, 1066,  768,  395,
      458,  458,  458,  801,  391,  391,  391,  391,  396,  391,
      459,  995,  995,  735,  391,  391,  391, 1271,  391,  735,

      735,  735, 1010, 1448,  735, 1448,  644,  991,  992,  993,
     1020,  648,  735,  735,  735, 1002, 1004, 1005, 1006,  873,
     1448,  649, 1448,  391,  391,  391,  397,  399,  764,  400,
      401,  402, 1002,  945,  764,  764,  764,  919, 1270,  764,
      402,  764, 1448, 1269,  403, 1448, 1011,  764,  764,  764,
      784,  527, 1448,  404,  405, 1070,  784,  784,  784, 1063,
      405,  784,  527,  784, 1122,  671,  788, 1007,  671,  784,
      784,  784,  788,  788,  788,  671,  919,  788, 1269,  788,
      693,  768, 1006, 1006, 1006,  788,  788,  788, 1021, 1021,
     1021,  406,  399,  644,  400,  401,  402,  818,  459,  808,

      808,  808,  768,  919,  808,  402,  644, 1448, 1448,  403,
     1448, 1259,  808,  808,  808, 1077, 1078, 1448,  404,  405,
      430,  975,  976,  430, 1087,  405,  977,  978, 1088,  768,
      979,  980, 1029, 1029, 1029,  768,  981, 1039, 1040, 1041,
      982,  983,  919,  964,  964,  964, 1088, 1131,  832, 1062,
     1040, 1041, 1067, 1068, 1069, 1258,  406,  419,  419,  420,
      419,  419,  419,  419,  421,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  422,  422,  422,  422,
      419,  419,  419,  422,  419,  423,  423,  424,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  419,
      419,  419,  419,  541, 1071,  992,  993, 1087, 1013,  541,
     1257, 1088, 1085, 1085, 1256,  542,  543,  544, 1014, 1255,
      545,  546, 1086, 1086,  547,  548, 1029, 1029, 1029, 1088,
      549, 1039, 1040, 1041,  550,  551,  419,  419,  420,  419,
      419,  419,  419,  421,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  422,  422,  422,  422,  419,
      419,  419,  422,  419,  423,  423,  424,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  419,  419,
      419,  419,  646, 1000,  917, 1001, 1006, 1006, 1006, 1041,
     1040, 1041,  647, 1254, 1002,  458,  458,  458, 1176,  427,
      427,  427,  427,  648, 1003,  459,  951,  919, 1177,  427,
      427,  427,  427,  649, 1231, 1231,  427,  720,  495,  964,
      964,  964, 1253,  720,  720,  720,  442, 1252,  720,  442,
      720, 1089, 1091, 1091, 1091, 1176,  720,  720,  721,  503,
      648,  725,  459, 1003, 1023, 1177,  919,  725,  725,  725,
      649, 1252,  725, 1082,  725,  693, 1075, 1005, 1076, 1247,

      725,  725,  725,  736,  737,  738,  739, 1002,  740,  741,
     1239, 1238,  742,  743, 1029, 1029, 1029, 1003,  744, 1038,
     1184, 1143,  745,  746,  766, 1062, 1040, 1041, 1237, 1236,
      766,  766,  766, 1235, 1234,  766, 1217,  766, 1093, 1093,
     1093, 1233, 1094,  766,  766,  766, 1218, 1217,  459, 1132,
     1068, 1069,  923,  566,  584,  923, 1003, 1218,  777, 1071,
      992,  993,  923, 1232,  777,  777,  777,  530,  873,  777,
      530,  778,  600,  612, 1097,  600,  612,  777,  777,  777,
      924,  924,  925,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  430,

      430,  430,  430,  924,  924,  924,  924,  924,  924,  430,
      430,  430,  430,  924,  924,  924,  430,  924,  430,  430,
      430,  430,  430,  430,  430,  430,  926,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  924,  924,  924,  924, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1076, 1006, 1076, 1230, 1012,
     1012, 1012, 1012, 1012, 1012,  648, 1002,  951, 1229, 1012,
     1012, 1012,  951, 1012,  951,  649, 1003,  964,  964,  964,
     1227, 1079, 1080, 1081, 1081, 1081, 1081, 1081, 1081, 1081,

     1226, 1226, 1136, 1080, 1137, 1137, 1081, 1137, 1012, 1012,
     1012, 1012,  919, 1002,  934,  919, 1002,  934,  919, 1138,
     1139, 1140,  693, 1003,  934, 1003, 1003, 1140, 1140, 1140,
     1141, 1140, 1140, 1140, 1144, 1144, 1144, 1146, 1146, 1146,
      919, 1094, 1245, 1219,  459, 1245, 1246,  459,  919, 1246,
     1210,  919,  919,  818,  919, 1209,  818,  919, 1132, 1068,
     1069,  614, 1003,  618,  614, 1003,  618, 1179, 1139, 1180,
     1208, 1180, 1140, 1180, 1181, 1182, 1183,  428, 1002,  919,
      428, 1207, 1002, 1183, 1183, 1183,  430,  919, 1003,  430,
      442,  919, 1003,  442, 1206,  919, 1183, 1183, 1183, 1187,

     1187, 1187,  530, 1205,  919,  530, 1189, 1189, 1189,  459,
     1094, 1029, 1029, 1029, 1204, 1203,  459,  919, 1212, 1182,
     1213, 1213, 1183, 1213, 1214, 1215, 1216, 1003, 1202, 1002,
      600, 1003, 1002,  600,  919,  873, 1216, 1216, 1216, 1003,
     1201,  612, 1003,  919,  612,  919, 1216, 1216, 1216, 1220,
     1220, 1220, 1223, 1223, 1223,  614,  919,  919,  614,  459,
     1222, 1222, 1222,  618, 1094,  430,  618,  919,  430,  873,
      459, 1240, 1215, 1241, 1241, 1216, 1241,  442, 1003,  873,
      442, 1003, 1002, 1199,  919, 1002, 1242, 1243, 1244, 1244,
     1244, 1244, 1003,  951, 1198, 1003,  919, 1244, 1244, 1244,

      951, 1248, 1248, 1248,  951,  430,  919,  919,  430, 1197,
      919,  459, 1224, 1250, 1250, 1250, 1196, 1094,  919, 1223,
     1223, 1223, 1195,  459, 1260, 1243, 1261, 1261, 1244, 1261,
     1185, 1003, 1194, 1185, 1003, 1002, 1193, 1151, 1002, 1262,
     1263, 1264, 1264, 1264, 1264, 1003,  919, 1192, 1003,  919,
     1264, 1264, 1264, 1192, 1265, 1265, 1265,  919, 1190,  693,
      919, 1186, 1178,  919,  459, 1267, 1267, 1267, 1134, 1094,
     1175,  919, 1273, 1263, 1274,  459, 1275, 1276, 1277, 1224,
     1274, 1264, 1274, 1002, 1003, 1174, 1173, 1003, 1277, 1277,
     1277, 1002, 1172, 1003, 1277, 1277, 1277,  919,  600,  919,

     1171, 1003,  919, 1278, 1278, 1278, 1286, 1287, 1288,  919,
      919,  600, 1170,  459,  600,  919, 1280, 1280, 1280, 1169,
     1094, 1168, 1284, 1276, 1285,  768,  459,  919, 1285, 1277,
     1285, 1167, 1003, 1002,  873, 1166,  919,  873,  873, 1002,
     1003, 1165, 1164, 1003, 1288, 1288, 1288, 1163,  919, 1003,
     1288, 1288, 1288, 1162,  919, 1161, 1109, 1289, 1289, 1289,
     1291, 1291, 1291, 1160, 1094,  919,  919,  459, 1159, 1158,
      459,  919, 1295, 1287, 1296, 1296, 1288, 1296, 1286, 1287,
     1288, 1157, 1003, 1002, 1156, 1155, 1002, 1154, 1003, 1153,
     1288, 1288, 1288, 1003, 1152, 1098, 1003, 1151, 1149,  919,

     1288, 1288, 1288, 1149,  919, 1297, 1297, 1297,  693, 1083,
      919,  919, 1299, 1299, 1299,  459, 1094, 1135, 1295, 1287,
     1296,  919,  459, 1296, 1288, 1296, 1302, 1302, 1302, 1002,
     1073, 1134, 1003, 1133, 1002, 1003,  459, 1068,  919, 1003,
     1130, 1304, 1304, 1304, 1003, 1094, 1307, 1307, 1307, 1129,
      919,  459, 1128, 1309, 1309, 1309,  459, 1094, 1127, 1126,
      919, 1125, 1124,  459, 1312, 1312, 1312, 1314, 1314, 1314,
     1123, 1094, 1121, 1120,  459, 1118, 1117,  459, 1003, 1316,
     1316, 1316, 1116, 1003, 1317, 1317, 1317, 1115, 1094,  459,
     1318, 1318, 1318, 1114,  459, 1319, 1319, 1319, 1113, 1094,

      459, 1320, 1320, 1320, 1112,  459, 1321, 1321, 1321, 1111,
     1094,  459, 1322, 1322, 1322, 1110,  459, 1323, 1323, 1323,
     1109, 1094,  459, 1324, 1324, 1324, 1107,  459, 1325, 1325,
     1325, 1106, 1094,  459, 1326, 1326, 1326, 1105,  459, 1327,
     1327, 1327, 1104, 1094,  459, 1328, 1328, 1328, 1103,  459,
     1329, 1329, 1329, 1102, 1094,  459, 1330, 1330, 1330, 1101,
      459, 1331, 1331, 1331, 1100, 1094,  459, 1332, 1332, 1332,
     1099,  459, 1333, 1333, 1333, 1098, 1094,  459, 1334, 1334,
     1334, 1096,  459, 1335, 1335, 1335, 1096, 1094,  459, 1336,
     1336, 1336,  693,  459, 1337, 1337, 1337, 1090, 1094,  459,

     1338, 1338, 1338, 1019,  459, 1339, 1339, 1339, 1089, 1094,
      459, 1340, 1340, 1340, 1016,  459, 1341, 1341, 1341, 1084,
     1094,  459, 1342, 1342, 1342, 1083,  459, 1343, 1343, 1343,
      432, 1094,  459, 1344, 1344, 1344, 1074,  459, 1345, 1345,
     1345, 1073, 1094,  459, 1346, 1346, 1346, 1072,  459, 1347,
     1347, 1347,  801, 1094,  459, 1348, 1348, 1348,  801,  459,
     1349, 1349, 1349,  992, 1094,  459, 1350, 1350, 1350, 1065,
      459, 1351, 1351, 1351, 1064, 1094,  459, 1352, 1352, 1352,
     1061,  459, 1353, 1353, 1353, 1060, 1094,  459, 1354, 1354,
     1354, 1059,  459, 1355, 1355, 1355, 1058, 1094,  459, 1356,

     1356, 1356, 1057,  459, 1357, 1357, 1357, 1056, 1094,  459,
     1358, 1358, 1358, 1055,  459, 1359, 1359, 1359, 1054, 1094,
      459, 1360, 1360, 1360, 1053,  459, 1361, 1361, 1361, 1052,
     1094,  459, 1362, 1362, 1362, 1051,  459, 1363, 1363, 1363,
     1050, 1094,  459, 1364, 1364, 1364, 1049,  459, 1365, 1365,
     1365, 1048, 1094,  459, 1366, 1366, 1366, 1047,  459, 1367,
     1367, 1367, 1046, 1094,  459, 1368, 1368, 1368, 1045,  459,
     1369, 1369, 1369, 1044, 1094,  459, 1370, 1370, 1370, 1043,
      459, 1371, 1371, 1371, 1042, 1094,  459, 1372, 1372, 1372,
     1037,  459, 1373, 1373, 1373, 1036, 1094,  459, 1374, 1374,

     1374, 1035,  459, 1375, 1375, 1375, 1034, 1094,  459, 1376,
     1376, 1376, 1033,  459, 1377, 1377, 1377, 1032, 1094,  459,
     1378, 1378, 1378, 1031,  459, 1379, 1379, 1379,  861, 1094,
      459, 1380, 1380, 1380, 1030,  459, 1381, 1381, 1381, 1028,
     1094,  459, 1382, 1382, 1382, 1027,  459, 1383, 1383, 1383,
     1026, 1094,  459, 1384, 1384, 1384, 1025,  459, 1385, 1385,
     1385, 1025, 1094,  459, 1386, 1386, 1386,  693,  459, 1387,
     1387, 1387,  941, 1094,  459, 1388, 1388, 1388,  675,  459,
     1389, 1389, 1389,  675, 1094,  459, 1390, 1390, 1390, 1019,
      459, 1391, 1391, 1391, 1018, 1094,  459, 1392, 1392, 1392,

     1017,  459, 1393, 1393, 1393, 1016, 1094,  459, 1394, 1394,
     1394, 1015,  459, 1395, 1395, 1395,  822, 1094,  459, 1396,
     1396, 1396, 1009,  459, 1397, 1397, 1397, 1008, 1094,  459,
     1398, 1398, 1398,  915,  459, 1399, 1399, 1399,  998, 1094,
      459, 1400, 1400, 1400,  997,  459, 1401, 1401, 1401,  996,
     1094,  459, 1402, 1402, 1402,  801,  459, 1403, 1403, 1403,
      984, 1094,  459, 1404, 1404, 1404,  949,  459, 1405, 1405,
     1405,  893, 1094,  459, 1406, 1406, 1406,  892,  459, 1407,
     1407, 1407,  768, 1094,  459, 1408, 1408, 1408,  887,  459,
     1409, 1409, 1409,  886, 1094,  459, 1410, 1410, 1410,  974,

      459, 1411, 1411, 1411,  973, 1094,  459, 1412, 1412, 1412,
      972,  459, 1413, 1413, 1413,  971, 1094,  459, 1414, 1414,
     1414,  970,  459, 1415, 1415, 1415,  969, 1094,  459, 1416,
     1416, 1416,  968,  459, 1417, 1417, 1417,  967, 1094,  459,
     1418, 1418, 1418,  966,  459, 1419, 1419, 1419,  965, 1094,
      459, 1420, 1420, 1420,  963,  459, 1421, 1421, 1421,  962,
     1094,  459, 1422, 1422, 1422,  961,  459, 1423, 1423, 1423,
      960, 1094,  459, 1424, 1424, 1424,  959,  459, 1425, 1425,
     1425,  958, 1094,  459, 1426, 1426, 1426,  957,  459, 1427,
     1427, 1427,  956, 1094,  459, 1428, 1428, 1428,  955,  459,

     1429, 1429, 1429,  954, 1094,  459, 1430, 1430, 1430,  953,
      459, 1431, 1431, 1431,  952, 1094,  459, 1432, 1432, 1432,
      857,  459, 1433, 1433, 1433,  503, 1094,  459, 1434, 1434,
     1434,  947,  459, 1435, 1435, 1435,  947, 1094,  459, 1436,
     1436, 1436,  693,  459, 1437, 1437, 1437,  675, 1094,  459,
     1438, 1438, 1438,  933,  459, 1439, 1439, 1439,  932, 1094,
      459, 1440, 1440, 1440,  931,  459, 1441, 1441, 1441,  930,
     1094,  459,  929, 1442, 1442, 1442,  459, 1094, 1443, 1443,
     1443,  928, 1094,  459,  927, 1444, 1444, 1444,  459, 1094,
     1445, 1445, 1445,  922, 1094,  459,  921, 1446, 1446, 1446,

      459, 1094, 1447, 1447, 1447,  818, 1094,  459,  915, 1447,
     1447, 1447,  459, 1094,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  446,
      446,  446,  426,  446,  446,  913,  446,  446,  912,  446,
      446,  446,  446,  911,  446,  446,  446,  446,  446,  446,
      447,  447,  447,  812,  447,  447,  447,  447,  447,  812,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  450,  450,  450,  801,  450,  450,  801,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      812,  450,  454,  454,  454,  907,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  455,  455,  455,  898,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  460,  460,  460,  897,  896,  895,
      894,  893,  460,  892,  889,  888,  566,  460,  566,  887,
      460,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  469,  469,  469,  886,  883,  469,  882,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,

      469,  881,  469,  473,  473,  473,  880,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  474,  474,  474,  879,  878,  474,
      877,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  478,  478,  478,  876,  875,
      478,  478,  478,  478,  874,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  869,  478,  482,  482,  482,  868,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,  483,  483,
      867,  866,  483,  865,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  864,  483,  487,  487,
      487,  863,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      860,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      489,  489,  859,  489,  489,  489,  489,  489,  489,  489,
      858,  857,  489,  489,  489,  489,  489,  489,  489,  812,
      489,  494,  494,  494,  730,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  501,  856,  503,  503,  503,  852,  851,  851,

      501,  849,  848,  847,  846,  501,  693,  840,  501,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  840,  502,
      512,  512,  675,  675,  672,  835,  834,  833,  512,  832,
      831,  830,  829,  512,  828,  827,  512,  512,  522,  826,
      825,  824,  823,  822,  821,  820,  818,  813,  812,  522,
      811,  522,  810,  627,  522,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  536,  801,  536,  619,
      536,  536,  536,  536,  536,  536,  536,  536,  797,  536,

      796,  536,  536,  795,  536,  561,  561,  561,  794,  561,
      561,  561,  561,  561,  561,  561,  561,  793,  561,  561,
      561,  561,  561,  561,  561,  561,  565,  565,  565,  792,
      565,  565,  565,  565,  565,  565,  565,  565,  791,  565,
      565,  565,  565,  565,  790,  565,  565,  583,  583,  583,
      789,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  601,  583,  780,  583,  584,  584,
      584,  773,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  772,  584,  584,  582,  584,  581,  584,  585,
      767,  585,  566,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  566,  585,  762,  585,
      591,  761,  591,  560,  591,  591,  591,  591,  591,  591,
      591,  591,  559,  591,  591,  591,  591,  591,  591,  591,
      591,  596,  756,  596,  755,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  617,  617,  617,  754,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  621,  621,  621,  753,  621,  621,  621,
      621,  621,  752,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  629,  751,  750,  629,  749,
      748,  629,  747,  629,  629,  531,  629,  730,  629,  526,
      729,  629,  630,  630,  630,  728,  630,  518,  630,  630,
      630,  630,  630,  630,  517,  630,  516,  630,  630,  517,
      630,  727,  630,  663,  663,  663,  507,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  666,  666,  666,  503,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  446,  446,  446,  712,  446,

      446,  712,  446,  446,  464,  446,  446,  446,  446,  693,
      446,  446,  446,  446,  446,  446,  674,  674,  674,  687,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  675,  674,  676,  676,  676,
      670,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  450,  450,
      450,  662,  450,  450,  661,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  660,  450,  679,
      679,  679,  659,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      683,  683,  683,  655,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  688,  688,  688,  652,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  460,  460,  460,  651,  645,  429,  418,  633,
      460,  418,  418,  418,  622,  460,  418,  418,  460,  692,
      692,  613,  692,  692,  692,  692,  692,  692,  692,  692,
      418,  692,  692,  692,  692,  692,  692,  692,  611,  692,
      469,  469,  469,  610,  609,  469,  608,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  607,

      469,  474,  474,  474,  606,  605,  474,  604,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  478,  478,  478,  603,  418,  478,  478,  478,
      478,  599,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  595,  478,  483,  483,  483,  592,  418,  483,  582,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  581,  483,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  572,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  711,  711,  566,  711,  711,
      711,  711,  711,  711,  711,  567,  566,  711,  711,  711,

      711,  711,  711,  711,  566,  711,  494,  494,  494,  566,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  501,  564,  562,
      560,  559,  540,  537,  418,  501,  418,  418,  526,  523,
      501,  519,  518,  501,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  517,  502,  512,  512,  516,  503,  503,
      503,  503,  493,  512,  490,  486,  481,  477,  512,  472,
      468,  512,  512,  522,  457,  418,  456,  453,  449,  448,
      445,  418,  439,  438,  522,  432,  522,  431,  418,  522,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  536,  429,  536,  418,  536,  536,  536,  536,  536,
      536,  536,  536,  418,  536, 1448,  536,  536,  163,  536,
      561,  561,  561, 1448,  561,  561,  561,  561,  561,  561,
      561,  561, 1448,  561,  561,  561,  561,  561,  561,  561,
      561,  565,  565,  565, 1448,  565,  565,  565,  565,  565,
      565,  565,  565, 1448,  565,  565,  565,  565,  565, 1448,
      565,  565,  583,  583,  583, 1448,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583, 1448,

      583, 1448,  583,  584,  584,  584, 1448,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584, 1448,  584,  584,
     1448,  584, 1448,  584,  585, 1448,  585, 1448,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585, 1448,  585, 1448,  585,  591, 1448,  591, 1448,  591,
      591,  591,  591,  591,  591,  591,  591, 1448,  591,  591,
      591,  591,  591,  591,  591,  591,  596, 1448,  596, 1448,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  800,  800,  800,
     1448,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800, 1448,  800,  802,  802,
      802, 1448,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  629,
     1448, 1448,  629, 1448, 1448,  629, 1448,  629,  629, 1448,
      629, 1448,  629, 1448, 1448,  629,  630,  630,  630, 1448,
      630, 1448,  630,  630,  630,  630,  630,  630, 1448,  630,
     1448,  630,  630, 1448,  630, 1448,  630,  814,  814,  814,
     1448,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  817,  817,
      817, 1448,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  428,
     1448, 1448, 1448, 1448, 1448, 1448, 1448,  428, 1448, 1448,
     1448, 1448,  428, 1448, 1448,  428,  663,  663,  663, 1448,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  666,  666,  666,
     1448,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  836,  836,
      836, 1448,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836, 1448,  836,  446,
      446,  446, 1448,  446,  446, 1448,  446,  446, 1448,  446,

      446,  446,  446, 1448,  446,  446,  446,  446,  446,  446,
      679,  679,  679, 1448,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  681,  681,  681, 1448,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  683,  683,  683, 1448,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  685,  685,  685, 1448,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  450,  450,  450, 1448,  450,  450,

     1448,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450, 1448,  450,  844,  844, 1448,  844,  844,
      844,  844,  844,  844,  844,  844, 1448,  844,  844,  844,
      844,  844,  844,  844, 1448,  844,  460,  460,  460, 1448,
     1448, 1448, 1448, 1448,  460, 1448, 1448, 1448, 1448,  460,
     1448, 1448,  460,  469,  469,  469, 1448, 1448,  469, 1448,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469, 1448,  469,  474,  474,  474, 1448, 1448,  474,
     1448,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  478,  478,  478, 1448, 1448,

      478,  478,  478,  478, 1448,  478,  478,  478,  478,  478,
      478,  478,  478,  478, 1448,  478,  483,  483,  483, 1448,
     1448,  483, 1448,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483, 1448,  483,  850,  850, 1448,
      850,  850,  850,  850,  850,  850,  850, 1448, 1448,  850,
      850,  850,  850,  850,  850,  850, 1448,  850,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488, 1448,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  494,
      494,  494, 1448,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502, 1448,
      502,  536, 1448,  536, 1448,  536,  536,  536,  536,  536,
      536,  536,  536, 1448,  536, 1448,  536,  536, 1448,  536,
      561,  561,  561, 1448,  561,  561,  561,  561,  561,  561,
      561,  561, 1448,  561,  561,  561,  561,  561,  561,  561,
      561,  565,  565,  565, 1448,  565,  565,  565,  565,  565,
      565,  565,  565, 1448,  565,  565,  565,  565,  565, 1448,
      565,  565,  585, 1448,  585, 1448,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585, 1448,

      585, 1448,  585,  583,  583,  583, 1448,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
     1448,  583, 1448,  583,  591, 1448,  591, 1448,  591,  591,
      591,  591,  591,  591,  591,  591, 1448,  591,  591,  591,
      591,  591,  591,  591,  591,  596, 1448,  596, 1448,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  908,  908,  908, 1448,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908, 1448,  908,  630,  630,  630,
     1448,  630, 1448,  630,  630,  630,  630,  630,  630, 1448,

      630, 1448,  630,  630, 1448,  630, 1448,  630,  814,  814,
      814, 1448,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  914,
      914,  914, 1448,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      817,  817,  817, 1448,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  428, 1448, 1448, 1448, 1448, 1448, 1448, 1448,  428,
     1448, 1448, 1448, 1448,  428, 1448, 1448,  428,  663,  663,
      663, 1448,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  442,
     1448, 1448,  442, 1448, 1448, 1448, 1448,  442, 1448, 1448,
     1448, 1448,  442, 1448, 1448,  442,  939,  939,  939, 1448,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939, 1448,  939,  679,  679,  679,
     1448,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  944,  944,
     1448,  944,  944,  944,  944,  944,  944,  944,  944, 1448,
      944,  944,  944,  944,  944,  944,  944, 1448,  944,  946,
      946, 1448,  946,  946,  946,  946,  946,  946,  946, 1448,

     1448,  946,  946,  946,  946,  946,  946,  946, 1448,  946,
      994,  994,  994, 1448,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994, 1448,
      994,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999, 1022, 1022, 1448, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1448, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1448, 1022, 1024, 1024, 1448, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1448, 1448, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1448, 1024, 1092, 1092, 1448, 1092, 1092, 1092,

     1092, 1092, 1092, 1092, 1092, 1448, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1448, 1092, 1095, 1095, 1448, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1448, 1448, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1448, 1095, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1142, 1448, 1448,
     1448, 1142, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1142, 1448, 1142, 1145, 1145, 1448, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1448, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1448, 1145, 1147, 1147, 1147, 1147, 1147,

     1147, 1448, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1148, 1148, 1448, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1448, 1448, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1448, 1148, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1188, 1188,
     1448, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1448,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1448, 1188, 1191,
     1191, 1448, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1448,
     1448, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1448, 1191,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1448, 1200, 1200, 1448, 1200,
     1200, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1448, 1211, 1211, 1448,
     1211, 1211, 1221, 1221, 1448, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1448, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1448, 1221, 1225, 1225, 1448, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1448, 1448, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1448, 1225, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1448,

     1228, 1228, 1448, 1228, 1228,  817,  817,  817, 1448,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817, 1249, 1249, 1448, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1448, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1448, 1249, 1251, 1251, 1448,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1448, 1448, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1448, 1251, 1266, 1266,
     1448, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1448,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1448, 1266, 1268,
     1268, 1448, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1448,

     1448, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1448, 1268,
     1279, 1279, 1448, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1448, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1448,
     1279, 1281, 1281, 1448, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1448, 1448, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1448, 1281, 1290, 1290, 1448, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1448, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1448, 1290, 1292, 1292, 1448, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1448, 1448, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1448, 1292, 1298, 1298, 1448, 1298, 1298, 1298,

     1298, 1298, 1298, 1298, 1298, 1448, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1448, 1298, 1300, 1300, 1448, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1448, 1448, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1448, 1300, 1303, 1303, 1448, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1448, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1448, 1303, 1305, 1305, 1448,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1448, 1448, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1448, 1305, 1308, 1308,
     1448, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1448,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1448, 1308, 1310,

     1310, 1448, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1448,
     1448, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1448, 1310,
     1313, 1313, 1448, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1448, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1448,
     1313,   83, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448
    } ;

static const flex_int16_t yy_chk[7309] =
    {   0,
        0,    1,    0,    1,    1,    2,  899,    2,    2,    3,
     1300,    3,    3,  157,  157,   88,   98,  108,    1,   88,
       98,  108,    2,  198,  122,  134,    3,    1,  122,  134,
      141,    2,  204,  414,  141,    3,  100,  100,  100,  100,
      151,  167,  204,  198,  151,  167,  100,  100,  100,  100,
      113,  114,  113,  100,  125,  899,  125,   97,  114,  114,
      173,  414,   97,  179,  173,    1,  186,  179,  195,    2,
      186, 1301,  195,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,  679,    9,    9,   10,    9,   10,   10,
      199,   10,    9,  200,  203,  214,   10,  211,  211,    9,
      233,  233,   11,   10,   11,   11,  214,   11,    9,  202,

      199,  679,   10,  200,  203,   12,  210,   12,   12,   11,
       12,  154,  154,  154,  155,  155,  155,  791,   11,  202,
      202,  154,   12,  223,  155,   11,  209,  201,  223, 1303,
      210,   12,  159,  159,  159,  201,    9,  209,   12,  201,
       10,  209,  159,  155,  156,  156,  156,  201,  156,  219,
     1305,  159,  417,  229,  156,  239,   11,  229,  244,  239,
      280,  159,  248,  244,  219,  417,  248,  280,  791,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   17,  260,   17,   17,
       18,   17,   18,   18,   19,   18,   19,   19,  256,   19,
      271,  416,  256,   17,  271,  213,  213,   18,  286,  286,
      416,   19,   17,  260,  279,  213,   18,  285,  279,   17,
       19,  285,   20,   18,   20,   20,   21,   20,   21,   21,
       22,  295,   22,   22,  279,  295,   21,  213,  291,   20,
       22,  303,  313,   21,  796,  303,  313,   22,   20,  319,

       17, 1306,   21,  319,   18,  291,   22,  294,   19,   21,
      282,  282,   23,   22,   23,   23,   24,   23,   24,   24,
       25,   24,   25,   25,  294,  158,  158,  158,  411,   23,
      298,  262,   25,   24,  796,  158,   20,   25,   23,  411,
       21,  282,   24,  262,   22,   23,   25,  298,   26,   24,
       26,   26,   27,  296,   27,   27,   28,   27,   28,   28,
       26,   28,  441,  326,  345,   26,  262,  326,  345,   27,
      296,  330,  330,   28,   26,  441,   23,   27,   27,  296,
       24,   28,   28,  158,   25,  297,  356,  589,  361,  589,
      356,  297,  361,  262,  366,  368,  368,  297,  366,  297,

      378,  387,  389,  389,  378,  387,  395,  403,  428,  412,
      395,  403,   26,  412,  448,  448,   27,  634,  428,  634,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31, 1308,   31,
       31,   32,  429,   32,   32,  405,  433,   39,  287,   39,

       39,  405,  429,  440,   31,  443,  433,  405,   32,  405,
      287, 1310,  440,   31,   39,  443,  471,   32,  476,  418,
       31,  452,  452,   39,   32,  418,  418,  418,  480,  471,
      418,  476,  418,  287,  452,  451,  451,  456,  418,  418,
      418,  480,  524,  429,  451,  456,  456,  524,  622,  622,
      452,   31,  458,  458,  458,   32,   33,   33,   33,   33,
      287,   39,  458,   33,  451,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   40,   40,   40,   40, 1311,   43,   40,   43,   43,
      263,   44,  470,   44,   44,  460,  460,  460,   40,   43,
      475,  470,  263,   43,   44,  460,  263,   40,   44,  475,
      479,   49,   43,   49,   49,  534,  485,   44,  484,  479,
      534,  435,  884,  288,  435,  263,  499,  484,   49,  485,
       51,  435,   51,   51,  884,  288,  499,   49,   49,  288,
       52, 1313,   52,   52,   49,   40,   41,   51,   41,   41,
       43,   50,  263,   50,   50,   44,   51,   52,  288,   41,

      435,  492,  491,   41, 1440,  514,   52,  494,   50,  571,
      435,  491,   41,   41,  492,   49,  514,   50,   50,   41,
      520,  522,   41,  445,   50,  288,  445,  494,  466,  466,
      466,   51,   51,  445,   51,  520,  522,  504,  466,  504,
      571,   52,   52,   53,   52,   53,   53,   41,  504,   41,
       41,   42,   42,   42,   42,   50,   53,  461,  461,  461,
       53,  461,  445,  501,   42,  496,  496,  461,   42,   53,
      509,  509,  445,  501,  496,  552,  528,   42,   42,  422,
      422,  422,  422,  466,   42,  528,  496,   42,  509,  422,
      422,  422,  422,  505,  553,  505,  422,  529,  539,  592,

      538,  552, 1298,  553,  592,  647,  647,   53,  505,  538,
      529,  539,   42,  538,   42,   42,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   47,  573,   47,   47,  781,   54,  563,   54,
       54,  781,  573,  554,   55,   47,   55,   55, 1294,   47,

       54,  563,  512,  512,   54,  554,  497,  497,   47,   47,
      637,   55,  512,   54,   56,   47,   56,   56,   47,  497,
       55,  637,  558,  467,  467,  467,  586,  497,  554, 1293,
      555,   56,  575,  467,  512,  586,   63,  580,   63,   63,
       56,   63,  555,   47,  576,   47,   47,   48,   48,   48,
       48,   54,  467,   63,  583,  554,  576,  558,   55,  575,
       48,  593,   63,  587,   48,  555,  597, 1292,  568,   63,
      593,  583,  580,   48,   48,  597,  587,  615,   56,  576,
       48,  568,  449,   48,  558,  594,  615,  575,  449,  449,
      449,  598,  555,  449,  616,  449,  623,  568,  594,  580,

       63,  449,  449,  449,  598,  623,  576,  616,   48, 1290,
       48,   48,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   61,  453,  624, 1474,  631,  646,
     1474,  453,  453,  453, 1283,  624,  453,  631,  453,  646,
       61,   61,   61,   61,  453,  453,  453,   61, 1282,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   64,  577,   64,   64,   65,   64,   65,

       65,   66,  625,   66,   66,  900,  577,   65,  632,  792,
       64,   66,  648,  723,   65,  625,  814,  814,   66,   64,
      680,  632,  648,   65,  683,  472,   64,   66,  723,  577,
       65,  472,  472,  472,   66,  890,  472,   69,  472,   69,
       69,  677,  717,  682,  472,  472,  472,  890,  680,  677,
      677,  690,  683,  792,   69,  682,  577,   64,  900,  690,
      690,   65,  717,   69,  747,   66,   67,   67,   67,   67,
       69,  682, 1281,   67,  747,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,  719,

       70,   69,   70,   70,  684,   73,  650,   73,   73,  720,
       73,  691,  691,  691, 1279,   73,  650,   70,  739,  719,
      748,  691,   73,  794,  718,   74,   70,   74,   74,  720,
       74,   73,  684,   70,  727,   74,  718,  748,   73,  760,
      650,  793,   74,  739,  718,   81, 1272,   81,   81,  777,
       81,   74,  839,  694,  694,  694,  727,  794,   74,  726,
      726,  726,   81,  694,   70,   71,  777,   71,   71,   73,
       71,   81,  739,  859,  760,   71,   71,   71,   81, 1271,
      839,   82,   71,   82,   82,  902,   82,  759,  770,   74,
      859,   71,   71,  694, 1270,  793,  858,  477,   82,  759,

      770,  760,  771,  477,  477,  477,  858,   82,  477,   81,
      477,  803,  790,  903,   82, 1269,  477,  477,  477,  803,
      803,  822,  759,  770,  822,  816,  816,  816,  819,   71,
       72,  822,   72,   72,  902,   72, 1268,  771,  819,  885,
       72,   72,   72, 1266,  905,   82,  816,   72,  790,  759,
      770,  832,  481,  903,  832,  891,   72,   72,  481,  481,
      481,  832,  790,  481,  771,  481,  885,  834,  486, 1259,
      834,  481,  481,  481,  486,  486,  486,  834, 1258,  486,
      819,  486,  891,  835,  905,  816,  835,  486,  486,  486,
      818,  818,  818,  835,   72,   75,   75,  833,   75,   75,

      833,   75,   75,   75,   75,  901,   75,  833,  834,   75,
       75,  818,  925,   75,  873,  873,  873,  838,   75,   75,
       75,   75,   75,   75,  835,  838,  838,  493,   75,   75,
       75,  853,   75,  493,  493,  493,  842,  988,  493,  928,
      493,  833, 1002, 1002,  842,  842,  493,  493,  493,  928,
      818,  853,  901,  843,  843,  843,  925,   75,   75,   75,
       75,   76,   76,  843,   76,   76,  935,   76,   76,   76,
       76, 1257,   76, 1051, 1051,   76,   76,  988, 1256,   76,
      845,  845,  845,  910,   76,   76,   76,   76,   76,   76,
      845,  910,  910,  540,   76,   76,   76, 1255,   76,  540,

      540,  540, 1010,  990,  540,  999,  540,  906,  906,  906,
      935,  920,  540,  540,  540,  999,  916,  916,  916, 1254,
      985,  920, 1003,   76,   76,   76,   76,   79,  564,   79,
       79,   79, 1003,  845,  564,  564,  564,  916, 1253,  564,
       79,  564,  937, 1252,   79,  937, 1010,  564,  564,  564,
      595, 1498,  937,   79,   79,  990,  595,  595,  595,  985,
       79,  595, 1498,  595, 1054,  938,  599,  920,  938,  595,
      595,  595,  599,  599,  599,  938,  916,  599, 1251,  599,
     1249, 1054,  917,  917,  917,  599,  599,  599,  943,  943,
      943,   79,   80,  633,   80,   80,   80, 1246,  943,  633,

      633,  633, 1239,  917,  633,   80,  633,  936, 1066,   80,
      936, 1238,  633,  633,  633, 1077, 1077,  936,   80,   80,
     1475,  888,  888, 1475, 1016,   80,  888,  888, 1016, 1237,
      888,  888,  951,  951,  951, 1236,  888,  962,  962,  962,
      888,  888,  917,  964,  964,  964, 1016, 1066,  936,  984,
      984,  984,  989,  989,  989, 1235,   80,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  258,  991,  991,  991, 1087, 1013,  258,
     1234, 1087, 1015, 1085, 1233,  258,  258,  258, 1013, 1232,
      258,  258, 1015, 1085,  258,  258, 1029, 1029, 1029, 1087,
      258, 1039, 1039, 1039,  258,  258,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  427,  915,  915,  915,  918,  918,  918, 1041,
     1041, 1041,  427, 1230,  915,  945,  945,  945, 1131,  427,
      427,  427,  427, 1007,  915,  945, 1229,  918, 1131,  427,
      427,  427,  427, 1007, 1202, 1202,  427,  498,  498,  961,
      961,  961, 1227,  498,  498,  498, 1476, 1226,  498, 1476,
      498, 1089, 1021, 1021, 1021, 1176,  498,  498,  498,  506,
     1141,  506, 1021,  915,  945, 1176,  918,  506,  506,  506,
     1141, 1225,  506, 1007,  506, 1221, 1000, 1000, 1000, 1219,

      506,  506,  506,  541,  541,  541,  541, 1000,  541,  541,
     1210, 1209,  541,  541, 1026, 1026, 1026, 1000,  541,  961,
     1141, 1089,  541,  541,  569, 1062, 1062, 1062, 1208, 1207,
      569,  569,  569, 1206, 1205,  569, 1184,  569, 1023, 1023,
     1023, 1204, 1023,  569,  569,  569, 1184, 1217, 1023, 1067,
     1067, 1067, 1084,  569,  588, 1084, 1000, 1217,  588, 1071,
     1071, 1071, 1084, 1203,  588,  588,  588, 1499, 1201,  588,
     1499,  588, 1509, 1510, 1026, 1509, 1510,  588,  588,  588,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927, 1001, 1001, 1001, 1199,  927,
      927,  927,  927,  927,  927, 1082, 1001, 1198, 1197,  927,
      927,  927, 1196,  927, 1195, 1082, 1001, 1109, 1109, 1109,
     1193, 1004, 1004, 1004, 1005, 1005, 1005, 1006, 1006, 1006,

     1192, 1191, 1075, 1075, 1075, 1076, 1076, 1076,  927,  927,
      927,  927, 1004, 1075, 1090, 1005, 1076, 1090, 1006, 1079,
     1079, 1079, 1188, 1075, 1090, 1001, 1076, 1080, 1080, 1080,
     1082, 1081, 1081, 1081, 1091, 1091, 1091, 1093, 1093, 1093,
     1079, 1093, 1218, 1186, 1091, 1245, 1218, 1093, 1080, 1245,
     1175, 1004, 1081, 1218, 1005, 1174, 1245, 1006, 1132, 1132,
     1132, 1511, 1075, 1513, 1511, 1076, 1513, 1136, 1136, 1136,
     1173, 1137, 1137, 1137, 1138, 1138, 1138, 1518, 1136, 1079,
     1518, 1172, 1137, 1139, 1139, 1139, 1519, 1080, 1136, 1519,
     1522, 1081, 1137, 1522, 1171, 1138, 1140, 1140, 1140, 1144,

     1144, 1144, 1543, 1170, 1139, 1543, 1146, 1146, 1146, 1144,
     1146, 1151, 1151, 1151, 1169, 1168, 1146, 1140, 1179, 1179,
     1179, 1180, 1180, 1180, 1181, 1181, 1181, 1136, 1167, 1179,
     1553, 1137, 1180, 1553, 1138, 1166, 1182, 1182, 1182, 1179,
     1165, 1554, 1180, 1139, 1554, 1181, 1183, 1183, 1183, 1187,
     1187, 1187, 1190, 1190, 1190, 1555, 1140, 1182, 1555, 1187,
     1189, 1189, 1189, 1556, 1189, 1564, 1556, 1183, 1564, 1164,
     1189, 1212, 1212, 1212, 1213, 1213, 1213, 1567, 1179, 1163,
     1567, 1180, 1212, 1161, 1181, 1213, 1214, 1214, 1214, 1215,
     1215, 1215, 1212, 1160, 1159, 1213, 1182, 1216, 1216, 1216,

     1158, 1220, 1220, 1220, 1157, 1599, 1183, 1214, 1599, 1156,
     1215, 1220, 1190, 1222, 1222, 1222, 1155, 1222, 1216, 1223,
     1223, 1223, 1154, 1222, 1240, 1240, 1240, 1241, 1241, 1241,
     1618, 1212, 1153, 1618, 1213, 1240, 1152, 1150, 1241, 1242,
     1242, 1242, 1243, 1243, 1243, 1240, 1214, 1149, 1241, 1215,
     1244, 1244, 1244, 1148, 1248, 1248, 1248, 1216, 1147, 1145,
     1242, 1143, 1135, 1243, 1248, 1250, 1250, 1250, 1134, 1250,
     1129, 1244, 1260, 1260, 1260, 1250, 1262, 1262, 1262, 1223,
     1261, 1261, 1261, 1260, 1240, 1128, 1127, 1241, 1263, 1263,
     1263, 1261, 1126, 1260, 1264, 1264, 1264, 1262, 1592, 1242,

     1125, 1261, 1243, 1265, 1265, 1265, 1275, 1275, 1275, 1263,
     1244, 1592, 1124, 1265, 1592, 1264, 1267, 1267, 1267, 1123,
     1267, 1122, 1273, 1273, 1273, 1121, 1267, 1275, 1274, 1274,
     1274, 1120, 1260, 1273, 1118, 1117, 1262, 1116, 1115, 1274,
     1261, 1114, 1113, 1273, 1276, 1276, 1276, 1112, 1263, 1274,
     1277, 1277, 1277, 1111, 1264, 1110, 1108, 1278, 1278, 1278,
     1280, 1280, 1280, 1107, 1280, 1276, 1275, 1278, 1106, 1105,
     1280, 1277, 1284, 1284, 1284, 1285, 1285, 1285, 1286, 1286,
     1286, 1104, 1273, 1284, 1103, 1102, 1285, 1101, 1274, 1100,
     1287, 1287, 1287, 1284, 1099, 1098, 1285, 1097, 1096, 1286,

     1288, 1288, 1288, 1095, 1276, 1289, 1289, 1289, 1092, 1083,
     1277, 1287, 1291, 1291, 1291, 1289, 1291, 1074, 1295, 1295,
     1295, 1288, 1291, 1296, 1296, 1296, 1297, 1297, 1297, 1295,
     1073, 1072, 1284, 1070, 1296, 1285, 1297, 1069, 1286, 1295,
     1063, 1299, 1299, 1299, 1296, 1299, 1302, 1302, 1302, 1061,
     1287, 1299, 1060, 1304, 1304, 1304, 1302, 1304, 1059, 1058,
     1288, 1057, 1056, 1304, 1307, 1307, 1307, 1309, 1309, 1309,
     1055, 1309, 1053, 1052, 1307, 1050, 1049, 1309, 1295, 1312,
     1312, 1312, 1048, 1296, 1314, 1314, 1314, 1047, 1314, 1312,
     1316, 1316, 1316, 1046, 1314, 1317, 1317, 1317, 1045, 1317,

     1316, 1318, 1318, 1318, 1044, 1317, 1319, 1319, 1319, 1043,
     1319, 1318, 1320, 1320, 1320, 1042, 1319, 1321, 1321, 1321,
     1038, 1321, 1320, 1322, 1322, 1322, 1037, 1321, 1323, 1323,
     1323, 1036, 1323, 1322, 1324, 1324, 1324, 1035, 1323, 1325,
     1325, 1325, 1034, 1325, 1324, 1326, 1326, 1326, 1033, 1325,
     1327, 1327, 1327, 1032, 1327, 1326, 1328, 1328, 1328, 1031,
     1327, 1329, 1329, 1329, 1030, 1329, 1328, 1330, 1330, 1330,
     1028, 1329, 1331, 1331, 1331, 1027, 1331, 1330, 1332, 1332,
     1332, 1025, 1331, 1333, 1333, 1333, 1024, 1333, 1332, 1334,
     1334, 1334, 1022, 1333, 1335, 1335, 1335, 1020, 1335, 1334,

     1336, 1336, 1336, 1019, 1335, 1337, 1337, 1337, 1018, 1337,
     1336, 1338, 1338, 1338, 1017, 1337, 1339, 1339, 1339, 1011,
     1339, 1338, 1340, 1340, 1340, 1009, 1339, 1341, 1341, 1341,
     1008, 1341, 1340, 1342, 1342, 1342,  998, 1341, 1343, 1343,
     1343,  997, 1343, 1342, 1344, 1344, 1344,  996, 1343, 1345,
     1345, 1345,  995, 1345, 1344, 1346, 1346, 1346,  994, 1345,
     1347, 1347, 1347,  993, 1347, 1346, 1348, 1348, 1348,  987,
     1347, 1349, 1349, 1349,  986, 1349, 1348, 1350, 1350, 1350,
      983, 1349, 1351, 1351, 1351,  982, 1351, 1350, 1352, 1352,
     1352,  981, 1351, 1353, 1353, 1353,  980, 1353, 1352, 1354,

     1354, 1354,  979, 1353, 1355, 1355, 1355,  978, 1355, 1354,
     1356, 1356, 1356,  977, 1355, 1357, 1357, 1357,  976, 1357,
     1356, 1358, 1358, 1358,  975, 1357, 1359, 1359, 1359,  974,
     1359, 1358, 1360, 1360, 1360,  973, 1359, 1361, 1361, 1361,
      972, 1361, 1360, 1362, 1362, 1362,  971, 1361, 1363, 1363,
     1363,  970, 1363, 1362, 1364, 1364, 1364,  969, 1363, 1365,
     1365, 1365,  968, 1365, 1364, 1366, 1366, 1366,  967, 1365,
     1367, 1367, 1367,  966, 1367, 1366, 1368, 1368, 1368,  965,
     1367, 1369, 1369, 1369,  963, 1369, 1368, 1370, 1370, 1370,
      960, 1369, 1371, 1371, 1371,  959, 1371, 1370, 1372, 1372,

     1372,  958, 1371, 1373, 1373, 1373,  957, 1373, 1372, 1374,
     1374, 1374,  956, 1373, 1375, 1375, 1375,  955, 1375, 1374,
     1376, 1376, 1376,  954, 1375, 1377, 1377, 1377,  953, 1377,
     1376, 1378, 1378, 1378,  952, 1377, 1379, 1379, 1379,  950,
     1379, 1378, 1380, 1380, 1380,  949, 1379, 1381, 1381, 1381,
      948, 1381, 1380, 1382, 1382, 1382,  947, 1381, 1383, 1383,
     1383,  946, 1383, 1382, 1384, 1384, 1384,  944, 1383, 1385,
     1385, 1385,  942, 1385, 1384, 1386, 1386, 1386,  940, 1385,
     1387, 1387, 1387,  939, 1387, 1386, 1388, 1388, 1388,  933,
     1387, 1389, 1389, 1389,  932, 1389, 1388, 1390, 1390, 1390,

      931, 1389, 1391, 1391, 1391,  930, 1391, 1390, 1392, 1392,
     1392,  929, 1391, 1393, 1393, 1393,  926, 1393, 1392, 1394,
     1394, 1394,  922, 1393, 1395, 1395, 1395,  921, 1395, 1394,
     1396, 1396, 1396,  914, 1395, 1397, 1397, 1397,  913, 1397,
     1396, 1398, 1398, 1398,  912, 1397, 1399, 1399, 1399,  911,
     1399, 1398, 1400, 1400, 1400,  908, 1399, 1401, 1401, 1401,
      896, 1401, 1400, 1402, 1402, 1402,  895, 1401, 1403, 1403,
     1403,  893, 1403, 1402, 1404, 1404, 1404,  892, 1403, 1405,
     1405, 1405,  889, 1405, 1404, 1406, 1406, 1406,  887, 1405,
     1407, 1407, 1407,  886, 1407, 1406, 1408, 1408, 1408,  883,

     1407, 1409, 1409, 1409,  882, 1409, 1408, 1410, 1410, 1410,
      881, 1409, 1411, 1411, 1411,  880, 1411, 1410, 1412, 1412,
     1412,  879, 1411, 1413, 1413, 1413,  878, 1413, 1412, 1414,
     1414, 1414,  877, 1413, 1415, 1415, 1415,  876, 1415, 1414,
     1416, 1416, 1416,  875, 1415, 1417, 1417, 1417,  874, 1417,
     1416, 1418, 1418, 1418,  872, 1417, 1419, 1419, 1419,  871,
     1419, 1418, 1420, 1420, 1420,  870, 1419, 1421, 1421, 1421,
      869, 1421, 1420, 1422, 1422, 1422,  868, 1421, 1423, 1423,
     1423,  867, 1423, 1422, 1424, 1424, 1424,  866, 1423, 1425,
     1425, 1425,  865, 1425, 1424, 1426, 1426, 1426,  864, 1425,

     1427, 1427, 1427,  863, 1427, 1426, 1428, 1428, 1428,  862,
     1427, 1429, 1429, 1429,  860, 1429, 1428, 1430, 1430, 1430,
      857, 1429, 1431, 1431, 1431,  854, 1431, 1430, 1432, 1432,
     1432,  851, 1431, 1433, 1433, 1433,  850, 1433, 1432, 1434,
     1434, 1434,  844, 1433, 1435, 1435, 1435,  836, 1435, 1434,
     1436, 1436, 1436,  830, 1435, 1437, 1437, 1437,  829, 1437,
     1436, 1438, 1438, 1438,  828, 1437, 1439, 1439, 1439,  827,
     1439, 1438,  826, 1441, 1441, 1441, 1439, 1441, 1442, 1442,
     1442,  825, 1442, 1441,  824, 1443, 1443, 1443, 1442, 1443,
     1444, 1444, 1444,  821, 1444, 1443,  820, 1445, 1445, 1445,

     1444, 1445, 1446, 1446, 1446,  817, 1446, 1445,  815, 1447,
     1447, 1447, 1446, 1447, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1453, 1453,

     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,

     1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,

     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,

     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1477,
     1477, 1477,  813, 1477, 1477,  811, 1477, 1477,  810, 1477,
     1477, 1477, 1477,  809, 1477, 1477, 1477, 1477, 1477, 1477,
     1478, 1478, 1478,  806, 1478, 1478, 1478, 1478, 1478,  804,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1479, 1479, 1479,  802, 1479, 1479,  800, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,

      798, 1479, 1480, 1480, 1480,  797, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1481, 1481, 1481,  789, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1482, 1482, 1482,  786,  780,  779,
      775,  773, 1482,  772,  769,  767,  766, 1482,  765,  762,
     1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1484, 1484, 1484,  761,  758, 1484,  757, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,

     1484,  756, 1484, 1485, 1485, 1485,  755, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1486, 1486, 1486,  754,  753, 1486,
      752, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487,  751,  750,
     1487, 1487, 1487, 1487,  749, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487,  746, 1487, 1488, 1488, 1488,  745,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489,
      744,  743, 1489,  742, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489,  741, 1489, 1490, 1490,
     1490,  740, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
      738, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1492, 1492,  737, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
      736,  734, 1492, 1492, 1492, 1492, 1492, 1492, 1492,  732,
     1492, 1493, 1493, 1493,  730, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1494,  729,  725,  724,  722,  714,  712,  711,

     1494,  708,  704,  700,  696, 1494,  692,  689, 1494, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,  688, 1495,
     1496, 1496,  676,  674,  673,  672,  670,  669, 1496,  668,
      665,  662,  661, 1496,  660,  659, 1496, 1496, 1497,  658,
      657,  655,  654,  653,  652,  651,  649,  645,  642, 1497,
      636, 1497,  635,  628, 1497, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1501,  621, 1501,  620,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,  611, 1501,

      610, 1501, 1501,  609, 1501, 1502, 1502, 1502,  608, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502,  607, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503,  606,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,  605, 1503,
     1503, 1503, 1503, 1503,  604, 1503, 1503, 1504, 1504, 1504,
      603, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504,  602, 1504,  590, 1504, 1505, 1505,
     1505,  582, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505,  581, 1505, 1505,  579, 1505,  578, 1505, 1506,
      574, 1506,  566, 1506, 1506, 1506, 1506, 1506, 1506, 1506,

     1506, 1506, 1506, 1506, 1506, 1506,  565, 1506,  560, 1506,
     1507,  559, 1507,  557, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507,  556, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1508,  551, 1508,  550, 1508, 1508, 1508, 1508, 1508,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1508, 1512, 1512, 1512,  549, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1514, 1514, 1514,  548, 1514, 1514, 1514,
     1514, 1514,  547, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515, 1515,

     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515, 1516,  546,  545, 1516,  544,
      543, 1516,  542, 1516, 1516,  532, 1516,  526, 1516,  525,
      521, 1516, 1517, 1517, 1517,  519, 1517,  518, 1517, 1517,
     1517, 1517, 1517, 1517,  517, 1517,  516, 1517, 1517,  515,
     1517,  513, 1517, 1520, 1520, 1520,  508, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1521, 1521, 1521,  502, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1523, 1523, 1523,  490, 1523,

     1523,  489, 1523, 1523,  465, 1523, 1523, 1523, 1523,  462,
     1523, 1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524,  455,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524,  447, 1524, 1525, 1525, 1525,
      444, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1526, 1526,
     1526,  439, 1526, 1526,  438, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526,  437, 1526, 1527,
     1527, 1527,  436, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,

     1528, 1528, 1528,  434, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1529, 1529, 1529,  432, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1530, 1530, 1530,  431,  425,  424,  413,  404,
     1530,  396,  388,  379,  375, 1530,  367,  357, 1530, 1531,
     1531,  348, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
      346, 1531, 1531, 1531, 1531, 1531, 1531, 1531,  339, 1531,
     1532, 1532, 1532,  338,  337, 1532,  336, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532,  335,

     1532, 1533, 1533, 1533,  334,  333, 1533,  332, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1534, 1534, 1534,  331,  327, 1534, 1534, 1534,
     1534,  320, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534,
     1534,  314, 1534, 1535, 1535, 1535,  312,  304, 1535,  290,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1535,  289, 1535, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536,  284, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1537, 1537,  283, 1537, 1537,
     1537, 1537, 1537, 1537, 1537,  278,  277, 1537, 1537, 1537,

     1537, 1537, 1537, 1537,  275, 1537, 1538, 1538, 1538,  274,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1539,  272,  270,
      265,  264,  257,  255,  249, 1539,  240,  230,  227,  220,
     1539,  218,  217, 1539, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540,  216, 1540, 1541, 1541,  215,  212,  208,
      206,  205,  196, 1541,  194,  187,  180,  174, 1541,  168,
      163, 1541, 1541, 1542,  153,  152,  150,  142,  135,  133,
      126,  123,  116,  115, 1542,  112, 1542,  111,  109, 1542,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1545,  102, 1545,   99, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1545,   89, 1545,   83, 1545, 1545,   16, 1545,
     1546, 1546, 1546,    0, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546,    0, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1547, 1547, 1547,    0, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547,    0, 1547, 1547, 1547, 1547, 1547,    0,
     1547, 1547, 1548, 1548, 1548,    0, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,    0,

     1548,    0, 1548, 1549, 1549, 1549,    0, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549,    0, 1549, 1549,
        0, 1549,    0, 1549, 1550,    0, 1550,    0, 1550, 1550,
     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550,    0, 1550,    0, 1550, 1551,    0, 1551,    0, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551,    0, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1552,    0, 1552,    0,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1557, 1557, 1557,
        0, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,

     1557, 1557, 1557, 1557, 1557, 1557,    0, 1557, 1558, 1558,
     1558,    0, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559,
        0,    0, 1559,    0,    0, 1559,    0, 1559, 1559,    0,
     1559,    0, 1559,    0,    0, 1559, 1560, 1560, 1560,    0,
     1560,    0, 1560, 1560, 1560, 1560, 1560, 1560,    0, 1560,
        0, 1560, 1560,    0, 1560,    0, 1560, 1561, 1561, 1561,
        0, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1562, 1562,
     1562,    0, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,

     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1563,
        0,    0,    0,    0,    0,    0,    0, 1563,    0,    0,
        0,    0, 1563,    0,    0, 1563, 1565, 1565, 1565,    0,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566, 1566,
        0, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1568, 1568,
     1568,    0, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568,    0, 1568, 1569,
     1569, 1569,    0, 1569, 1569,    0, 1569, 1569,    0, 1569,

     1569, 1569, 1569,    0, 1569, 1569, 1569, 1569, 1569, 1569,
     1570, 1570, 1570,    0, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1571, 1571, 1571,    0, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1572, 1572, 1572,    0, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1573, 1573, 1573,    0, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1574, 1574, 1574,    0, 1574, 1574,

        0, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574,    0, 1574, 1575, 1575,    0, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575,    0, 1575, 1575, 1575,
     1575, 1575, 1575, 1575,    0, 1575, 1576, 1576, 1576,    0,
        0,    0,    0,    0, 1576,    0,    0,    0,    0, 1576,
        0,    0, 1576, 1577, 1577, 1577,    0,    0, 1577,    0,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577,    0, 1577, 1578, 1578, 1578,    0,    0, 1578,
        0, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579,    0,    0,

     1579, 1579, 1579, 1579,    0, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579,    0, 1579, 1580, 1580, 1580,    0,
        0, 1580,    0, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580,    0, 1580, 1581, 1581,    0,
     1581, 1581, 1581, 1581, 1581, 1581, 1581,    0,    0, 1581,
     1581, 1581, 1581, 1581, 1581, 1581,    0, 1581, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,    0,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1583,
     1583, 1583,    0, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,    0,
     1584, 1585,    0, 1585,    0, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585,    0, 1585,    0, 1585, 1585,    0, 1585,
     1586, 1586, 1586,    0, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586,    0, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1587, 1587, 1587,    0, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587,    0, 1587, 1587, 1587, 1587, 1587,    0,
     1587, 1587, 1588,    0, 1588,    0, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,    0,

     1588,    0, 1588, 1589, 1589, 1589,    0, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
        0, 1589,    0, 1589, 1590,    0, 1590,    0, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590,    0, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1591,    0, 1591,    0, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1593, 1593, 1593,    0,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593,    0, 1593, 1594, 1594, 1594,
        0, 1594,    0, 1594, 1594, 1594, 1594, 1594, 1594,    0,

     1594,    0, 1594, 1594,    0, 1594,    0, 1594, 1595, 1595,
     1595,    0, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1596,
     1596, 1596,    0, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1597, 1597, 1597,    0, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1598,    0,    0,    0,    0,    0,    0,    0, 1598,
        0,    0,    0,    0, 1598,    0,    0, 1598, 1600, 1600,
     1600,    0, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1601,
        0,    0, 1601,    0,    0,    0,    0, 1601,    0,    0,
        0,    0, 1601,    0,    0, 1601, 1602, 1602, 1602,    0,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602,    0, 1602, 1603, 1603, 1603,
        0, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604,
        0, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,    0,
     1604, 1604, 1604, 1604, 1604, 1604, 1604,    0, 1604, 1605,
     1605,    0, 1605, 1605, 1605, 1605, 1605, 1605, 1605,    0,

        0, 1605, 1605, 1605, 1605, 1605, 1605, 1605,    0, 1605,
     1606, 1606, 1606,    0, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,    0,
     1606, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1608, 1608,    0, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608,    0, 1608, 1608, 1608, 1608, 1608, 1608,
     1608,    0, 1608, 1609, 1609,    0, 1609, 1609, 1609, 1609,
     1609, 1609, 1609,    0,    0, 1609, 1609, 1609, 1609, 1609,
     1609, 1609,    0, 1609, 1610, 1610,    0, 1610, 1610, 1610,

     1610, 1610, 1610, 1610, 1610,    0, 1610, 1610, 1610, 1610,
     1610, 1610, 1610,    0, 1610, 1611, 1611,    0, 1611, 1611,
     1611, 1611, 1611, 1611, 1611,    0,    0, 1611, 1611, 1611,
     1611, 1611, 1611, 1611,    0, 1611, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1613,    0,    0,
        0, 1613,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1613,    0, 1613, 1614, 1614,    0, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614,    0, 1614, 1614, 1614, 1614,
     1614, 1614, 1614,    0, 1614, 1615, 1615, 1615, 1615, 1615,

     1615,    0, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616,    0, 1616,
     1616, 1616, 1616, 1616, 1616, 1616,    0,    0, 1616, 1616,
     1616, 1616, 1616, 1616, 1616,    0, 1616, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1619, 1619,
        0, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,    0,
     1619, 1619, 1619, 1619, 1619, 1619, 1619,    0, 1619, 1620,
     1620,    0, 1620, 1620, 1620, 1620, 1620, 1620, 1620,    0,
        0, 1620, 1620, 1620, 1620, 1620, 1620, 1620,    0, 1620,

     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621,    0, 1621, 1621,    0, 1621,
     1621, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622,    0, 1622, 1622,    0,
     1622, 1622, 1623, 1623,    0, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623,    0, 1623, 1623, 1623, 1623, 1623, 1623,
     1623,    0, 1623, 1624, 1624,    0, 1624, 1624, 1624, 1624,
     1624, 1624, 1624,    0,    0, 1624, 1624, 1624, 1624, 1624,
     1624, 1624,    0, 1624, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,    0,

     1625, 1625,    0, 1625, 1625, 1626, 1626, 1626,    0, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1627, 1627,    0, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627,    0, 1627, 1627,
     1627, 1627, 1627, 1627, 1627,    0, 1627, 1628, 1628,    0,
     1628, 1628, 1628, 1628, 1628, 1628, 1628,    0,    0, 1628,
     1628, 1628, 1628, 1628, 1628, 1628,    0, 1628, 1629, 1629,
        0, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,    0,
     1629, 1629, 1629, 1629, 1629, 1629, 1629,    0, 1629, 1630,
     1630,    0, 1630, 1630, 1630, 1630, 1630, 1630, 1630,    0,

        0, 1630, 1630, 1630, 1630, 1630, 1630, 1630,    0, 1630,
     1631, 1631,    0, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631,    0, 1631, 1631, 1631, 1631, 1631, 1631, 1631,    0,
     1631, 1632, 1632,    0, 1632, 1632, 1632, 1632, 1632, 1632,
     1632,    0,    0, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
        0, 1632, 1633, 1633,    0, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633,    0, 1633, 1633, 1633, 1633, 1633, 1633,
     1633,    0, 1633, 1634, 1634,    0, 1634, 1634, 1634, 1634,
     1634, 1634, 1634,    0,    0, 1634, 1634, 1634, 1634, 1634,
     1634, 1634,    0, 1634, 1635, 1635,    0, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635,    0, 1635, 1635, 1635, 1635,
     1635, 1635, 1635,    0, 1635, 1636, 1636,    0, 1636, 1636,
     1636, 1636, 1636, 1636, 1636,    0,    0, 1636, 1636, 1636,
     1636, 1636, 1636, 1636,    0, 1636, 1637, 1637,    0, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637,    0, 1637, 1637,
     1637, 1637, 1637, 1637, 1637,    0, 1637, 1638, 1638,    0,
     1638, 1638, 1638, 1638, 1638, 1638, 1638,    0,    0, 1638,
     1638, 1638, 1638, 1638, 1638, 1638,    0, 1638, 1639, 1639,
        0, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,    0,
     1639, 1639, 1639, 1639, 1639, 1639, 1639,    0, 1639, 1640,

     1640,    0, 1640, 1640, 1640, 1640, 1640, 1640, 1640,    0,
        0, 1640, 1640, 1640, 1640, 1640, 1640, 1640,    0, 1640,
     1641, 1641,    0, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
     1641,    0, 1641, 1641, 1641, 1641, 1641, 1641, 1641,    0,
     1641, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "D:/LIB/C_C++/doxygen-master/src/pre.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2020 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 28 "D:/LIB/C_C++/doxygen-master/src/pre.l"

/*
 *      includes
 */

#include "doxygen.h"

#include <stack>
#include <deque>
#include <algorithm>
#include <utility>
#include <mutex>
#include <thread>
#include <algorithm>

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include "qcstring.h"
#include "containers.h"
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"
#include "condparser.h"
#include "config.h"
#include "filedef.h"
#include "regex.h"
#include "fileinfo.h"

#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

struct preYY_CondCtx
{
  preYY_CondCtx(int line,QCString id,bool b)
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};

struct FileState
{
  FileState(uint size) : fileBuf(size) {}
  int lineNr = 1;
  int curlyCount = 0;
  BufStr fileBuf;
  BufStr *oldFileBuf = 0;
  yy_size_t oldFileBufPos = 0;
  YY_BUFFER_STATE bufState = 0;
  QCString fileName;
};

struct PreIncludeInfo
{
  PreIncludeInfo(const QCString &fn,FileDef *srcFd, FileDef *dstFd,const QCString &iName,bool loc, bool imp)
    : fileName(fn), fromFileDef(srcFd), toFileDef(dstFd), includeName(iName), local(loc), imported(imp)
  {
  }
  QCString fileName;    // file name in which the include statement was found
  FileDef *fromFileDef; // filedef in which the include statement was found
  FileDef *toFileDef;   // filedef to which the include is pointing
  QCString includeName; // name used in the #include statement
  bool local;           // is it a "local" or <global> include
  bool imported;        // include via "import" keyword (Objective-C)
};

/** A dictionary of managed Define objects. */
typedef std::map< std::string, Define > DefineMap;

/** @brief Class that manages the defines available while
 *  preprocessing files.
 */
class DefineManager
{
  private:
    /** Local class used to hold the defines for a single file */
    class DefinesPerFile
    {
      public:
        /** Creates an empty container for defines */
        DefinesPerFile(DefineManager *parent)
          : m_parent(parent)
        {
        }
        void addInclude(std::string fileName)
        {
          m_includedFiles.insert(fileName);
        }
        void store(const DefineMap &fromMap)
        {
          for (auto &kv : fromMap)
          {
            m_defines.emplace(kv.first,kv.second);
          }
          //printf("  m_defines.size()=%zu\n",m_defines.size());
          m_stored=true;
        }
        void retrieve(DefineMap &toMap)
        {
          StringSet includeStack;
          retrieveRec(toMap,includeStack);
        }
        void retrieveRec(DefineMap &toMap,StringSet &includeStack)
        {
          //printf("  retrieveRec #includedFiles=%zu\n",m_includedFiles.size());
          for (auto incFile : m_includedFiles)
          {
            DefinesPerFile *dpf = m_parent->find(incFile);
            if (dpf && includeStack.find(incFile)==includeStack.end())
            {
              includeStack.insert(incFile);
              dpf->retrieveRec(toMap,includeStack);
              //printf("  retrieveRec: processing include %s: #toMap=%zu\n",qPrint(incFile),toMap.size());
            }
          }
          for (auto &kv : m_defines)
          {
            toMap.emplace(kv.first,kv.second);
          }
        }
        bool stored() const { return m_stored; }
      private:
        DefineManager *m_parent;
        DefineMap m_defines;
        StringSet m_includedFiles;
        bool m_stored = false;
    };

    friend class DefinesPerFile;
  public:

    void addInclude(std::string fromFileName,std::string toFileName)
    {
      //printf("DefineManager::addInclude('%s'->'%s')\n",fromFileName.c_str(),toFileName.c_str());
      auto it = m_fileMap.find(fromFileName);
      if (it==m_fileMap.end())
      {
        it = m_fileMap.emplace(fromFileName,std::make_unique<DefinesPerFile>(this)).first;
      }
      auto &dpf = it->second;
      dpf->addInclude(toFileName);
    }

    void store(std::string fileName,const DefineMap &fromMap)
    {
      //printf("DefineManager::store(%s,#=%zu)\n",fileName.c_str(),fromMap.size());
      auto it = m_fileMap.find(fileName);
      if (it==m_fileMap.end())
      {
        it = m_fileMap.emplace(fileName,std::make_unique<DefinesPerFile>(this)).first;
      }
      it->second->store(fromMap);
    }

    void retrieve(std::string fileName,DefineMap &toMap)
    {
      auto it = m_fileMap.find(fileName);
      if (it!=m_fileMap.end())
      {
        auto &dpf = it->second;
        dpf->retrieve(toMap);
      }
      //printf("DefineManager::retrieve(%s,#=%zu)\n",fileName.c_str(),toMap.size());
    }

    bool alreadyProcessed(std::string fileName) const
    {
      auto it = m_fileMap.find(fileName);
      if (it!=m_fileMap.end())
      {
        return it->second->stored();
      }
      return false;
    }

  private:
    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(std::string fileName) const
    {
      auto it = m_fileMap.find(fileName);
      return it!=m_fileMap.end() ? it->second.get() : nullptr;
    }

    std::unordered_map< std::string, std::unique_ptr<DefinesPerFile> > m_fileMap;
};


/* -----------------------------------------------------------------
 *
 *      global state
 */
static std::mutex            g_debugMutex;
static std::mutex            g_globalDefineMutex;
static std::mutex            g_updateGlobals;
static DefineManager         g_defineManager;


/* -----------------------------------------------------------------
 *
 *      scanner's state
 */

struct preYY_state
{
  int                yyLineNr       = 1;
  int                yyMLines       = 1;
  int                yyColNr        = 1;
  QCString           fileName;
  FileDef           *yyFileDef      = 0;
  FileDef           *inputFileDef   = 0;
  int                ifcount        = 0;
  int                defArgs        = -1;
  QCString           defName;
  QCString           defText;
  QCString           defLitText;
  QCString           defArgsStr;
  QCString           defExtraSpacing;
  bool               defContinue = false;
  bool               defVarArgs     = false;
  int                lastCContext   = 0;
  int                lastCPPContext = 0;
  BufStr            *inputBuf       = 0;
  yy_size_t          inputBufPos    = 0;
  BufStr            *outputBuf      = 0;
  int                roundCount     = 0;
  bool               quoteArg       = false;
  bool               idStart        = false;
  int                findDefArgContext = 0;
  bool               expectGuard    = false;
  QCString           guardName;
  QCString           lastGuardName;
  QCString           incName;
  QCString           guardExpr;
  int                curlyCount     = 0;
  bool               nospaces       = false; // add extra spaces during macro expansion
  int                javaBlock      = 0;

  bool               macroExpansion = false; // from the configuration
  bool               expandOnlyPredef = false; // from the configuration
  QCString           potentialDefine;
  int                commentCount   = 0;
  bool               insideComment  = false;
  bool               isImported     = false;
  QCString           blockName;
  int                condCtx        = 0;
  bool               skip           = false;
  bool               insideIDL      = false;
  bool               insideCS       = false; // C# has simpler preprocessor
  bool               insideFtn      = false;
  bool               isSource       = false;

  yy_size_t          fenceSize      = 0;
  bool               ccomment       = false;
  QCString           delimiter;
  bool               isSpecialComment = false;
  StringVector                             pathList;
  IntMap                                   argMap;
  BoolStack                                levelGuard;
  std::stack< std::unique_ptr<preYY_CondCtx> >   condStack;
  std::deque< std::unique_ptr<FileState> > includeStack;
  std::unordered_map<std::string,Define*>  expandedDict;
  StringUnorderedSet                       expanded;
  ConstExpressionParser                    constExpParser;
  DefineMap                                contextDefines; // macros imported from other files
  DefineMap                                localDefines;   // macros defined in this file
  DefineList                               macroDefinitions;
  LinkedMap<PreIncludeInfo>                includeRelations;
};

// stateless functions
static QCString escapeAt(const QCString &text);
static QCString extractTrailingComment(const QCString &s);
static char resolveTrigraph(char c);

// stateful functions
static inline void  outputArray(yyscan_t yyscanner,const char *a,yy_size_t len);
static inline void outputString(yyscan_t yyscanner,const QCString &s);
static inline void   outputChar(yyscan_t yyscanner,char c);
static inline void outputSpaces(yyscan_t yyscanner,char *s);
static inline void  outputSpace(yyscan_t yyscanner,char c);
static inline void extraSpacing(yyscan_t yyscanner);
static QCString     expandMacro(yyscan_t yyscanner,const QCString &name);
static void     readIncludeFile(yyscan_t yyscanner,const QCString &inc);
static void           incrLevel(yyscan_t yyscanner);
static void           decrLevel(yyscan_t yyscanner);
static void         setCaseDone(yyscan_t yyscanner,bool value);
static bool       otherCaseDone(yyscan_t yyscanner);
static bool   computeExpression(yyscan_t yyscanner,const QCString &expr);
static void    startCondSection(yyscan_t yyscanner,const QCString &sectId);
static void      endCondSection(yyscan_t yyscanner);
static void  addMacroDefinition(yyscan_t yyscanner);
static void           addDefine(yyscan_t yyscanner);
static void         setFileName(yyscan_t yyscanner,const QCString &name);
static yy_size_t         yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size);
static Define *       isDefined(yyscan_t yyscanner,const QCString &name);

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

/* ----------------------------------------------------------------- */

#line 3318 "D:/DEV/DOXYGEN/generated_src/pre.cpp"
#line 368 "D:/LIB/C_C++/doxygen-master/src/pre.l"
  // C start comment 
  // C end comment
  // Cpp comment 
  // optional characters after import
  // Optional white space








































#line 3365 "D:/DEV/DOXYGEN/generated_src/pre.cpp"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define LexCopyLine 7
#define CopyString 8
#define CopyStringCs 9
#define CopyStringFtn 10
#define CopyStringFtnDouble 11
#define CopyRawString 12
#define Include 13
#define IncludeID 14
#define EndImport 15
#define DefName 16
#define DefineArg 17
#define DefineText 18
#define SkipCPPBlock 19
#define SkipCComment 20
#define ArgCopyCComment 21
#define CopyCComment 22
#define SkipVerbatim 23
#define SkipCPPComment 24
#define JavaDocVerbatimCode 25
#define RemoveCComment 26
#define RemoveCPPComment 27
#define Guard 28
#define DefinedExpr1 29
#define DefinedExpr2 30
#define SkipDoubleQuote 31
#define SkipSingleQuote 32
#define UndefName 33
#define IgnoreLine 34
#define FindDefineArgs 35
#define ReadString 36
#define CondLineC 37
#define CondLineCpp 38
#define SkipCond 39
#define IDLquote 40

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct preYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 422 "D:/LIB/C_C++/doxygen-master/src/pre.l"


#line 3686 "D:/DEV/DOXYGEN/generated_src/pre.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1449 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1448 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 424 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 425 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 426 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 427 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // Trigraph
                                          unput(resolveTrigraph(yytext[2]));
                                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 430 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->yyColNr+=(int)yyleng;
                                          yyextra->yyMLines=0;
                                          yyextra->potentialDefine=yytext;
                                          BEGIN(Command); 
                                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 436 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Lex) REJECT
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN(LexCopyLine);
                                        }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 441 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (yyextra->insideIDL)
                                          {
                                            BEGIN(IDLquote);
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
                                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 451 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,"\\",1);
                                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 454 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,"\"",1);
                                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 457 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 460 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 464 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 467 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN(CopyLine);
                                        }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 471 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // constructors?
                                          int i;
                                          for (i=(int)yyleng-1;i>=0;i--)
                                          {
                                            unput(yytext[i]);
                                          }
                                          BEGIN(CopyLine);
                                        }
	YY_BREAK
case 15:
/* rule 15 can match eol */
#line 480 "D:/LIB/C_C++/doxygen-master/src/pre.l"
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 480 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // function like macro
                                          bool skipFuncMacros = Config_getBool(SKIP_FUNCTION_MACROS);
                                          QCString name(yytext);
                                          int pos = name.find('(');
                                          if (pos<0) pos=0; // should never happen
                                          name=name.left(pos).stripWhiteSpace();

                                          Define *def=0;
                                          if (skipFuncMacros && !yyextra->insideFtn &&
                                              name!="Q_PROPERTY" &&
                                              !(
                                                 (yyextra->includeStack.empty() || yyextra->curlyCount>0) &&
                                                 yyextra->macroExpansion &&
                                                 (def=isDefined(yyscanner,name)) &&
                                                 /*macroIsAccessible(def) &&*/
                                                 (!yyextra->expandOnlyPredef || def->isPredefined)
                                               )
                                             )
                                          {
                                            outputChar(yyscanner,'\n');
                                            yyextra->yyLineNr++;
                                          }
                                          else // don't skip
                                          {
                                            int i;
                                            for (i=(int)yyleng-1;i>=0;i--)
                                            {
                                              unput(yytext[i]);
                                            }
                                            BEGIN(CopyLine);
                                          }
                                        }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 512 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          QCString text=yytext;
                                          yyextra->yyLineNr+=text.contains('\n');
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 517 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->delimiter = yytext+2;
                                          yyextra->delimiter=yyextra->delimiter.left(yyextra->delimiter.length()-1);
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN(CopyRawString);
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 523 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // count brackets inside the main file
                                          if (yyextra->includeStack.empty())
                                          {
                                            yyextra->curlyCount++;
                                          }
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 530 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 533 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // count brackets inside the main file
                                          if (yyextra->includeStack.empty() && yyextra->curlyCount>0)
                                          {
                                            yyextra->curlyCount--;
                                          }
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 540 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 543 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 546 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 549 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_CSharp) REJECT;
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN( CopyStringCs );
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 554 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran)
                                          {
                                            BEGIN( CopyString );
                                          }
                                          else
                                          {
                                            BEGIN( CopyStringFtnDouble );
                                          }
                                        }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 565 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran) REJECT;
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyStringFtn );
                                        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 570 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 573 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 576 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 579 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyLine );
                                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 583 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 586 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 589 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyLine );
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 593 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 596 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 599 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyLine );
                                        }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 603 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          QCString delimiter = yytext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==yyextra->delimiter)
                                          {
                                            BEGIN( CopyLine );
                                          }
                                        }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 612 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 615 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 618 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                          Define *def=0;
                                          //def=yyextra->globalDefineDict->find(yytext);
                                          //def=isDefined(yyscanner,yytext);
                                          //printf("Search for define %s found=%d yyextra->includeStack.empty()=%d "
                                          //       "yyextra->curlyCount=%d yyextra->macroExpansion=%d yyextra->expandOnlyPredef=%d "
                                          //     "isPreDefined=%d\n",yytext,def ? 1 : 0,
                                          //     yyextra->includeStack.empty(),yyextra->curlyCount,yyextra->macroExpansion,yyextra->expandOnlyPredef,
                                          //     def ? def->isPredefined : -1
                                          //    );
                                          if ((yyextra->includeStack.empty() || yyextra->curlyCount>0) &&
                                              yyextra->macroExpansion &&
                                              (def=isDefined(yyscanner,yytext)) &&
                                              /*(def->isPredefined || macroIsAccessible(def)) && */
                                              (!yyextra->expandOnlyPredef || def->isPredefined)
                                             )
                                          {
                                            //printf("Found it! #args=%d\n",def->nargs);
                                            yyextra->roundCount=0;
                                            yyextra->defArgsStr=yytext;
                                            if (def->nargs==-1) // no function macro
                                            {
                                              QCString result = def->isPredefined ? def->definition : expandMacro(yyscanner,yyextra->defArgsStr);
                                              outputString(yyscanner,result);
                                            }
                                            else // zero or more arguments
                                            {
                                              yyextra->findDefArgContext = CopyLine;
                                              BEGIN(FindDefineArgs);
                                            }
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                          }
                                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 655 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          Define *def=0;
                                          if ((yyextra->includeStack.empty() || yyextra->curlyCount>0) &&
                                              yyextra->macroExpansion &&
                                              (def=isDefined(yyscanner,yytext)) &&
                                              def->nargs==-1 &&
                                              /*(def->isPredefined || macroIsAccessible(def)) &&*/
                                              (!yyextra->expandOnlyPredef || def->isPredefined)
                                             )
                                          {
                                            QCString result=def->isPredefined ? def->definition : expandMacro(yyscanner,yytext);
                                            outputString(yyscanner,result);
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                          }
                                        }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 673 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // strip line continuation characters
                                          if (getLanguageFromFileName(yyextra->fileName)==SrcLangExt_Fortran) outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 676 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 679 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 682 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          BEGIN(Start);
                                          yyextra->yyLineNr++;
                                          yyextra->yyColNr=1;
                                        }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 688 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+='(';
                                          yyextra->roundCount++;
                                        }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 692 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=')';
                                          yyextra->roundCount--;
                                          if (yyextra->roundCount==0)
                                          {
                                            QCString result=expandMacro(yyscanner,yyextra->defArgsStr);
                                            //printf("yyextra->defArgsStr='%s'->'%s'\n",qPrint(yyextra->defArgsStr),qPrint(result));
                                            if (yyextra->findDefArgContext==CopyLine)
                                            {
                                              outputString(yyscanner,result);
                                              BEGIN(yyextra->findDefArgContext);
                                            }
                                            else // yyextra->findDefArgContext==IncludeID
                                            {
                                              readIncludeFile(yyscanner,result);
                                              yyextra->nospaces=FALSE;
                                              BEGIN(Start);
                                            }
                                          }
                                        }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("              {
                                          yyextra->defArgsStr+=yytext;
                                        }
  */
case 49:
YY_RULE_SETUP
#line 717 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 720 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                          BEGIN(ArgCopyCComment);
                                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 724 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(ReadString);
                                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 728 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran) REJECT;
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(ReadString);
                                        }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 733 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=' ';
                                          yyextra->yyLineNr++;
                                          outputChar(yyscanner,'\n');
                                        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 738 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+="@@";
                                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 741 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 744 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 747 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 751 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=' ';
                                          yyextra->yyLineNr++;
                                          outputChar(yyscanner,'\n');
                                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 756 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 759 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 763 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran) REJECT;
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 769 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 772 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // line continuation
                                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 774 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 777 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 780 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->isImported = yytext[1]=='m';
                                          if (yyextra->macroExpansion)
                                            BEGIN(IncludeID);
                                        }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 785 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->isImported = yytext[1]=='m';
                                          char c[2];
                                          c[0]=yytext[yyleng-1];c[1]='\0';
                                          yyextra->incName=c;
                                          BEGIN(Include);
                                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 792 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->potentialDefine += substitute(yytext,"cmake","     ");
                                          //printf("!!!DefName\n");
                                          yyextra->yyColNr+=(int)yyleng;
                                          BEGIN(DefName);
                                        }
	YY_BREAK
case 69:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 798 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr.resize(0);
                                          BEGIN(DefinedExpr2);
                                        }
	YY_BREAK
case 70:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 803 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          //printf("Pre.l: ifdef\n");
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr.resize(0);
                                          BEGIN(DefinedExpr1);
                                        }
	YY_BREAK
case 71:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 809 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr="! ";
                                          BEGIN(DefinedExpr2);
                                        }
	YY_BREAK
case 72:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 814 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr="! ";
                                          BEGIN(DefinedExpr1);
                                        }
	YY_BREAK
case 73:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 819 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr.resize(0);
                                          BEGIN(Guard);
                                        }
	YY_BREAK
case 74:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 824 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (!otherCaseDone(yyscanner))
                                          {
                                            yyextra->guardExpr.resize(0);
                                            BEGIN(Guard);
                                          }
                                          else
                                          {
                                            yyextra->ifcount=0;
                                            BEGIN(SkipCPPBlock);
                                          }
                                        }
	YY_BREAK
case 75:
/* rule 75 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 836 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (otherCaseDone(yyscanner))
                                          {
                                            yyextra->ifcount=0;
                                            BEGIN(SkipCPPBlock);
                                          }
                                          else
                                          {
                                            setCaseDone(yyscanner,TRUE);
                                          }
                                        }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 847 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(UndefName);
                                        }
	YY_BREAK
case 77:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 850 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (!otherCaseDone(yyscanner))
                                          {
                                            yyextra->guardExpr.resize(0);
                                            BEGIN(Guard);
                                          }
                                        }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 857 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          //printf("Pre.l: #endif\n");
                                          decrLevel(yyscanner);
                                        }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 861 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          BEGIN(Start);
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 866 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                        }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 869 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // unknown directive
                                          BEGIN(IgnoreLine);
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 872 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 876 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 84:
YY_RULE_SETUP
#line 877 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->potentialDefine += yytext[0]=='\t' ? '\t' : ' ';
                                          yyextra->yyColNr+=(int)yyleng;
                                        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 880 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          Define *def;
                                          if ((def=isDefined(yyscanner,yytext))
                                              /*&& !def->isPredefined*/
                                              && !def->nonRecursive
                                             )
                                          {
                                            //printf("undefining %s\n",yytext);
                                            def->undef=TRUE;
                                          }
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 892 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->guardExpr+=' ';
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 87:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 897 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(DefinedExpr2);
                                        }
	YY_BREAK
case 88:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 900 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(DefinedExpr1);
                                        }
	YY_BREAK
case 89:
/* rule 89 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 903 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="1L"; }
	YY_BREAK
case 90:
/* rule 90 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 904 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="0L"; }
	YY_BREAK
case 91:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 905 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+='!'; }
	YY_BREAK
case 92:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 906 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="!="; }
	YY_BREAK
case 93:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 907 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="&&"; }
	YY_BREAK
case 94:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 908 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="||"; }
	YY_BREAK
case 95:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 909 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="&"; }
	YY_BREAK
case 96:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 910 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="|"; }
	YY_BREAK
case 97:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 911 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="^"; }
	YY_BREAK
case 98:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 912 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="~"; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 913 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+=yytext; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 914 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+="@@"; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 915 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->guardExpr+=*yytext; }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 916 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          unput(*yytext);
                                          //printf("Guard: '%s'\n",
                                          //    qPrint(yyextra->guardExpr));
                                          bool guard=computeExpression(yyscanner,yyextra->guardExpr);
                                          setCaseDone(yyscanner,guard);
                                          if (guard)
                                          {
                                            BEGIN(Start);
                                          }
                                          else
                                          {
                                            yyextra->ifcount=0;
                                            BEGIN(SkipCPPBlock);
                                          }
                                        }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 932 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 933 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (isDefined(yyscanner,yytext) || yyextra->guardName==yytext)
                                            yyextra->guardExpr+=" 1L ";
                                          else
                                            yyextra->guardExpr+=" 0L ";
                                          yyextra->lastGuardName=yytext;
                                          BEGIN(Guard);
                                        }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 941 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (isDefined(yyscanner,yytext) || yyextra->guardName==yytext)
                                            yyextra->guardExpr+=" 1L ";
                                          else
                                            yyextra->guardExpr+=" 0L ";
                                          yyextra->lastGuardName=yytext;
                                        }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 948 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // should not happen, handle anyway
                                          yyextra->yyLineNr++;
                                          yyextra->ifcount=0;
                                          BEGIN(SkipCPPBlock);
                                        }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 953 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(Guard);
                                        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 956 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 109:
YY_RULE_SETUP
#line 957 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 110:
/* rule 110 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 958 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 959 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 960 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 113:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 961 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->ifcount++;
                                          //printf("#if... depth=%d\n",yyextra->ifcount);
                                        }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 966 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          //printf("Else! yyextra->ifcount=%d otherCaseDone=%d\n",yyextra->ifcount,otherCaseDone());
                                          if (yyextra->ifcount==0 && !otherCaseDone(yyscanner))
                                          {
                                            setCaseDone(yyscanner,TRUE);
                                            //outputChar(yyscanner,'\n');
                                            BEGIN(Start);
                                          }
                                        }
	YY_BREAK
case 115:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 975 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (yyextra->ifcount==0)
                                          {
                                            if (!otherCaseDone(yyscanner))
                                            {
                                              yyextra->guardExpr.resize(0);
                                              yyextra->lastGuardName.resize(0);
                                              BEGIN(Guard);
                                            }
                                            else
                                            {
                                              BEGIN(SkipCPPBlock);
                                            }
                                          }
                                        }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 990 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                          decrLevel(yyscanner);
                                          if (--yyextra->ifcount<0)
                                          {
                                            //outputChar(yyscanner,'\n');
                                            BEGIN(Start);
                                          }
                                        }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 999 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                          BEGIN(SkipCPPBlock);
                                        }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1004 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // unknown directive
                                          BEGIN(SkipLine);
                                        }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1007 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1008 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1009 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1010 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(SkipString);
                                        }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1013 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 124:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1014 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                        }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1016 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->lastCPPContext=YY_START;
                                          BEGIN(RemoveCPPComment);
                                        }
	YY_BREAK
case 126:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1020 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                        }
	YY_BREAK
case 127:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1022 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->lastCContext=YY_START;
                                          BEGIN(RemoveCComment);
                                        }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1026 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                          BEGIN(SkipCPPBlock);
                                        }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1031 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1032 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1033 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(SkipLine);
                                        }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1036 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ }
	YY_BREAK
case 133:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1037 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->nospaces=TRUE;
                                          yyextra->roundCount=0;
                                          yyextra->defArgsStr=yytext;
                                          yyextra->findDefArgContext = IncludeID;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1044 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->nospaces=TRUE;
                                          readIncludeFile(yyscanner,expandMacro(yyscanner,yytext));
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1049 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->incName+=yytext;
                                          readIncludeFile(yyscanner,yyextra->incName);
                                          if (yyextra->isImported)
                                          {
                                            BEGIN(EndImport);
                                          }
                                          else
                                          {
                                            BEGIN(Start);
                                          }
                                        }
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1061 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1064 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1068 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                        }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1070 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // define with argument
                                          //printf("Define() '%s'\n",yytext);
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = 0;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defText.resize(0);
                                          yyextra->defLitText.resize(0);
                                          yyextra->defName = yytext;
                                          yyextra->defVarArgs = FALSE;
                                          yyextra->defExtraSpacing.resize(0);
                                          yyextra->defContinue = false;
                                          BEGIN(DefineArg);
                                        }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1083 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // special case: define with 1 -> can be "guard"
                                          //printf("Define '%s'\n",yytext);
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = -1;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defName = QCString(yytext).left(yyleng-1).stripWhiteSpace();
                                          yyextra->defVarArgs = FALSE;
                                          //printf("Guard check: %s!=%s || %d\n",
                                          //    qPrint(yyextra->defName),qPrint(yyextra->lastGuardName),yyextra->expectGuard);
                                          if (yyextra->curlyCount>0 || yyextra->defName!=yyextra->lastGuardName || !yyextra->expectGuard)
                                          { // define may appear in the output
                                            QCString def = yyextra->potentialDefine +
                                                           yyextra->defName         ;
                                            outputString(yyscanner,def);
                                            outputSpaces(yyscanner,yytext+yyextra->defName.length());
                                            yyextra->quoteArg=FALSE;
                                            yyextra->insideComment=FALSE;
                                            yyextra->lastGuardName.resize(0);
                                            yyextra->defText="1";
                                            yyextra->defLitText="1";
                                            BEGIN(DefineText);
                                          }
                                          else // define is a guard => hide
                                          {
                                            //printf("Found a guard %s\n",yytext);
                                            yyextra->defText.resize(0);
                                            yyextra->defLitText.resize(0);
                                            BEGIN(Start);
                                          }
                                          yyextra->expectGuard=FALSE;
                                        }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1114 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // empty define
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = -1;
                                          yyextra->defName = yytext;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defText.resize(0);
                                          yyextra->defLitText.resize(0);
                                          yyextra->defVarArgs = FALSE;
                                          //printf("Guard check: %s!=%s || %d\n",
                                          //    qPrint(yyextra->defName),qPrint(yyextra->lastGuardName),yyextra->expectGuard);
                                          if (yyextra->curlyCount>0 || yyextra->defName!=yyextra->lastGuardName || !yyextra->expectGuard)
                                          { // define may appear in the output
                                            QCString def = yyextra->potentialDefine + yyextra->defName;
                                            outputString(yyscanner,def);
                                            yyextra->quoteArg=FALSE;
                                            yyextra->insideComment=FALSE;
                                            if (yyextra->insideCS) yyextra->defText="1"; // for C#, use "1" as define text
                                            BEGIN(DefineText);
                                          }
                                          else // define is a guard => hide
                                          {
                                            //printf("Found a guard %s\n",yytext);
                                            yyextra->guardName = yytext;
                                            yyextra->lastGuardName.resize(0);
                                            BEGIN(Start);
                                          }
                                          yyextra->expectGuard=FALSE;
                                        }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1142 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // define with content
                                          //printf("Define '%s'\n",yytext);
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = -1;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defText.resize(0);
                                          yyextra->defLitText.resize(0);
                                          yyextra->defName = yytext;
                                          yyextra->defVarArgs = FALSE;
                                          QCString def = yyextra->potentialDefine +
                                                         yyextra->defName         +
                                                         yyextra->defArgsStr      ;
                                          outputString(yyscanner,def);
                                          yyextra->quoteArg=FALSE;
                                          yyextra->insideComment=FALSE;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1159 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defExtraSpacing+="\n";
                                          yyextra->defContinue = true;
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1164 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->defExtraSpacing+=yytext; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1165 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->defArgsStr+=yytext; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1166 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->defArgsStr+=yytext; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1167 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          extraSpacing(yyscanner);
                                          yyextra->defArgsStr+=yytext;
                                          QCString def = yyextra->potentialDefine +
                                                         yyextra->defName         +
                                                         yyextra->defArgsStr      +
                                                         yyextra->defExtraSpacing ;
                                          outputString(yyscanner,def);
                                          yyextra->quoteArg=FALSE;
                                          yyextra->insideComment=FALSE;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1179 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // Variadic macro
                                          yyextra->defVarArgs = TRUE;
                                          yyextra->defArgsStr+=yytext;
                                          yyextra->argMap.emplace(std::string("__VA_ARGS__"),yyextra->defArgs);
                                          yyextra->defArgs++;
                                        }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1185 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          //printf("Define addArg(%s)\n",yytext);
                                          QCString argName=yytext;
                                          yyextra->defVarArgs = yytext[yyleng-1]=='.';
                                          if (yyextra->defVarArgs) // strip ellipsis
                                          {
                                            argName=argName.left(argName.length()-3);
                                          }
                                          argName = argName.stripWhiteSpace();
                                          yyextra->defArgsStr+=yytext;
                                          yyextra->argMap.emplace(toStdString(argName),yyextra->defArgs);
                                          yyextra->defArgs++;
                                          extraSpacing(yyscanner);
                                        }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"                       {
                                          yyextra->defText+=yytext;
                                          yyextra->defLitText+=yytext;
                                          yyextra->insideComment=TRUE;
                                        }
<DefineText>"* /"                       {
                                          yyextra->defText+=yytext;
                                          yyextra->defLitText+=yytext;
                                          yyextra->insideComment=FALSE;
                                        }
  */
case 150:
YY_RULE_SETUP
#line 1211 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defText+=yytext;
                                          yyextra->defLitText+=yytext;
                                          yyextra->lastCContext=YY_START;
                                          yyextra->commentCount=1;
                                          BEGIN(CopyCComment);
                                        }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1218 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          yyextra->lastCPPContext=YY_START;
                                          yyextra->defLitText+=' ';
                                          BEGIN(SkipCPPComment);
                                        }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1224 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (yytext[0]=='/') outputChar(yyscanner,'/');
                                          outputChar(yyscanner,'*');outputChar(yyscanner,'/');
                                          if (--yyextra->commentCount<=0)
                                          {
                                            if (yyextra->lastCContext==Start)
                                              // small hack to make sure that ^... rule will
                                              // match when going to Start... Example: "/*...*/ some stuff..."
                                            {
                                              YY_CURRENT_BUFFER->yy_at_bol=1;
                                            }
                                            BEGIN(yyextra->lastCContext);
                                          }
                                        }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1238 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1241 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'/');outputChar(yyscanner,'*');
                                          //yyextra->commentCount++;
                                        }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1245 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1248 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport || !yyextra->isSpecialComment)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->fenceSize=(int)yyleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1261 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport || !yyextra->isSpecialComment)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->fenceSize=(int)yyleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1274 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          yyextra->yyLineNr+=QCString(yytext).contains('\n');
                                        }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1278 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          yyextra->yyLineNr+=QCString(yytext).contains('\n');
                                          yyextra->fenceSize=0;
                                          if (yytext[1]=='f')
                                          {
                                            yyextra->blockName="f";
                                          }
                                          else
                                          {
                                            QCString bn=&yytext[1];
                                            int i = bn.find('{'); // for \code{.c}
                                            if (i!=-1) bn=bn.left(i);
                                            yyextra->blockName=bn.stripWhiteSpace();
                                          }
                                          BEGIN(SkipVerbatim);
                                        }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1295 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{}// escaped cond command
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1296 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // cond command in a skipped cond section, this section has to be skipped as well
                                          // but has to be recorded to match the endcond command
                                          startCondSection(yyscanner," ");
                                        }
	YY_BREAK
case 162:
/* rule 162 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1300 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,"@iliteral{code}",15);
                                          yyextra->javaBlock=1;
                                          BEGIN(JavaDocVerbatimCode);
                                        }
	YY_BREAK
case 163:
/* rule 163 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1305 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,"@iliteral",9);
                                          yyextra->javaBlock=1;
                                          BEGIN(JavaDocVerbatimCode);
                                        }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1310 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // escaped @cond
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1313 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // conditional section
                                          yyextra->ccomment=TRUE;
                                          yyextra->condCtx=YY_START;
                                          BEGIN(CondLineCpp);
                                        }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1318 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // conditional section
                                          yyextra->ccomment=FALSE;
                                          yyextra->condCtx=YY_START;
                                          BEGIN(CondLineC);
                                        }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1323 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          startCondSection(yyscanner,yytext);
                                          if (yyextra->skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
                                              outputArray(yyscanner,"*/",2);
                                              yyextra->ccomment=TRUE;
                                            }
                                            else
                                            {
                                              yyextra->ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1344 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // non-guard character
                                          unput(*yytext);
                                          startCondSection(yyscanner," ");
                                          if (yyextra->skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
                                              outputArray(yyscanner,"*/",2);
                                              yyextra->ccomment=TRUE;
                                            }
                                            else
                                            {
                                              yyextra->ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 169:
/* rule 169 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1366 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // no guard
                                          if (YY_START==SkipCComment)
                                          {
                                            yyextra->ccomment=TRUE;
                                            // end C comment
                                            outputArray(yyscanner,"*/",2);
                                          }
                                          else
                                          {
                                            yyextra->ccomment=FALSE;
                                          }
                                          yyextra->condCtx=YY_START;
                                          startCondSection(yyscanner," ");
                                          BEGIN(SkipCond);
                                        }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1381 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1382 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1383 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1384 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->ccomment=FALSE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1385 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->ccomment=TRUE; }
	YY_BREAK
case 175:
/* rule 175 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
yyg->yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1386 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (!yyextra->skip)
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                          }
                                        }
	YY_BREAK
case 176:
/* rule 176 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1392 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          bool oldSkip = yyextra->skip;
                                          endCondSection(yyscanner);
                                          if (oldSkip && !yyextra->skip)
                                          {
                                            if (yyextra->ccomment)
                                            {
                                              outputArray(yyscanner,"/** ",4);
                                            }
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 177:
/* rule 177 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1404 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          bool oldSkip = yyextra->skip;
                                          endCondSection(yyscanner);
                                          if (oldSkip && !yyextra->skip)
                                          {
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1412 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ /* end of verbatim block */
                                          outputArray(yyscanner,yytext,yyleng);
                                          if (yytext[1]=='f' && yyextra->blockName=="f")
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                          else if (&yytext[4]==yyextra->blockName)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1423 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          if (yyextra->fenceSize==(yy_size_t)yyleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1430 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          if (yyextra->fenceSize==(yy_size_t)yyleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1437 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1440 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (yyextra->javaBlock==0)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            yyextra->javaBlock++;
                                            outputArray(yyscanner,yytext,(int)yyleng);
                                          }
                                        }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1451 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (yyextra->javaBlock==0)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            yyextra->javaBlock--;
                                            if (yyextra->javaBlock==0)
                                            {
                                              outputArray(yyscanner," @endiliteral ",14);
                                              BEGIN(SkipCComment);
                                            }
                                            else
                                            {
                                              outputArray(yyscanner,yytext,(int)yyleng);
                                            }
                                          }
                                        }
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 1470 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ /* new line in verbatim block */
                                          outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1473 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ /* any other character */
                                          outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1476 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 1479 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->yyLineNr++;
                                          outputChar(yyscanner,'\n');
                                        }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1483 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1486 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=escapeAt(yytext);
                                        }
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 1490 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=" ";
                                          yyextra->yyLineNr++;
                                          yyextra->yyMLines++;
                                        }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1496 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=yytext;
                                          BEGIN(yyextra->lastCContext);
                                        }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 1501 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->yyLineNr++;
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=' ';
                                        }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1506 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (yyextra->lastCContext==SkipCPPBlock)
                                          {
                                            BEGIN(SkipCommand);
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
                                        }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1516 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ BEGIN(yyextra->lastCContext); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1517 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1518 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1519 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 1520 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1521 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1522 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 1525 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          unput(*yytext);
                                          BEGIN(yyextra->lastCPPContext);
                                        }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1529 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'/');outputChar(yyscanner,'*');
                                        }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1532 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'/');outputChar(yyscanner,'/');
                                        }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1535 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1538 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1541 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1542 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1543 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1544 "D:/LIB/C_C++/doxygen-master/src/pre.l"

	YY_BREAK
case 210:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1545 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->quoteArg=TRUE;
                                          yyextra->idStart=true;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1551 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          if (YY_START == DefineText) outputSpaces(yyscanner,yytext);
                                          if (yyextra->quoteArg)
                                          {
                                            yyextra->defText+="\"";
                                          }
                                          if (yyextra->defArgs>0)
                                          {
                                            auto it = yyextra->argMap.find(yytext);
                                            if (it!=yyextra->argMap.end())
                                            {
                                              int n = it->second;
                                              yyextra->defText+='@';
                                              yyextra->defText+=QCString().setNum(n);
                                            }
                                            else
                                            {
                                              if (yyextra->idStart)
                                              {
                                                warn(yyextra->fileName,yyextra->yyLineNr,
                                                  "'#' is not followed by a macro parameter '%s': '%s'",
                                                  qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                              }
                                              yyextra->defText+=yytext;
                                            }
                                          }
                                          else
                                          {
                                            yyextra->defText+=yytext;
                                          }
                                          if (yyextra->quoteArg)
                                          {
                                            yyextra->defText+="\"";
                                          }
                                          yyextra->quoteArg=FALSE;
                                          yyextra->idStart=false;
                                        }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1589 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=yytext;
                                        }
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 1593 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          outputChar(yyscanner,'\n');
                                          yyextra->defText += ' ';
                                          yyextra->yyLineNr++;
                                          yyextra->yyMLines++;
                                        }
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 1600 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          QCString comment=extractTrailingComment(yyextra->defLitText);
                                          yyextra->defText = yyextra->defText.stripWhiteSpace();
                                          if (yyextra->defText.startsWith("##"))
                                          {
                                            warn(yyextra->fileName,yyextra->yyLineNr,
                                                 "'##' cannot occur at the beginning of a macro definition '%s': '%s'",
                                                 qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                          }
                                          else if (yyextra->defText.endsWith("##"))
                                          {
                                            warn(yyextra->fileName,yyextra->yyLineNr,
                                                 "'##' cannot occur at the end of a macro definition '%s': '%s'",
                                                 qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                          }
                                          else if (yyextra->defText.endsWith("#"))
                                          {
                                            warn(yyextra->fileName,yyextra->yyLineNr,
                                                 "expected formal parameter after # in macro definition '%s': '%s'",
                                                 qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                          }
                                          yyextra->defLitText+=yytext;
                                          if (!comment.isEmpty())
                                          {
                                            outputString(yyscanner,comment);
                                            yyextra->defLitText=yyextra->defLitText.left(yyextra->defLitText.length()-comment.length()-1);
                                          }
                                          outputChar(yyscanner,'\n');
                                          Define *def=0;
                                          //printf("Define name='%s' text='%s' litTexti='%s'\n",qPrint(yyextra->defName),qPrint(yyextra->defText),qPrint(yyextra->defLitText));
                                          if (yyextra->includeStack.empty() || yyextra->curlyCount>0)
                                          {
                                            addMacroDefinition(yyscanner);
                                          }
                                          def=isDefined(yyscanner,yyextra->defName);
                                          if (def==0) // new define
                                          {
                                            //printf("new define '%s'!\n",qPrint(yyextra->defName));
                                            addDefine(yyscanner);
                                          }
                                          else if (def /*&& macroIsAccessible(def)*/)
                                               // name already exists
                                          {
                                            //printf("existing define!\n");
                                            //printf("define found\n");
                                            if (def->undef) // undefined name
                                            {
                                              def->undef = FALSE;
                                              def->name = yyextra->defName;
                                              def->definition = yyextra->defText.stripWhiteSpace();
                                              def->nargs = yyextra->defArgs;
                                              def->fileName = yyextra->fileName;
                                              def->lineNr = yyextra->yyLineNr-yyextra->yyMLines;
                                              def->columnNr = yyextra->yyColNr;
                                            }
                                            else
                                            {
                                              //printf("error: define %s is defined more than once!\n",qPrint(yyextra->defName));
                                            }
                                          }
                                          yyextra->argMap.clear();
                                          yyextra->yyLineNr++;
                                          yyextra->yyColNr=1;
                                          yyextra->lastGuardName.resize(0);
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1666 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ outputString(yyscanner,yytext);
                                          yyextra->defText += ' ';
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1670 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ outputString(yyscanner,substitute(yytext,"##","  "));
                                          yyextra->defText += "##";
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1674 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ outputString(yyscanner,substitute(yytext,"@@","  "));
                                          yyextra->defText += "@@";
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1678 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          if (!yyextra->insideComment)
                                          {
                                            BEGIN(SkipDoubleQuote);
                                          }
                                        }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1687 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          if (!yyextra->insideComment)
                                          {
                                            BEGIN(SkipSingleQuote);
                                          }
                                        }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1696 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ outputSpaces(yyscanner,yytext);
                                          yyextra->defText += yytext;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1700 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ outputSpaces(yyscanner,yytext);
                                          yyextra->defText += yytext;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1704 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1710 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputSpaces(yyscanner,yytext);
                                          yyextra->defText += yytext;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 1715 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1721 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ outputSpace(yyscanner,yytext[0]);
                                          yyextra->defText    += *yytext;
                                          yyextra->defLitText += *yytext;
                                        }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1725 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{ outputSpace(yyscanner,yytext[0]);
                                          yyextra->defText    += *yytext;
                                          yyextra->defLitText += *yytext;
                                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(LexCopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringCs):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(CopyStringFtnDouble):
case YY_STATE_EOF(CopyRawString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(JavaDocVerbatimCode):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
case YY_STATE_EOF(IDLquote):
#line 1729 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          DBG_CTX((stderr,"End of include file\n"));
                                          //printf("Include stack depth=%d\n",yyextra->includeStack.size());
                                          if (yyextra->includeStack.empty())
                                          {
                                            DBG_CTX((stderr,"Terminating scanner!\n"));
                                            yyterminate();
                                          }
                                          else
                                          {
                                            QCString toFileName = yyextra->fileName;
                                            const std::unique_ptr<FileState> &fs=yyextra->includeStack.back();
                                            //fileDefineCache->merge(yyextra->fileName,fs->fileName);
                                            YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
                                            yy_switch_to_buffer( fs->bufState, yyscanner );
                                            yy_delete_buffer( oldBuf, yyscanner );
                                            yyextra->yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            yyextra->inputBuf    = fs->oldFileBuf;
                                            yyextra->inputBufPos = fs->oldFileBufPos;
                                            yyextra->curlyCount  = fs->curlyCount;
                                            setFileName(yyscanner,fs->fileName);
                                            DBG_CTX((stderr,"######## FileName %s\n",qPrint(yyextra->fileName)));

                                            // Deal with file changes due to
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+yyextra->fileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",yyextra->yyLineNr,qPrint(yyextra->fileName));
                                            outputString(yyscanner,lineStr);

                                            yyextra->includeStack.pop_back();

                                            {
                                              std::lock_guard<std::mutex> lock(g_globalDefineMutex);
                                              // to avoid deadlocks we allow multiple threads to process the same header file.
                                              // The first one to finish will store the results globally. After that the
                                              // next time the same file is encountered, the stored data is used and the file
                                              // is not processed again.
                                              if (!g_defineManager.alreadyProcessed(toFileName.str()))
                                              {
                                                // now that the file is completely processed, prevent it from processing it again
                                                g_defineManager.addInclude(yyextra->fileName.str(),toFileName.str());
                                                g_defineManager.store(toFileName.str(),yyextra->localDefines);
                                              }
                                              else
                                              {
                                                if (Debug::isFlagSet(Debug::Preprocessor))
                                                {
                                                  Debug::print(Debug::Preprocessor,0,"#include %s: was already processed by another thread! not storing data...\n",qPrint(toFileName));
                                                }
                                              }
                                            }
                                            // move the local macros definitions for in this file to the translation unit context
                                            for (const auto &kv : yyextra->localDefines)
                                            {
                                              auto pair = yyextra->contextDefines.insert(kv);
                                              if (!pair.second) // define already in context -> replace with local version
                                              {
                                                yyextra->contextDefines.erase(pair.first);
                                                yyextra->contextDefines.insert(kv);
                                              }
                                            }
                                            yyextra->localDefines.clear();
                                          }
                                        }
	YY_BREAK
case 227:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 1795 "D:/LIB/C_C++/doxygen-master/src/pre.l"
case 228:
YY_RULE_SETUP
#line 1795 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond || YY_START==IDLquote)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->lastCContext=YY_START;
                                            yyextra->commentCount=1;
                                            if (yyleng==3)
                                            {
                                              yyextra->isSpecialComment = true;
                                              yyextra->lastGuardName.resize(0); // reset guard in case the #define is documented!
                                            }
                                            else
                                            {
                                              yyextra->isSpecialComment = false;
                                            }
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 1817 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond || getLanguageFromFileName(yyextra->fileName)==SrcLangExt_Fortran || YY_START==IDLquote)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->lastCPPContext=YY_START;
                                            if (yyleng==3)
                                            {
                                              yyextra->isSpecialComment = true;
                                              yyextra->lastGuardName.resize(0); // reset guard in case the #define is documented!
                                            }
                                            else
                                            {
                                              yyextra->isSpecialComment = false;
                                            }
                                            BEGIN(SkipCPPComment);
                                          }
                                        }
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1838 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 1842 "D:/LIB/C_C++/doxygen-master/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 1847 "D:/LIB/C_C++/doxygen-master/src/pre.l"
ECHO;
	YY_BREAK
#line 6349 "D:/DEV/DOXYGEN/generated_src/pre.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 66);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1449 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 66;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1449 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1448);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1847 "D:/LIB/C_C++/doxygen-master/src/pre.l"


/////////////////////////////////////////////////////////////////////////////////////

static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  yy_size_t bytesInBuf = state->inputBuf->curPos()-state->inputBufPos;
  yy_size_t bytesToCopy = std::min(max_size,bytesInBuf);
  memcpy(buf,state->inputBuf->data()+state->inputBufPos,bytesToCopy);
  state->inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

static void setFileName(yyscan_t yyscanner,const QCString &name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  bool ambig;
  FileInfo fi(name.str());
  state->fileName=fi.absFilePath();
  state->yyFileDef=findFileDef(Doxygen::inputNameLinkedMap,state->fileName,ambig);
  if (state->yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    state->yyFileDef=findFileDef(Doxygen::includeNameLinkedMap,state->fileName,ambig);
  }
  //printf("setFileName(%s) state->fileName=%s state->yyFileDef=%p\n",
  //    name,qPrint(state->fileName),state->yyFileDef);
  if (state->yyFileDef && state->yyFileDef->isReference()) state->yyFileDef=0;
  state->insideIDL = getLanguageFromFileName(state->fileName)==SrcLangExt_IDL;
  state->insideCS = getLanguageFromFileName(state->fileName)==SrcLangExt_CSharp;
  state->insideFtn = getLanguageFromFileName(state->fileName)==SrcLangExt_Fortran;
  state->isSource = guessSection(state->fileName);
}

static void incrLevel(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  state->levelGuard.push(false);
  //printf("%s line %d: incrLevel %d\n",qPrint(yyextra->fileName),yyextra->yyLineNr,yyextra->levelGuard.size());
}

static void decrLevel(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("%s line %d: decrLevel %d\n",qPrint(state->fileName),state->yyLineNr,state->levelGuard.size());
  if (!state->levelGuard.empty())
  {
    state->levelGuard.pop();
  }
  else
  {
    warn(state->fileName,state->yyLineNr,"More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->levelGuard.empty())
  {
    warn(state->fileName,state->yyLineNr,"Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return state->levelGuard.top();
  }
}

static void setCaseDone(yyscan_t yyscanner,bool value)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  state->levelGuard.top()=value;
}


static FileState *checkAndOpenFile(yyscan_t yyscanner,const QCString &fileName,bool &alreadyProcessed)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  alreadyProcessed = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",qPrint(fileName));
  FileInfo fi(fileName.str());
  if (fi.exists() && fi.isFile())
  {
    const StringVector &exclPatterns = Config_getList(EXCLUDE_PATTERNS);
    if (patternMatch(fi,exclPatterns)) return 0;

    QCString absName = fi.absFilePath();

    // global guard
    if (state->curlyCount==0) // not #include inside { ... }
    {
      std::lock_guard<std::mutex> lock(g_globalDefineMutex);
      if (g_defineManager.alreadyProcessed(absName.str()))
      {
        alreadyProcessed = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
    }
    // check include stack for absName

    alreadyProcessed = std::any_of(
      state->includeStack.begin(),
      state->includeStack.end(),
      [absName](const std::unique_ptr<FileState> &lfs)
        { return lfs->fileName==absName; }
    );

    if (alreadyProcessed)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",qPrint(absName));

    fs = new FileState(static_cast<uint>(fi.size())+4096);
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = state->inputBuf;
      fs->oldFileBufPos = state->inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(yyscan_t yyscanner, const QCString &fileName,bool localInclude,bool &alreadyProcessed)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("** findFile(%s,%d) state->fileName=%s\n",qPrint(fileName),localInclude,qPrint(state->fileName));
  if (Portable::isAbsolutePath(fileName))
  {
    FileState *fs = checkAndOpenFile(yyscanner,fileName,alreadyProcessed);
    if (fs)
    {
      setFileName(yyscanner,fileName);
      state->yyLineNr=1;
      return fs;
    }
    else if (alreadyProcessed)
    {
      return 0;
    }
  }
  if (localInclude && !state->fileName.isEmpty())
  {
    FileInfo fi(state->fileName.str());
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE))+"/"+fileName;
      FileState *fs = checkAndOpenFile(yyscanner,absName,alreadyProcessed);
      if (fs)
      {
        setFileName(yyscanner,absName);
        state->yyLineNr=1;
        return fs;
      }
      else if (alreadyProcessed)
      {
        return 0;
      }
    }
  }
  if (state->pathList.empty())
  {
    return 0;
  }
  for (auto path : state->pathList)
  {
    std::string absName = (path+"/"+fileName).str();
    //printf("  Looking for %s in %s\n",fileName,path.c_str());
    FileState *fs = checkAndOpenFile(yyscanner,absName.c_str(),alreadyProcessed);
    if (fs)
    {
      setFileName(yyscanner,absName.c_str());
      state->yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyProcessed)
    {
      return 0;
    }
  }
  return 0;
}

static QCString extractTrailingComment(const QCString &s)
{
  if (s.isEmpty()) return "";
  int i=(int)s.length()-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
        {
          i--;
          if (i>=0 && s[i]=='*') // end of a comment block
          {
            i--;
            while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
            if (i==0)
            {
              i++;
            }
            // only /*!< or /**< are treated as a comment for the macro name,
            // otherwise the comment is treated as part of the macro definition
            return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : "";
          }
          else
          {
            return "";
          }
        }
        break;
        // whitespace or line-continuation
      case ' ':
      case '\t':
      case '\r':
      case '\n':
      case '\\':
        break;
      default:
        return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint pos);
static void unputChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos,char c);
static bool expandExpression(yyscan_t yyscanner,QCString &expr,QCString *rest,int pos,int level);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
        c=s.at(i++);
        if (c=='"')
        {
          result+="\\\"";
          inString=TRUE;
        }
        else if (c=='\'')
        {
          result+=c;
          inChar=TRUE;
        }
        else
        {
          result+=c;
        }
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
        c=s.at(i++);
        if (c=='\'')
        {
          result+='\'';
          inChar=FALSE;
        }
        else if (c=='\\')
        {
          result+="\\\\";
        }
        else
        {
          result+=c;
        }
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
        c=s.at(i++);
        if (c=='"')
        {
          result+="\\\"";
          inString= pc=='\\';
        }
        else if (c=='\\')
          result+="\\\\";
        else
          result+=c;
        pc=c;
      }
    }
  }
  //printf("stringize '%s'->'%s'\n",qPrint(s),qPrint(result));
  return result;
}

/*! Execute all ## operators in expr.
 * If the macro name before or after the operator contains a no-rescan
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  if (expr.isEmpty()) return;
  //printf("processConcatOperators: in='%s'\n",qPrint(expr));
  std::string e = expr.str();
  static const reg::Ex r(R"(\s*##\s*)");
  reg::Iterator end;

  size_t i=0;
  for (;;)
  {
    reg::Iterator it(e,r,i);
    if (it!=end)
    {
      const auto &match = *it;
      size_t n = match.position();
      size_t l = match.length();
      //printf("Match: '%s'\n",qPrint(expr.mid(i)));
      if (n+l+1<e.length() && e[static_cast<int>(n+l)]=='@' && expr[static_cast<int>(n+l+1)]=='-')
      {
        // remove no-rescan marker after ID
        l+=2;
      }
      //printf("found '%s'\n",qPrint(expr.mid(n,l)));
      // remove the ## operator and the surrounding whitespace
      e=e.substr(0,n)+e.substr(n+l);
      int k=static_cast<int>(n)-1;
      while (k>=0 && isId(e[k])) k--; 
      if (k>0 && e[k]=='-' && e[k-1]=='@')
      {
        // remove no-rescan marker before ID
        e=e.substr(0,k-1)+e.substr(k+1);
        n-=2;
      }
      i=n;
    }
    else
    {
      break;
    }
  }

  expr = e;

  //printf("processConcatOperators: out='%s'\n",qPrint(expr));
}

static void returnCharToStream(yyscan_t yyscanner,char c)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  unput(c);
}

static inline void addTillEndOfString(yyscan_t yyscanner,const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(yyscanner,expr,rest,pos))!=EOF && cc!=0)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(yyscanner,expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr.
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(yyscan_t yyscanner,const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result,int level)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf(">replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s') level=%d\n",qPrint(expr),rest ? qPrint(*rest) : 0,pos,qPrint(def->name),state->levelGuard.size());
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(yyscanner,expr,rest,j))!=EOF && isspace(cc))
  {
    len++;
    getNextChar(yyscanner,expr,rest,j);
  }
  if (cc!='(')
  {
    unputChar(yyscanner,expr,rest,j,' ');
    return FALSE;
  }
  getNextChar(yyscanner,expr,rest,j); // eat the '(' character

  std::map<std::string,std::string> argTable;  // list of arguments
  QCString arg;
  int argCount=0;
  bool done=FALSE;

  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) &&
        ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
          )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
        int lvl=1;
        arg+=c;
        //char term='\0';
        while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
        {
          c=(char)cc;
          //printf("processing %c: term=%c (%d)\n",c,term,term);
          if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
          {
            arg+=c;
            addTillEndOfString(yyscanner,expr,rest,j,c,arg);
          }
          if (c==')')
          {
            lvl--;
            arg+=c;
            if (lvl==0) break;
          }
          else if (c=='(')
          {
            lvl++;
            arg+=c;
          }
          else
            arg+=c;
        }
      }
      else if (c==')' || c==',') // last or next argument found
      {
        if (c==',' && argCount==def->nargs-1 && def->varArgs)
        {
          arg=arg.stripWhiteSpace();
          arg+=',';
        }
        else
        {
          QCString argKey;
          argKey.sprintf("@%d",argCount++); // key name
          arg=arg.stripWhiteSpace();
          // add argument to the lookup table
          argTable.emplace(toStdString(argKey), toStdString(arg));
          arg.resize(0);
          if (c==')') // end of the argument list
          {
            done=TRUE;
          }
        }
      }
      else if (c=='\"') // append literal strings
      {
        arg+=c;
        bool found=FALSE;
        while (!found && (cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
        {
          found = cc=='"';
          if (cc=='\\')
          {
            c=(char)cc;
            arg+=c;
            if ((cc=getNextChar(yyscanner,expr,rest,j))==EOF || cc==0) break;
          }
          c=(char)cc;
          arg+=c;
        }
      }
      else if (c=='\'') // append literal characters
      {
        arg+=c;
        bool found=FALSE;
        while (!found && (cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
        {
          found = cc=='\'';
          if (cc=='\\')
          {
            c=(char)cc;
            arg+=c;
            if ((cc=getNextChar(yyscanner,expr,rest,j))==EOF || cc==0) break;
          }
          c=(char)cc;
          arg+=c;
        }
      }
      else if (c=='/') // possible start of a comment
      {
        char prevChar = '\0';
        arg+=c;
        if ((cc=getCurrentChar(yyscanner,expr,rest,j)) == '*') // we have a comment
        {
          while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
          {
            c=(char)cc;
            arg+=c;
            if (c == '/' && prevChar == '*') break; // we have an end of comment
            prevChar = c;
          }
        }
      }
      else // append other characters
      {
        arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || // same number of arguments
      (argCount>=def->nargs-1 && def->varArgs)) // variadic macro with at least as many
                                                // params as the non-variadic part (see bug731985)
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: '%s'\n",qPrint(d));
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
        if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
        {
          k+=2;
          resExpr+="@@"; // we unescape these later
        }
        else if (d.at(k+1)=='-') // no-rescan marker
        {
          k+=2;
          resExpr+="@-";
        }
        else // argument marker => read the argument number
        {
          QCString key="@";
          bool hash=FALSE;
          int l=k-1;
          // search for ## backward
          if (l>=0 && d.at(l)=='"') l--;
          while (l>=0 && d.at(l)==' ') l--;
          if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
          k++;
          // scan the number
          while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
          if (!hash)
          {
            // search for ## forward
            l=k;
            if (l<(int)d.length() && d.at(l)=='"') l++;
            while (l<(int)d.length() && d.at(l)==' ') l++;
            if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
          }
          //printf("request key %s result %s\n",qPrint(key),argTable[key]->data());
          auto it = argTable.find(key.str());
          if (it!=argTable.end())
          {
            QCString substArg = it->second.c_str();
            //printf("substArg='%s'\n",qPrint(substArg));
            // only if no ## operator is before or after the argument
            // marker we do macro expansion.
            if (!hash)
            {
              expandExpression(yyscanner,substArg,0,0,level+1);
            }
            if (inString)
            {
              //printf("'%s'=stringize('%s')\n",qPrint(stringize(*subst)),subst->data());

              // if the marker is inside a string (because a # was put
              // before the macro name) we must escape " and \ characters
              resExpr+=stringize(substArg);
            }
            else
            {
              if (hash && substArg.isEmpty())
              {
                resExpr+="@E"; // empty argument will be remove later on
              }
              else if (state->nospaces)
              {
                resExpr+=substArg;
              }
              else
              {
                resExpr+=" "+substArg+" ";
              }
            }
          }
        }
      }
      else // no marker, just copy
      {
        if (!inString && d.at(k)=='\"')
        {
          inString=TRUE; // entering a literal string
        }
        else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
        {
          inString=FALSE; // leaving a literal string
        }
        resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("<replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s',result='%s') level=%d return=TRUE\n",qPrint(expr),rest ? qPrint(*rest) : 0,pos,qPrint(def->name),qPrint(result),state->levelGuard.size());
    return TRUE;
  }
  //printf("<replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s',result='%s') level=%d return=FALSE\n",qPrint(expr),rest ? qPrint(*rest) : 0,pos,qPrint(def->name),qPrint(result),state->levelGuard.size());
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n;
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\')))
        // continue as long as no " is found, but ignoring \", but not \\"
      {
        ppc=pc;
        pc=c;
        c=expr.at(p);
        p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length())
      {
        c=expr.at(p);
        if (c=='*')  // Start of C comment
        {
          p++;
          while (p<(int)expr.length() && !(pc=='*' && c=='/'))
          {
            pc=c;
            c=expr.at(p++);
          }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

#define MAX_EXPANSION_DEPTH 50

/*! performs recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 */
static bool expandExpression(yyscan_t yyscanner,QCString &expr,QCString *rest,int pos,int level)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf(">expandExpression(expr='%s',rest='%s',pos=%d,level=%d)\n",qPrint(expr),rest ? qPrint(*rest) : "", pos, level);
  if (expr.isEmpty())
  {
    //printf("<expandExpression: empty\n");
    return TRUE;
  }
  if (state->expanded.find(expr.str())!=state->expanded.end() &&
      level>MAX_EXPANSION_DEPTH) // check for too deep recursive expansions
  {
    //printf("<expandExpression: already expanded expr='%s'\n",qPrint(expr));
    return FALSE;
  }
  else
  {
    state->expanded.insert(expr.str());
  }
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  int startPos = pos;
  int samePosCount=0;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf(" p=%d macroName=%s\n",p,qPrint(macroName));
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (state->expandedDict.find(macroName.str())==state->expandedDict.end()) // expand macro
      {
        Define *def=isDefined(yyscanner,macroName);
        if (macroName=="defined")
        {
          //printf("found defined inside macro definition '%s'\n",qPrint(expr.right(expr.length()-p)));
          definedTest=TRUE;
        }
        else if (definedTest) // macro name was found after defined
        {
          if (def) expMacro = " 1 "; else expMacro = " 0 ";
          replaced=TRUE;
          len=l;
          definedTest=FALSE;
        }
        else if (def && def->nargs==-1) // simple macro
        {
          // substitute the definition of the macro
          //printf("macro '%s'->'%s'\n",qPrint(macroName),qPrint(def->definition));
          if (state->nospaces)
          {
            expMacro=def->definition.stripWhiteSpace();
          }
          else
          {
            expMacro=" "+def->definition.stripWhiteSpace()+" ";
          }
          //expMacro=def->definition.stripWhiteSpace();
          replaced=TRUE;
          len=l;
          //printf("simple macro expansion='%s'->'%s'\n",qPrint(macroName),qPrint(expMacro));
        }
        else if (def && def->nargs>=0) // function macro
        {
          //printf(" >>>> call replaceFunctionMacro expr='%s'\n",qPrint(expr));
          replaced=replaceFunctionMacro(yyscanner,expr,rest,p+l,len,def,expMacro,level);
          //printf(" <<<< call replaceFunctionMacro: replaced=%d\n",replaced);
          len+=l;
        }
        //printf(" macroName='%s' expMacro='%s' replaced=%d\n",qPrint(macroName),qPrint(expMacro),replaced);

        if (replaced) // expand the macro and rescan the expression
        {
          //printf(" replacing '%s'->'%s'\n",expr.mid(p,qPrint(len)),qPrint(expMacro));
          QCString resultExpr=expMacro;
          QCString restExpr=expr.right(expr.length()-len-p);
          processConcatOperators(resultExpr);
          //printf(" macroName=%s restExpr='%s' def->nonRecursive=%d\n",qPrint(macroName),qPrint(restExpr),def->nonRecursive);
          bool expanded=false;
          if (def && !def->nonRecursive)
          {
            state->expandedDict.emplace(toStdString(macroName),def);
            expanded = expandExpression(yyscanner,resultExpr,&restExpr,0,level+1);
            state->expandedDict.erase(toStdString(macroName));
          }
    else if (def && def->nonRecursive)
    {
      expanded = true;
    }
          if (expanded)
          {
            expr=expr.left(p)+resultExpr+restExpr;
            //printf(" new expression: '%s' old i=%d new i=%d\n",qPrint(expr),i,p);
            i=p;
          }
          else
          {
            expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
            i=p+l+2;
          }
        }
        else // move to the next macro name
        {
          //printf(" moving to the next macro old i=%d new i=%d\n",i,p+l);
          i=p+l;
        }
      }
      else // move to the next macro name
      {
        expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
        //printf("macro already expanded, moving to the next macro expr=%s\n",qPrint(expr));
        i=p+l+2;
        //i=p+l;
      }
      // check for too many inplace expansions without making progress
      if (i==startPos)
      {
        samePosCount++;
      }
      else
      {
        startPos=i;
        samePosCount=0;
      }
      if (samePosCount>MAX_EXPANSION_DEPTH)
      {
        break;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
  //printf("<expandExpression(expr='%s',rest='%s',pos=%d,level=%d)\n",qPrint(expr),rest ? qPrint(*rest) : "", pos,level);
  return TRUE;
}

/*! @brief Process string or character literal.
 *
 * \a inputStr should point to the start of a string or character literal.
 * the routine will return a pointer to just after the end of the literal
 * the character making up the literal will be added to \a result.
 */
static const char *processUntilMatchingTerminator(const char *inputStr,QCString &result)
{
  if (inputStr==0) return inputStr;
  char term = *inputStr; // capture start character of the literal
  if (term!='\'' && term!='"') return inputStr; // not a valid literal
  char c=term;
  // output start character
  result+=c;
  inputStr++;
  while ((c=*inputStr)) // while inside the literal
  {
    if (c==term) // found end marker of the literal
    {
      // output end character and stop
      result+=c;
      inputStr++;
      break;
    }
    else if (c=='\\') // escaped character, process next character
                      // as well without checking for end marker.
    {
      result+=c;
      inputStr++;
      c=*inputStr;
      if (c==0) break; // unexpected end of string after escape character
    }
    result+=c;
    inputStr++;
  }
  return inputStr;
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
static QCString removeIdsAndMarkers(const QCString &s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  if (s.isEmpty()) return s;
  const char *p=s.data();
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
        if (*(p+1)=='@')
        {
          result+=c;
        }
        else if (*(p+1)=='E')
        {
          // skip
        }
        p+=2;
      }
      else if (isdigit(c)) // number
      {
        result+=c;
        p++;
        inNum=TRUE;     
      }
      else if (c=='\'') // quoted character
      {
        p = processUntilMatchingTerminator(p,result);
      }
      else if (c=='d' && !inNum) // identifier starting with a 'd'
      {
        if (qstrncmp(p,"defined ",8)==0 || qstrncmp(p,"defined(",8)==0)
                   // defined keyword
        {
          p+=7; // skip defined
        }
        else
        {
          result+="0L";
          p++;
          while ((c=*p) && isId(c)) p++;
        }
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
        result+="0L";
        p++;
        while ((c=*p) && isId(c)) p++;
        while ((c=*p) && isspace((uchar)c)) p++;
        if (*p=='(') // undefined function macro
        {
          p++;
          int count=1;
          while ((c=*p++))
          {
            if (c=='(') count++;
            else if (c==')')
            {
              count--;
              if (count==0) break;
            }
            else if (c=='/')
            {
              char pc=c;
              c=*++p;
              if (c=='*') // start of C comment
              {
                while (*p && !(pc=='*' && c=='/')) // search end of comment
                {
                  pc=c;
                  c=*++p;
                }
                p++;
              }
            }
          }
        }
      }
      else if (c=='/') // skip C comments
      {
        char pc=c;
        c=*++p;
        if (c=='*') // start of C comment
        {
          while (*p && !(pc=='*' && c=='/')) // search end of comment
          {
            pc=c;
            c=*++p;
          }
          p++;
        }
        else // oops, not comment but division
        {
          result+=pc;
          goto nextChar;
        }
      }
      else
      {
nextChar:
        result+=c;
        char lc=(char)tolower(c);
        if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
        p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,qPrint(result));
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
static QCString removeMarkers(const QCString &s)
{
  if (s.isEmpty()) return s;
  const char *p=s.data();
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
        case '@': // replace @@ with @
          {
            if (*(p+1)=='@')
            {
              result+=c;
            }
            p+=2;
          }
          break;
        case '/': // skip C comments
          {
            result+=c;
            char pc=c;
            c=*++p;
            if (c=='*') // start of C comment
            {
              while (*p && !(pc=='*' && c=='/')) // search end of comment
              {
                if (*p=='@' && *(p+1)=='@')
                  result+=c,p++;
                else
                  result+=c;
                pc=c;
                c=*++p;
              }
              if (*p) result+=c,p++;
            }
          }
          break;
        case '"': // skip string literals
        case '\'': // skip char literals
          p = processUntilMatchingTerminator(p,result);
          break;
        default:
          {
            result+=c;
            p++;
          }
          break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,qPrint(result));
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

static bool computeExpression(yyscan_t yyscanner,const QCString &expr)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  QCString e=expr;
  state->expanded.clear();
  expandExpression(yyscanner,e,0,0,0);
  //printf("after expansion '%s'\n",qPrint(e));
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing '%s'\n",qPrint(e));
  return state->constExpParser.parse(state->fileName.data(),state->yyLineNr,e.str());
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

static QCString expandMacro(yyscan_t yyscanner,const QCString &name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  QCString n=name;
  state->expanded.clear();
  expandExpression(yyscanner,n,0,0,0);
  n=removeMarkers(n);
  //printf("expandMacro '%s'->'%s'\n",qPrint(name),qPrint(n));
  return n;
}

static void addDefine(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  Define def;
  def.name       = state->defName;
  def.definition = state->defText.stripWhiteSpace();
  def.nargs      = state->defArgs;
  def.fileName   = state->fileName;
  def.fileDef    = state->yyFileDef;
  def.lineNr     = state->yyLineNr-state->yyMLines;
  def.columnNr   = state->yyColNr;
  def.varArgs    = state->defVarArgs;
  //printf("newDefine: %s %s file: %s\n",qPrint(def.name),qPrint(def.definition),
  //    def.fileDef ? qPrint(def.fileDef->name()) : qPrint(def.fileName));
  //printf("newDefine: '%s'->'%s'\n",qPrint(def.name),qPrint(def.definition));
  if (!def.name.isEmpty() &&
      Doxygen::expandAsDefinedSet.find(def.name.str())!=Doxygen::expandAsDefinedSet.end())
  {
    def.isPredefined=TRUE;
  }
  auto it = state->localDefines.find(def.name.str());
  if (it!=state->localDefines.end()) // redefine
  {
    state->localDefines.erase(it);
  }
  state->localDefines.insert(std::make_pair(def.name.str(),def));
}

static void addMacroDefinition(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->skip) return; // do not add this define as it is inside a
                      // conditional section (cond command) that is disabled.

  Define define;
  define.fileName = state->fileName;
  define.lineNr   = state->yyLineNr - state->yyMLines;
  define.columnNr = state->yyColNr;
  define.name     = state->defName;
  define.args     = state->defArgsStr;
  define.fileDef  = state->inputFileDef;

  QCString litText = state->defLitText;
  int l=litText.find('\n');
  if (l>0 && litText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    litText = litText.right(litText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=litText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    litText=litText.mid(l+1,k-l-1)+litText.stripWhiteSpace();
  }
  QCString litTextStripped = state->defLitText.stripWhiteSpace();
  if (litTextStripped.contains('\n')>=1)
  {
    define.definition = litText;
  }
  else
  {
    define.definition = litTextStripped;
  }
  {
    state->macroDefinitions.push_back(define);
  }
}

static inline void outputChar(yyscan_t yyscanner,char c)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.empty() || state->curlyCount>0) state->outputBuf->addChar(c);
}

static inline void outputArray(yyscan_t yyscanner,const char *a,yy_size_t len)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.empty() || state->curlyCount>0) state->outputBuf->addArray(a,static_cast<uint>(len));
}

static inline void outputString(yyscan_t yyscanner,const QCString &a)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.empty() || state->curlyCount>0) state->outputBuf->addArray(a.data(),a.length());
}

static inline void outputSpace(yyscan_t yyscanner,char c)
{
  if (c=='\t') outputChar(yyscanner,'\t');
  else outputChar(yyscanner,' ');
}

static inline void outputSpaces(yyscan_t yyscanner,char *s)
{
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c=='\t') outputChar(yyscanner,'\t');
    else outputChar(yyscanner,' ');
  }
}

static inline void extraSpacing(yyscan_t yyscanner)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->defContinue) return;
  for (int i=0; i< (int)yyleng; i++)
  {
    if (yytext[i] == '\t')
      yyextra->defExtraSpacing+='\t';
    else
      yyextra->defExtraSpacing+=' ';
  }
}

static QCString determineAbsoluteIncludeName(const QCString &curFile,const QCString &incFileName)
{
  bool searchIncludes = Config_getBool(SEARCH_INCLUDES);
  QCString absIncFileName = incFileName;
  FileInfo fi(curFile.str());
  if (fi.exists())
  {
    QCString absName = QCString(fi.dirPath(TRUE))+"/"+incFileName;
    FileInfo fi2(absName.str());
    if (fi2.exists())
    {
      absIncFileName=fi2.absFilePath();
    }
    else if (searchIncludes) // search in INCLUDE_PATH as well
    {
      const StringVector &includePath = Config_getList(INCLUDE_PATH);
      for (const auto &incPath : includePath)
      {
        FileInfo fi3(incPath);
        if (fi3.exists() && fi3.isDir())
        {
          absName = QCString(fi3.absFilePath())+"/"+incFileName;
          //printf("trying absName=%s\n",qPrint(absName));
          FileInfo fi4(absName.str());
          if (fi4.exists())
          {
            absIncFileName=fi4.absFilePath();
            break;
          }
          //printf( "absIncFileName = %s\n", qPrint(absIncFileName) );
        }
      }
    }
    //printf( "absIncFileName = %s\n", qPrint(absIncFileName) );
  }
  return absIncFileName;
}

static void readIncludeFile(yyscan_t yyscanner,const QCString &inc)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = state->fileName;
    FileDef *oldFileDef  = state->yyFileDef;
    int oldLineNr        = state->yyLineNr;
    //printf("Searching for '%s'\n",qPrint(incFileName));

    QCString absIncFileName = determineAbsoluteIncludeName(state->fileName,incFileName);

    // findFile will overwrite state->yyFileDef if found
    FileState *fs;
    bool alreadyProcessed = FALSE;
    //printf("calling findFile(%s)\n",qPrint(incFileName));
    if ((fs=findFile(yyscanner,incFileName,localInclude,alreadyProcessed))) // see if the include file can be found
    {
      {
        std::lock_guard<std::mutex> lock(g_globalDefineMutex);
        g_defineManager.addInclude(oldFileName.str(),absIncFileName.str());
      }

      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<state->includeStack.size();i++)
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        Debug::print(Debug::Preprocessor,0,"#include %s: parsing...\n",qPrint(incFileName));
      }

      if (state->includeStack.empty() && oldFileDef)
      {
        PreIncludeInfo *ii = state->includeRelations.find(absIncFileName);
        if (ii==0)
        {
          bool ambig;
          FileDef *incFd = findFileDef(Doxygen::inputNameLinkedMap,absIncFileName,ambig);
          state->includeRelations.add(
              absIncFileName,
              oldFileDef,
              ambig?nullptr:incFd,
              incFileName,
              localInclude,
              state->isImported
              );
        }
      }

      struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      fs->curlyCount = state->curlyCount;
      state->curlyCount = 0;
      // push the state on the stack
      state->includeStack.emplace_back(fs);
      // set the scanner to the include file

      // Deal with file changes due to
      // #include's within { .. } blocks
      QCString lineStr(state->fileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",qPrint(state->fileName));
      outputString(yyscanner,lineStr);

      DBG_CTX((stderr,"Switching to include file %s\n",qPrint(incFileName)));
      state->expectGuard=TRUE;
      state->inputBuf   = &fs->fileBuf;
      state->inputBufPos=0;
      yy_switch_to_buffer(yy_create_buffer(0, YY_BUF_SIZE, yyscanner),yyscanner);
    }
    else
    {
      if (alreadyProcessed) // if this header was already process we can just copy the stored macros
                           // in the local context
      {
        std::lock_guard<std::mutex> lock(g_globalDefineMutex);
        g_defineManager.addInclude(state->fileName.str(),absIncFileName.str());
        g_defineManager.retrieve(absIncFileName.str(),state->contextDefines);
      }

      if (state->includeStack.empty() && oldFileDef)
      {
        PreIncludeInfo *ii = state->includeRelations.find(absIncFileName);
        if (ii==0)
        {
          bool ambig;
          FileDef *incFd = findFileDef(Doxygen::inputNameLinkedMap,absIncFileName,ambig);
          ii = state->includeRelations.add(absIncFileName,
              oldFileDef,
              ambig?0:incFd,
              incFileName,
              localInclude,
              state->isImported
              );
        }
      }

      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<state->includeStack.size();i++)
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        if (alreadyProcessed)
        {
          Debug::print(Debug::Preprocessor,0,"#include %s: already processed! skipping...\n",qPrint(incFileName));
        }
        else
        {
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",qPrint(incFileName));
        }
        //printf("error: include file %s not found\n",yytext);
      }
      if (state->curlyCount>0 && !alreadyProcessed) // failed to find #include inside { ... }
      {
        warn(state->fileName,state->yyLineNr,"include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",qPrint(incFileName));
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(yyscan_t yyscanner,const QCString &sectId)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("startCondSection: skip=%d stack=%d\n",state->skip,state->condStack.size());
  CondParser prs;
  bool expResult = prs.parse(state->fileName.data(),state->yyLineNr,sectId.data());
  state->condStack.emplace(std::make_unique<preYY_CondCtx>(state->yyLineNr,sectId,state->skip));
  if (!expResult)
  {
    state->skip=TRUE;
  }
  //printf("  expResult=%d skip=%d\n",expResult,state->skip);
}

static void endCondSection(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->condStack.empty())
  {
    warn(state->fileName,state->yyLineNr,"the \\endcond does not have a corresponding \\cond in this file");
    state->skip=FALSE;
  }
  else
  {
    const std::unique_ptr<preYY_CondCtx> &ctx = state->condStack.top();
    state->skip=ctx->skip;
    state->condStack.pop();
  }
  //printf("endCondSection: skip=%d stack=%d\n",state->skip,state->condStack.count());
}

static void forceEndCondSection(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  while (!state->condStack.empty())
  {
    state->condStack.pop();
  }
  state->skip=FALSE;
}

static QCString escapeAt(const QCString &text)
{
  QCString result;
  if (!text.isEmpty())
  {
    char c;
    const char *p=text.data();
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",qPrint(expr),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput(yyscanner);
    //printf("%d=yyinput() %d\n",cc,EOF);
    return cc;
  }
}

static int getCurrentChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",qPrint(expr),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput(yyscanner);
    returnCharToStream(yyscanner,(char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",qPrint(expr),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(yyscanner,c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",qPrint(expr),rest ? rest->data() : 0,pos,c);
}

/** Returns a reference to a Define object given its name or 0 if the Define does
 *  not exist.
 */
static Define *isDefined(yyscan_t yyscanner,const QCString &name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);

  bool undef = false;
  auto findDefine = [&undef,&name](DefineMap &map)
  {
    Define *d=0;
    auto it = map.find(name.str());
    if (it!=map.end())
    {
      d = &it->second;
      if (d->undef)
      {
        undef=true;
        d=0;
      }
    }
    return d;
  };

  Define *def = findDefine(state->localDefines);
  if (def==0 && !undef)
  {
    def = findDefine(state->contextDefines);
  }
  return def;
}

static void initPredefined(yyscan_t yyscanner,const QCString &fileName)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);

  // add predefined macros
  const StringVector &predefList = Config_getList(PREDEFINED);
  for (const auto &ds : predefList)
  {
    size_t i_equals=ds.find('=');
    size_t i_obrace=ds.find('(');
    size_t i_cbrace=ds.find(')');
    bool nonRecursive = i_equals!=std::string::npos && i_equals>0 && ds[i_equals-1]==':';

    if ((i_obrace==0) || (i_equals==0) || (i_equals==1 && ds[i_equals-1]==':'))
    {
      continue; // no define name
    }

    if (i_obrace<i_equals && i_cbrace<i_equals && 
        i_obrace!=std::string::npos && i_cbrace!=std::string::npos && 
        i_obrace<i_cbrace
       ) // predefined function macro definition
    {
      static const reg::Ex reId(R"(\a\w*)");
      std::map<std::string,int> argMap;
      std::string args  = ds.substr(i_obrace+1,i_cbrace-i_obrace-1); // part between ( and )
      bool   hasVarArgs = args.find("...")!=std::string::npos;
      //printf("predefined function macro '%s'\n",ds.c_str());
      int count = 0;
      reg::Iterator arg_it(args,reId,0);
      reg::Iterator arg_end;
      // gather the formal arguments in a dictionary
      for (; arg_it!=arg_end; ++arg_it)
      {
        argMap.emplace(arg_it->str(),count++);
      }
      if (hasVarArgs) // add the variable argument if present
      {
        argMap.emplace("__VA_ARGS__",count++);
      }

      // strip definition part
      std::string definition;
      std::string in=ds.substr(i_equals+1);
      reg::Iterator re_it(in,reId);
      reg::Iterator re_end;
      size_t i=0;
      // substitute all occurrences of formal arguments by their 
      // corresponding markers
      for (; re_it!=re_end; ++re_it)
      {
        const auto &match = *re_it;
        size_t pi = match.position();
        size_t l  = match.length();
        if (pi>i) definition+=in.substr(i,pi-i);

        auto it = argMap.find(match.str());
        if (it!=argMap.end())
        {
          int argIndex = it->second;
          QCString marker;
          marker.sprintf(" @%d ",argIndex);
          definition+=marker.str();
        }
        else
        {
          definition+=match.str();
        }
        i=pi+l;
      }
      definition+=in.substr(i);

      // add define definition to the dictionary of defines for this file
      std::string dname = ds.substr(0,i_obrace);
      if (!dname.empty())
      {
        Define def;
        def.name         = dname;
        def.definition   = definition;
        def.nargs        = count;
        def.isPredefined = TRUE;
        def.nonRecursive = nonRecursive;
        def.fileDef      = state->yyFileDef;
        def.fileName     = fileName;
        def.varArgs      = hasVarArgs;
        state->contextDefines.insert(std::make_pair(def.name.str(),def));

        //printf("#define '%s' '%s' #nargs=%d hasVarArgs=%d\n",
        //  qPrint(def.name),qPrint(def.definition),def.nargs,def.varArgs);
      }
    }
    else if (!ds.empty()) // predefined non-function macro definition
    {
      //printf("predefined normal macro '%s'\n",ds.c_str());
      Define def;
      if (i_equals==std::string::npos) // simple define without argument
      {
        def.name = ds;
        def.definition = "1"; // substitute occurrences by 1 (true)
      }
      else // simple define with argument
      {
        int ine=static_cast<int>(i_equals) - (nonRecursive ? 1 : 0);
        def.name = ds.substr(0,ine);
        def.definition = ds.substr(i_equals+1);
      }
      if (!def.name.isEmpty())
      {
        def.nargs = -1;
        def.isPredefined = TRUE;
        def.nonRecursive = nonRecursive;
        def.fileDef      = state->yyFileDef;
        def.fileName     = fileName;
        state->contextDefines.insert(std::make_pair(def.name.str(),def));
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////

struct Preprocessor::Private
{
  yyscan_t yyscanner;
  preYY_state state;
};

void Preprocessor::addSearchDir(const QCString &dir)
{
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  FileInfo fi(dir.str());
  if (fi.isDir()) state->pathList.push_back(fi.absFilePath());
}

Preprocessor::Preprocessor() : p(std::make_unique<Private>())
{
  preYYlex_init_extra(&p->state,&p->yyscanner);
  addSearchDir(".");
}

Preprocessor::~Preprocessor()
{
  preYYlex_destroy(p->yyscanner);
}

void Preprocessor::processFile(const QCString &fileName,BufStr &input,BufStr &output)
{
//  printf("Preprocessor::processFile(%s)\n",fileName);
  yyscan_t yyscanner = p->yyscanner;
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;

#ifdef FLEX_DEBUG
  preYYset_debug(1,yyscanner);
#endif

  printlex(yy_flex_debug, TRUE, __FILE__, qPrint(fileName));
  size_t orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    qPrint(input));

  state->macroExpansion = Config_getBool(MACRO_EXPANSION);
  state->expandOnlyPredef = Config_getBool(EXPAND_ONLY_PREDEF);
  state->skip=FALSE;
  state->curlyCount=0;
  state->nospaces=FALSE;
  state->inputBuf=&input;
  state->inputBufPos=0;
  state->outputBuf=&output;
  state->includeStack.clear();
  state->expandedDict.clear();
  state->contextDefines.clear();
  while (!state->condStack.empty()) state->condStack.pop();

  setFileName(yyscanner,fileName);

  state->inputFileDef = state->yyFileDef;
  //yyextra->defineManager.startContext(state->fileName);

  initPredefined(yyscanner,fileName);

  state->yyLineNr = 1;
  state->yyColNr  = 1;
  state->ifcount  = 0;

  BEGIN( Start );

  state->expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  state->guardName.resize(0);
  state->lastGuardName.resize(0);
  state->guardExpr.resize(0);

  preYYlex(yyscanner);

  while (!state->condStack.empty())
  {
    const std::unique_ptr<preYY_CondCtx> &ctx = state->condStack.top();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label '%s' ",qPrint(ctx->sectionId.stripWhiteSpace()));
    warn(fileName,ctx->lineNr,"Conditional section%sdoes not have "
        "a corresponding \\endcond command within this file.",qPrint(sectionInfo));
    state->condStack.pop();
  }
  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection(yyscanner);

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    std::lock_guard<std::mutex> lock(g_debugMutex);
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output of %s (size: %d bytes):\n",qPrint(fileName),newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n");
    if (!Debug::isFlagSet(Debug::NoLineNo)) Debug::print(Debug::Preprocessor,0,"00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n' && !Debug::isFlagSet(Debug::NoLineNo)) Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (yyextra->contextDefines.size()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file (%s):\n", qPrint(fileName));
      Debug::print(Debug::Preprocessor,0,"---------\n");
      for (auto &kv : yyextra->contextDefines)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",qPrint(kv.second.name));
      }
      for (auto &kv : yyextra->localDefines)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",qPrint(kv.second.name));
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file (%s).\n", qPrint(fileName));
    }
  }

  {
    std::lock_guard<std::mutex> lock(g_updateGlobals);
    for (const auto &inc : state->includeRelations)
    {
      if (inc->fromFileDef)
      {
        inc->fromFileDef->addIncludeDependency(inc->toFileDef,inc->includeName,inc->local,inc->imported);
      }
      if (inc->toFileDef && inc->fromFileDef)
      {
        inc->toFileDef->addIncludedByDependency(inc->fromFileDef,inc->fromFileDef->docName(),inc->local,inc->imported);
      }
    }
    // add the macro definition for this file to the global map
    Doxygen::macroDefinitions.emplace(std::make_pair(state->fileName.str(),std::move(state->macroDefinitions)));
  }

  //yyextra->defineManager.endContext();
  printlex(yy_flex_debug, FALSE, __FILE__, qPrint(fileName));
//  printf("Preprocessor::processFile(%s) finished\n",fileName);
}

#if USE_STATE2STRING
#include "pre.l.h"
#endif

